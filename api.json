{
	"openapi": "3.1.0",
	"info": {
		"title": "Invoke - Community Edition",
		"description": "An API for invoking AI image operations",
		"version": "1.0.0"
	},
	"paths": {
		"/api/v1/utilities/dynamicprompts": {
			"post": {
				"tags": [
					"utilities"
				],
				"summary": "Parse Dynamicprompts",
				"description": "Creates a batch process",
				"operationId": "parse_dynamicprompts",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_parse_dynamicprompts"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DynamicPromptsResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "List Model Records",
				"description": "Get a list of models.",
				"operationId": "list_model_records",
				"parameters": [
					{
						"name": "base_models",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/BaseModelType"
									}
								},
								{
									"type": "null"
								}
							],
							"description": "Base models to include",
							"title": "Base Models"
						},
						"description": "Base models to include"
					},
					{
						"name": "model_type",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ModelType"
								},
								{
									"type": "null"
								}
							],
							"description": "The type of model to get",
							"title": "Model Type"
						},
						"description": "The type of model to get"
					},
					{
						"name": "model_name",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "Exact match on the name of the model",
							"title": "Model Name"
						},
						"description": "Exact match on the name of the model"
					},
					{
						"name": "model_format",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ModelFormat"
								},
								{
									"type": "null"
								}
							],
							"description": "Exact match on the format of the model (e.g. 'diffusers')",
							"title": "Model Format"
						},
						"description": "Exact match on the format of the model (e.g. 'diffusers')"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModelsList"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/get_by_attrs": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Model Records By Attrs",
				"description": "Gets a model by its attributes. The main use of this route is to provide backwards compatibility with the old\nmodel manager, which identified models by a combination of name, base and type.",
				"operationId": "get_model_records_by_attrs",
				"parameters": [
					{
						"name": "name",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of the model",
							"title": "Name"
						},
						"description": "The name of the model"
					},
					{
						"name": "type",
						"in": "query",
						"required": true,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/ModelType"
								}
							],
							"description": "The type of the model",
							"title": "Type"
						},
						"description": "The type of the model"
					},
					{
						"name": "base",
						"in": "query",
						"required": true,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/BaseModelType"
								}
							],
							"description": "The base model of the model",
							"title": "Base"
						},
						"description": "The base model of the model"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MainDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/MainCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/VAEDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/VAECheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/LoRALyCORISConfig"
										},
										{
											"$ref": "#/components/schemas/LoRADiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFileConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFolderConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/T2IAdapterConfig"
										},
										{
											"$ref": "#/components/schemas/SpandrelImageToImageConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
										}
									],
									"title": "Response Get Model Records By Attrs"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/i/{key}": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Model Record",
				"description": "Get a model record",
				"operationId": "get_model_record",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Key of the model record to fetch.",
							"title": "Key"
						},
						"description": "Key of the model record to fetch."
					}
				],
				"responses": {
					"200": {
						"description": "The model configuration was retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MainDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/MainCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/VAEDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/VAECheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/LoRALyCORISConfig"
										},
										{
											"$ref": "#/components/schemas/LoRADiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFileConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFolderConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/T2IAdapterConfig"
										},
										{
											"$ref": "#/components/schemas/SpandrelImageToImageConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
										}
									],
									"title": "Response Get Model Record"
								},
								"example": {
									"path": "string",
									"name": "string",
									"base": "sd-1",
									"type": "main",
									"format": "checkpoint",
									"config_path": "string",
									"key": "string",
									"hash": "string",
									"description": "string",
									"source": "string",
									"converted_at": 0,
									"variant": "normal",
									"prediction_type": "epsilon",
									"repo_variant": "fp16",
									"upcast_attention": false
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "The model could not be found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"model_manager"
				],
				"summary": "Update Model Record",
				"description": "Update a model's config.",
				"operationId": "update_model_record",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Unique key of model",
							"title": "Key"
						},
						"description": "Unique key of model"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/ModelRecordChanges"
									}
								],
								"description": "Model config",
								"title": "Changes"
							},
							"example": {
								"path": "/path/to/model",
								"name": "model_name",
								"base": "sd-1",
								"type": "main",
								"format": "checkpoint",
								"config_path": "configs/stable-diffusion/v1-inference.yaml",
								"description": "Model description",
								"variant": "normal"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The model was updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MainDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/MainCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/VAEDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/VAECheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/LoRALyCORISConfig"
										},
										{
											"$ref": "#/components/schemas/LoRADiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFileConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFolderConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/T2IAdapterConfig"
										},
										{
											"$ref": "#/components/schemas/SpandrelImageToImageConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
										}
									],
									"title": "Response Update Model Record"
								},
								"example": {
									"path": "string",
									"name": "string",
									"base": "sd-1",
									"type": "main",
									"format": "checkpoint",
									"config_path": "string",
									"key": "string",
									"hash": "string",
									"description": "string",
									"source": "string",
									"converted_at": 0,
									"variant": "normal",
									"prediction_type": "epsilon",
									"repo_variant": "fp16",
									"upcast_attention": false
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "The model could not be found"
					},
					"409": {
						"description": "There is already a model corresponding to the new name"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"model_manager"
				],
				"summary": "Delete Model",
				"description": "Delete model record from database.\n\nThe configuration record will be removed. The corresponding weights files will be\ndeleted as well if they reside within the InvokeAI \"models\" directory.",
				"operationId": "delete_model",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Unique key of model to remove from model registry.",
							"title": "Key"
						},
						"description": "Unique key of model to remove from model registry."
					}
				],
				"responses": {
					"204": {
						"description": "Model deleted successfully"
					},
					"404": {
						"description": "Model not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/scan_folder": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Scan For Models",
				"operationId": "scan_for_models",
				"parameters": [
					{
						"name": "scan_path",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"description": "Directory path to search for models",
							"title": "Scan Path"
						},
						"description": "Directory path to search for models"
					}
				],
				"responses": {
					"200": {
						"description": "Directory scanned successfully",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/FoundModel"
									},
									"title": "Response Scan For Models"
								}
							}
						}
					},
					"400": {
						"description": "Invalid directory path"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/hugging_face": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Hugging Face Models",
				"operationId": "get_hugging_face_models",
				"parameters": [
					{
						"name": "hugging_face_repo",
						"in": "query",
						"required": false,
						"schema": {
							"type": "string",
							"description": "Hugging face repo to search for models",
							"title": "Hugging Face Repo"
						},
						"description": "Hugging face repo to search for models"
					}
				],
				"responses": {
					"200": {
						"description": "Hugging Face repo scanned successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HuggingFaceModels"
								}
							}
						}
					},
					"400": {
						"description": "Invalid hugging face repo"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/i/{key}/image": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Model Image",
				"description": "Gets an image file that previews the model",
				"operationId": "get_model_image",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of model image file to get",
							"title": "Key"
						},
						"description": "The name of model image file to get"
					}
				],
				"responses": {
					"200": {
						"description": "The model image was fetched successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "The model image could not be found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"model_manager"
				],
				"summary": "Update Model Image",
				"operationId": "update_model_image",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Unique key of model",
							"title": "Key"
						},
						"description": "Unique key of model"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body_update_model_image"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "The model image was updated successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"model_manager"
				],
				"summary": "Delete Model Image",
				"operationId": "delete_model_image",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Unique key of model image to remove from model_images directory.",
							"title": "Key"
						},
						"description": "Unique key of model image to remove from model_images directory."
					}
				],
				"responses": {
					"204": {
						"description": "Model image deleted successfully"
					},
					"404": {
						"description": "Model image not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/install": {
			"post": {
				"tags": [
					"model_manager"
				],
				"summary": "Install Model",
				"description": "Install a model using a string identifier.\n\n`source` can be any of the following.\n\n1. A path on the local filesystem ('C:\\users\\fred\\model.safetensors')\n2. A Url pointing to a single downloadable model file\n3. A HuggingFace repo_id with any of the following formats:\n   - model/name\n   - model/name:fp16:vae\n   - model/name::vae          -- use default precision\n   - model/name:fp16:path/to/model.safetensors\n   - model/name::path/to/model.safetensors\n\n`config` is a ModelRecordChanges object. Fields in this object will override\nthe ones that are probed automatically. Pass an empty object to accept\nall the defaults.\n\n`access_token` is an optional access token for use with Urls that require\nauthentication.\n\nModels will be downloaded, probed, configured and installed in a\nseries of background threads. The return object has `status` attribute\nthat can be used to monitor progress.\n\nSee the documentation for `import_model_record` for more information on\ninterpreting the job information returned by this route.",
				"operationId": "install_model",
				"parameters": [
					{
						"name": "source",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Model source to install, can be a local path, repo_id, or remote URL",
							"title": "Source"
						},
						"description": "Model source to install, can be a local path, repo_id, or remote URL"
					},
					{
						"name": "inplace",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"type": "null"
								}
							],
							"description": "Whether or not to install a local model in place",
							"default": false,
							"title": "Inplace"
						},
						"description": "Whether or not to install a local model in place"
					},
					{
						"name": "access_token",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "access token for the remote resource",
							"title": "Access Token"
						},
						"description": "access token for the remote resource"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/ModelRecordChanges"
									}
								],
								"description": "Object containing fields that override auto-probed values in the model config record, such as name, description and prediction_type ",
								"title": "Config"
							},
							"example": {
								"name": "string",
								"description": "string"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The model imported successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModelInstallJob"
								}
							}
						}
					},
					"409": {
						"description": "There is already a model corresponding to this path or repo_id"
					},
					"415": {
						"description": "Unrecognized file/folder format"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					},
					"424": {
						"description": "The model appeared to import successfully, but could not be found in the model manager"
					}
				}
			},
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "List Model Installs",
				"description": "Return the list of model install jobs.\n\nInstall jobs have a numeric `id`, a `status`, and other fields that provide information on\nthe nature of the job and its progress. The `status` is one of:\n\n* \"waiting\" -- Job is waiting in the queue to run\n* \"downloading\" -- Model file(s) are downloading\n* \"running\" -- Model has downloaded and the model probing and registration process is running\n* \"completed\" -- Installation completed successfully\n* \"error\" -- An error occurred. Details will be in the \"error_type\" and \"error\" fields.\n* \"cancelled\" -- Job was cancelled before completion.\n\nOnce completed, information about the model such as its size, base\nmodel and type can be retrieved from the `config_out` field. For multi-file models such as diffusers,\ninformation on individual files can be retrieved from `download_parts`.\n\nSee the example and schema below for more information.",
				"operationId": "list_model_installs",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ModelInstallJob"
									},
									"title": "Response List Model Installs"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"model_manager"
				],
				"summary": "Prune Model Install Jobs",
				"description": "Prune all completed and errored jobs from the install job list.",
				"operationId": "prune_model_install_jobs",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"204": {
						"description": "All completed and errored jobs have been pruned"
					},
					"400": {
						"description": "Bad request"
					}
				}
			}
		},
		"/api/v2/models/install/huggingface": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Install Hugging Face Model",
				"description": "Install a Hugging Face model using a string identifier.",
				"operationId": "install_hugging_face_model",
				"parameters": [
					{
						"name": "source",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "HuggingFace repo_id to install",
							"title": "Source"
						},
						"description": "HuggingFace repo_id to install"
					}
				],
				"responses": {
					"201": {
						"description": "The model is being installed",
						"content": {
							"text/html": {
								"schema": {
									"type": "string"
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"409": {
						"description": "There is already a model corresponding to this path or repo_id"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/install/{id}": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Model Install Job",
				"description": "Return model install job corresponding to the given source. See the documentation for 'List Model Install Jobs'\nfor information on the format of the return value.",
				"operationId": "get_model_install_job",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Model install id",
							"title": "Id"
						},
						"description": "Model install id"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ModelInstallJob"
								}
							}
						}
					},
					"404": {
						"description": "No such job"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"model_manager"
				],
				"summary": "Cancel Model Install Job",
				"description": "Cancel the model install job(s) corresponding to the given job ID.",
				"operationId": "cancel_model_install_job",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "Model install job ID",
							"title": "Id"
						},
						"description": "Model install job ID"
					}
				],
				"responses": {
					"201": {
						"description": "The job was cancelled successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"415": {
						"description": "No such job"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/convert/{key}": {
			"put": {
				"tags": [
					"model_manager"
				],
				"summary": "Convert Model",
				"description": "Permanently convert a model into diffusers format, replacing the safetensors version.\nNote that during the conversion process the key and model hash will change.\nThe return value is the model configuration for the converted model.",
				"operationId": "convert_model",
				"parameters": [
					{
						"name": "key",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "Unique key of the safetensors main model to convert to diffusers format.",
							"title": "Key"
						},
						"description": "Unique key of the safetensors main model to convert to diffusers format."
					}
				],
				"responses": {
					"200": {
						"description": "Model converted successfully",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"$ref": "#/components/schemas/MainDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/MainCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/VAEDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/VAECheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/ControlNetCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/LoRALyCORISConfig"
										},
										{
											"$ref": "#/components/schemas/LoRADiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderConfig"
										},
										{
											"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFileConfig"
										},
										{
											"$ref": "#/components/schemas/TextualInversionFolderConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
										},
										{
											"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
										},
										{
											"$ref": "#/components/schemas/T2IAdapterConfig"
										},
										{
											"$ref": "#/components/schemas/SpandrelImageToImageConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
										},
										{
											"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
										}
									],
									"title": "Response Convert Model"
								},
								"example": {
									"path": "string",
									"name": "string",
									"base": "sd-1",
									"type": "main",
									"format": "checkpoint",
									"config_path": "string",
									"key": "string",
									"hash": "string",
									"description": "string",
									"source": "string",
									"converted_at": 0,
									"variant": "normal",
									"prediction_type": "epsilon",
									"repo_variant": "fp16",
									"upcast_attention": false
								}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "Model not found"
					},
					"409": {
						"description": "There is already a model registered at this location"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/starter_models": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get Starter Models",
				"operationId": "get_starter_models",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/StarterModel"
									},
									"type": "array",
									"title": "Response Get Starter Models"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/model_cache": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get maximum size of model manager RAM or VRAM cache.",
				"description": "Return the current RAM or VRAM cache size setting (in GB).",
				"operationId": "get_cache_size",
				"parameters": [
					{
						"name": "cache_type",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/CacheType"
								}
							],
							"description": "The cache type",
							"default": "RAM",
							"title": "Cache Type"
						},
						"description": "The cache type"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"title": "Response Get Cache Size"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"put": {
				"tags": [
					"model_manager"
				],
				"summary": "Set maximum size of model manager RAM or VRAM cache, optionally writing new value out to invokeai.yaml config file.",
				"description": "Set the current RAM or VRAM cache size setting (in GB). .",
				"operationId": "set_cache_size",
				"parameters": [
					{
						"name": "value",
						"in": "query",
						"required": true,
						"schema": {
							"type": "number",
							"description": "The new value for the maximum cache size",
							"title": "Value"
						},
						"description": "The new value for the maximum cache size"
					},
					{
						"name": "cache_type",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/CacheType"
								}
							],
							"description": "The cache type",
							"default": "RAM",
							"title": "Cache Type"
						},
						"description": "The cache type"
					},
					{
						"name": "persist",
						"in": "query",
						"required": false,
						"schema": {
							"type": "boolean",
							"description": "Write new value out to invokeai.yaml",
							"default": false,
							"title": "Persist"
						},
						"description": "Write new value out to invokeai.yaml"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"title": "Response Set Cache Size"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v2/models/stats": {
			"get": {
				"tags": [
					"model_manager"
				],
				"summary": "Get model manager RAM cache performance statistics.",
				"description": "Return performance statistics on the model manager's RAM cache. Will return null if no models have been loaded.",
				"operationId": "get_stats",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/CacheStats"
										},
										{
											"type": "null"
										}
									],
									"title": "Response Get Stats"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/download_queue/": {
			"get": {
				"tags": [
					"download_queue"
				],
				"summary": "List Downloads",
				"description": "Get a list of active and inactive jobs.",
				"operationId": "list_downloads",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/DownloadJob"
									},
									"type": "array",
									"title": "Response List Downloads"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"download_queue"
				],
				"summary": "Prune Downloads",
				"description": "Prune completed and errored jobs.",
				"operationId": "prune_downloads",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"204": {
						"description": "All completed jobs have been pruned"
					},
					"400": {
						"description": "Bad request"
					}
				}
			}
		},
		"/api/v1/download_queue/i/": {
			"post": {
				"tags": [
					"download_queue"
				],
				"summary": "Download",
				"description": "Download the source URL to the file or directory indicted in dest.",
				"operationId": "download",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_download"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DownloadJob"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/download_queue/i/{id}": {
			"get": {
				"tags": [
					"download_queue"
				],
				"summary": "Get Download Job",
				"description": "Get a download job using its ID.",
				"operationId": "get_download_job",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "ID of the download job to fetch.",
							"title": "Id"
						},
						"description": "ID of the download job to fetch."
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DownloadJob"
								}
							}
						}
					},
					"404": {
						"description": "The requested download JobID could not be found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"download_queue"
				],
				"summary": "Cancel Download Job",
				"description": "Cancel a download job using its ID.",
				"operationId": "cancel_download_job",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "ID of the download job to cancel.",
							"title": "Id"
						},
						"description": "ID of the download job to cancel."
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"204": {
						"description": "Job has been cancelled"
					},
					"404": {
						"description": "The requested download JobID could not be found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/download_queue/i": {
			"delete": {
				"tags": [
					"download_queue"
				],
				"summary": "Cancel All Download Jobs",
				"description": "Cancel all download jobs.",
				"operationId": "cancel_all_download_jobs",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"204": {
						"description": "Download jobs have been cancelled"
					}
				}
			}
		},
		"/api/v1/images/upload": {
			"post": {
				"tags": [
					"images"
				],
				"summary": "Upload Image",
				"description": "Uploads an image",
				"operationId": "upload_image",
				"parameters": [
					{
						"name": "image_category",
						"in": "query",
						"required": true,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/ImageCategory"
								}
							],
							"description": "The category of the image",
							"title": "Image Category"
						},
						"description": "The category of the image"
					},
					{
						"name": "is_intermediate",
						"in": "query",
						"required": true,
						"schema": {
							"type": "boolean",
							"description": "Whether this is an intermediate image",
							"title": "Is Intermediate"
						},
						"description": "Whether this is an intermediate image"
					},
					{
						"name": "board_id",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The board to add this image to, if any",
							"title": "Board Id"
						},
						"description": "The board to add this image to, if any"
					},
					{
						"name": "session_id",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The session ID associated with this upload, if any",
							"title": "Session Id"
						},
						"description": "The session ID associated with this upload, if any"
					},
					{
						"name": "crop_visible",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"type": "null"
								}
							],
							"description": "Whether to crop the image",
							"default": false,
							"title": "Crop Visible"
						},
						"description": "Whether to crop the image"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body_upload_image"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The image was uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImageDTO"
								}
							}
						}
					},
					"415": {
						"description": "Image upload failed"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}": {
			"delete": {
				"tags": [
					"images"
				],
				"summary": "Delete Image",
				"description": "Deletes an image",
				"operationId": "delete_image",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of the image to delete",
							"title": "Image Name"
						},
						"description": "The name of the image to delete"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"images"
				],
				"summary": "Update Image",
				"description": "Updates an image",
				"operationId": "update_image",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of the image to update",
							"title": "Image Name"
						},
						"description": "The name of the image to update"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/ImageRecordChanges"
									}
								],
								"description": "The changes to apply to the image",
								"title": "Image Changes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImageDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Dto",
				"description": "Gets an image's DTO",
				"operationId": "get_image_dto",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of image to get",
							"title": "Image Name"
						},
						"description": "The name of image to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImageDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/intermediates": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Intermediates Count",
				"description": "Gets the count of intermediate images",
				"operationId": "get_intermediates_count",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"title": "Response Get Intermediates Count"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"images"
				],
				"summary": "Clear Intermediates",
				"description": "Clears all intermediates",
				"operationId": "clear_intermediates",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "integer",
									"title": "Response Clear Intermediates"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}/metadata": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Metadata",
				"description": "Gets an image's metadata",
				"operationId": "get_image_metadata",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of image to get",
							"title": "Image Name"
						},
						"description": "The name of image to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/MetadataField"
										},
										{
											"type": "null"
										}
									],
									"title": "Response Get Image Metadata"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}/workflow": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Workflow",
				"operationId": "get_image_workflow",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of image whose workflow to get",
							"title": "Image Name"
						},
						"description": "The name of image whose workflow to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WorkflowAndGraphResponse"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}/full": {
			"head": {
				"tags": [
					"images"
				],
				"summary": "Get Image Full",
				"description": "Gets a full-resolution image file",
				"operationId": "get_image_full_head",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of full-resolution image file to get",
							"title": "Image Name"
						},
						"description": "The name of full-resolution image file to get"
					}
				],
				"responses": {
					"200": {
						"description": "Return the full-resolution image",
						"content": {
							"image/png": {}
						}
					},
					"404": {
						"description": "Image not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Full",
				"description": "Gets a full-resolution image file",
				"operationId": "get_image_full",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of full-resolution image file to get",
							"title": "Image Name"
						},
						"description": "The name of full-resolution image file to get"
					}
				],
				"responses": {
					"200": {
						"description": "Return the full-resolution image",
						"content": {
							"image/png": {}
						}
					},
					"404": {
						"description": "Image not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}/thumbnail": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Thumbnail",
				"description": "Gets a thumbnail image file",
				"operationId": "get_image_thumbnail",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of thumbnail image file to get",
							"title": "Image Name"
						},
						"description": "The name of thumbnail image file to get"
					}
				],
				"responses": {
					"200": {
						"description": "Return the image thumbnail",
						"content": {
							"image/webp": {}
						}
					},
					"404": {
						"description": "Image not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/i/{image_name}/urls": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Image Urls",
				"description": "Gets an image and thumbnail URL",
				"operationId": "get_image_urls",
				"parameters": [
					{
						"name": "image_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of the image whose URL to get",
							"title": "Image Name"
						},
						"description": "The name of the image whose URL to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImageUrlsDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "List Image Dtos",
				"description": "Gets a list of image DTOs",
				"operationId": "list_image_dtos",
				"parameters": [
					{
						"name": "image_origin",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ResourceOrigin"
								},
								{
									"type": "null"
								}
							],
							"description": "The origin of images to list.",
							"title": "Image Origin"
						},
						"description": "The origin of images to list."
					},
					{
						"name": "categories",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/ImageCategory"
									}
								},
								{
									"type": "null"
								}
							],
							"description": "The categories of image to include.",
							"title": "Categories"
						},
						"description": "The categories of image to include."
					},
					{
						"name": "is_intermediate",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"type": "null"
								}
							],
							"description": "Whether to list intermediate images.",
							"title": "Is Intermediate"
						},
						"description": "Whether to list intermediate images."
					},
					{
						"name": "board_id",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The board id to filter by. Use 'none' to find images without a board.",
							"title": "Board Id"
						},
						"description": "The board id to filter by. Use 'none' to find images without a board."
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The page offset",
							"default": 0,
							"title": "Offset"
						},
						"description": "The page offset"
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The number of images per page",
							"default": 10,
							"title": "Limit"
						},
						"description": "The number of images per page"
					},
					{
						"name": "order_dir",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/SQLiteDirection"
								}
							],
							"description": "The order of sort",
							"default": "DESC",
							"title": "Order Dir"
						},
						"description": "The order of sort"
					},
					{
						"name": "starred_first",
						"in": "query",
						"required": false,
						"schema": {
							"type": "boolean",
							"description": "Whether to sort by starred images first",
							"default": true,
							"title": "Starred First"
						},
						"description": "Whether to sort by starred images first"
					},
					{
						"name": "search_term",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The term to search for",
							"title": "Search Term"
						},
						"description": "The term to search for"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/OffsetPaginatedResults_ImageDTO_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/delete": {
			"post": {
				"tags": [
					"images"
				],
				"summary": "Delete Images From List",
				"operationId": "delete_images_from_list",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_delete_images_from_list"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteImagesFromListResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/star": {
			"post": {
				"tags": [
					"images"
				],
				"summary": "Star Images In List",
				"operationId": "star_images_in_list",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_star_images_in_list"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImagesUpdatedFromListResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/unstar": {
			"post": {
				"tags": [
					"images"
				],
				"summary": "Unstar Images In List",
				"operationId": "unstar_images_in_list",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_unstar_images_in_list"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImagesUpdatedFromListResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/download": {
			"post": {
				"tags": [
					"images"
				],
				"summary": "Download Images From List",
				"operationId": "download_images_from_list",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/Body_download_images_from_list"
									}
								],
								"title": "Body"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ImagesDownloaded"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/images/download/{bulk_download_item_name}": {
			"get": {
				"tags": [
					"images"
				],
				"summary": "Get Bulk Download Item",
				"description": "Gets a bulk download zip file",
				"operationId": "get_bulk_download_item",
				"parameters": [
					{
						"name": "bulk_download_item_name",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The bulk_download_item_name of the bulk download item to get",
							"title": "Bulk Download Item Name"
						},
						"description": "The bulk_download_item_name of the bulk download item to get"
					}
				],
				"responses": {
					"200": {
						"description": "Return the complete bulk download item",
						"content": {
							"application/zip": {}
						}
					},
					"404": {
						"description": "Image not found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/boards/": {
			"post": {
				"tags": [
					"boards"
				],
				"summary": "Create Board",
				"description": "Creates a board",
				"operationId": "create_board",
				"parameters": [
					{
						"name": "board_name",
						"in": "query",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The name of the board to create",
							"title": "Board Name"
						},
						"description": "The name of the board to create"
					},
					{
						"name": "is_private",
						"in": "query",
						"required": false,
						"schema": {
							"type": "boolean",
							"description": "Whether the board is private",
							"default": false,
							"title": "Is Private"
						},
						"description": "Whether the board is private"
					}
				],
				"responses": {
					"201": {
						"description": "The board was created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BoardDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"boards"
				],
				"summary": "List Boards",
				"description": "Gets a list of boards",
				"operationId": "list_boards",
				"parameters": [
					{
						"name": "all",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"type": "null"
								}
							],
							"description": "Whether to list all boards",
							"title": "All"
						},
						"description": "Whether to list all boards"
					},
					{
						"name": "offset",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "null"
								}
							],
							"description": "The page offset",
							"title": "Offset"
						},
						"description": "The page offset"
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "null"
								}
							],
							"description": "The number of boards per page",
							"title": "Limit"
						},
						"description": "The number of boards per page"
					},
					{
						"name": "include_archived",
						"in": "query",
						"required": false,
						"schema": {
							"type": "boolean",
							"description": "Whether or not to include archived boards in list",
							"default": false,
							"title": "Include Archived"
						},
						"description": "Whether or not to include archived boards in list"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/OffsetPaginatedResults_BoardDTO_"
										},
										{
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/BoardDTO"
											}
										}
									],
									"title": "Response List Boards"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/boards/{board_id}": {
			"get": {
				"tags": [
					"boards"
				],
				"summary": "Get Board",
				"description": "Gets a board",
				"operationId": "get_board",
				"parameters": [
					{
						"name": "board_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of board to get",
							"title": "Board Id"
						},
						"description": "The id of board to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BoardDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"boards"
				],
				"summary": "Update Board",
				"description": "Updates a board",
				"operationId": "update_board",
				"parameters": [
					{
						"name": "board_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of board to update",
							"title": "Board Id"
						},
						"description": "The id of board to update"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/BoardChanges"
									}
								],
								"description": "The changes to apply to the board",
								"title": "Changes"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "The board was updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BoardDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"boards"
				],
				"summary": "Delete Board",
				"description": "Deletes a board",
				"operationId": "delete_board",
				"parameters": [
					{
						"name": "board_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of board to delete",
							"title": "Board Id"
						},
						"description": "The id of board to delete"
					},
					{
						"name": "include_images",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "boolean"
								},
								{
									"type": "null"
								}
							],
							"description": "Permanently delete all images on the board",
							"default": false,
							"title": "Include Images"
						},
						"description": "Permanently delete all images on the board"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DeleteBoardResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/boards/{board_id}/image_names": {
			"get": {
				"tags": [
					"boards"
				],
				"summary": "List All Board Image Names",
				"description": "Gets a list of images for a board",
				"operationId": "list_all_board_image_names",
				"parameters": [
					{
						"name": "board_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of the board",
							"title": "Board Id"
						},
						"description": "The id of the board"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string"
									},
									"title": "Response List All Board Image Names"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/board_images/": {
			"post": {
				"tags": [
					"boards"
				],
				"summary": "Add Image To Board",
				"description": "Creates a board_image",
				"operationId": "add_image_to_board",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_add_image_to_board"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The image was added to a board successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"boards"
				],
				"summary": "Remove Image From Board",
				"description": "Removes an image from its board, if it had one",
				"operationId": "remove_image_from_board",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_remove_image_from_board"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "The image was removed from the board successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/board_images/batch": {
			"post": {
				"tags": [
					"boards"
				],
				"summary": "Add Images To Board",
				"description": "Adds a list of images to a board",
				"operationId": "add_images_to_board",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_add_images_to_board"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Images were added to board successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddImagesToBoardResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/board_images/batch/delete": {
			"post": {
				"tags": [
					"boards"
				],
				"summary": "Remove Images From Board",
				"description": "Removes a list of images from their board, if they had one",
				"operationId": "remove_images_from_board",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_remove_images_from_board"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "Images were removed from board successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RemoveImagesFromBoardResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/version": {
			"get": {
				"tags": [
					"app"
				],
				"summary": "Get Version",
				"operationId": "app_version",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AppVersion"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/app_deps": {
			"get": {
				"tags": [
					"app"
				],
				"summary": "Get App Deps",
				"operationId": "get_app_deps",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AppDependencyVersions"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/config": {
			"get": {
				"tags": [
					"app"
				],
				"summary": "Get Config",
				"operationId": "get_config",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AppConfig"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/logging": {
			"get": {
				"tags": [
					"app"
				],
				"summary": "Get Log Level",
				"description": "Returns the log level",
				"operationId": "get_log_level",
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogLevel"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"app"
				],
				"summary": "Set Log Level",
				"description": "Sets the log verbosity level",
				"operationId": "set_log_level",
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"$ref": "#/components/schemas/LogLevel"
									}
								],
								"title": "Level",
								"description": "New log verbosity level"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogLevel"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/invocation_cache": {
			"delete": {
				"tags": [
					"app"
				],
				"summary": "Clear Invocation Cache",
				"description": "Clears the invocation cache",
				"operationId": "clear_invocation_cache",
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/invocation_cache/enable": {
			"put": {
				"tags": [
					"app"
				],
				"summary": "Enable Invocation Cache",
				"description": "Clears the invocation cache",
				"operationId": "enable_invocation_cache",
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/invocation_cache/disable": {
			"put": {
				"tags": [
					"app"
				],
				"summary": "Disable Invocation Cache",
				"description": "Clears the invocation cache",
				"operationId": "disable_invocation_cache",
				"responses": {
					"200": {
						"description": "The operation was successful",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				}
			}
		},
		"/api/v1/app/invocation_cache/status": {
			"get": {
				"tags": [
					"app"
				],
				"summary": "Get Invocation Cache Status",
				"description": "Clears the invocation cache",
				"operationId": "get_invocation_cache_status",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvocationCacheStatus"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/enqueue_batch": {
			"post": {
				"tags": [
					"queue"
				],
				"summary": "Enqueue Batch",
				"description": "Processes a batch and enqueues the output graphs for execution.",
				"operationId": "enqueue_batch",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_enqueue_batch"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EnqueueBatchResult"
								}
							}
						}
					},
					"201": {
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/EnqueueBatchResult"
								}
							}
						},
						"description": "Created"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/list": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "List Queue Items",
				"description": "Gets all queue items (without graphs)",
				"operationId": "list_queue_items",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					},
					{
						"name": "limit",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The number of items to fetch",
							"default": 50,
							"title": "Limit"
						},
						"description": "The number of items to fetch"
					},
					{
						"name": "status",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"enum": [
										"pending",
										"in_progress",
										"completed",
										"failed",
										"canceled"
									],
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The status of items to fetch",
							"title": "Status"
						},
						"description": "The status of items to fetch"
					},
					{
						"name": "cursor",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "integer"
								},
								{
									"type": "null"
								}
							],
							"description": "The pagination cursor",
							"title": "Cursor"
						},
						"description": "The pagination cursor"
					},
					{
						"name": "priority",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The pagination cursor priority",
							"default": 0,
							"title": "Priority"
						},
						"description": "The pagination cursor priority"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CursorPaginatedResults_SessionQueueItemDTO_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/processor/resume": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Resume",
				"description": "Resumes session processor",
				"operationId": "resume",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionProcessorStatus"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/processor/pause": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Pause",
				"description": "Pauses session processor",
				"operationId": "pause",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionProcessorStatus"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/cancel_by_batch_ids": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Cancel By Batch Ids",
				"description": "Immediately cancels all queue items from the given batch ids",
				"operationId": "cancel_by_batch_ids",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_cancel_by_batch_ids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CancelByBatchIDsResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/clear": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Clear",
				"description": "Clears the queue entirely, immediately canceling the currently-executing session",
				"operationId": "clear",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ClearResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/prune": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Prune",
				"description": "Prunes all completed or errored queue items",
				"operationId": "prune",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PruneResult"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/current": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "Get Current Queue Item",
				"description": "Gets the currently execution queue item",
				"operationId": "get_current_queue_item",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SessionQueueItem"
										},
										{
											"type": "null"
										},
										{
											"$ref": "#/components/schemas/SessionQueueItem"
										},
										{
											"type": "null"
										}
									],
									"title": "Response 200 Get Current Queue Item"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/next": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "Get Next Queue Item",
				"description": "Gets the next queue item, without executing it",
				"operationId": "get_next_queue_item",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/SessionQueueItem"
										},
										{
											"type": "null"
										},
										{
											"$ref": "#/components/schemas/SessionQueueItem"
										},
										{
											"type": "null"
										}
									],
									"title": "Response 200 Get Next Queue Item"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/status": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "Get Queue Status",
				"description": "Gets the status of the session queue",
				"operationId": "get_queue_status",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionQueueAndProcessorStatus"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/b/{batch_id}/status": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "Get Batch Status",
				"description": "Gets the status of the session queue",
				"operationId": "get_batch_status",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					},
					{
						"name": "batch_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The batch to get the status of",
							"title": "Batch Id"
						},
						"description": "The batch to get the status of"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BatchStatus"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/i/{item_id}": {
			"get": {
				"tags": [
					"queue"
				],
				"summary": "Get Queue Item",
				"description": "Gets a queue item",
				"operationId": "get_queue_item",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					},
					{
						"name": "item_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "The queue item to get",
							"title": "Item Id"
						},
						"description": "The queue item to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionQueueItem"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/queue/{queue_id}/i/{item_id}/cancel": {
			"put": {
				"tags": [
					"queue"
				],
				"summary": "Cancel Queue Item",
				"description": "Deletes a queue item",
				"operationId": "cancel_queue_item",
				"parameters": [
					{
						"name": "queue_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The queue id to perform this operation on",
							"title": "Queue Id"
						},
						"description": "The queue id to perform this operation on"
					},
					{
						"name": "item_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "integer",
							"description": "The queue item to cancel",
							"title": "Item Id"
						},
						"description": "The queue item to cancel"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SessionQueueItem"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/workflows/i/{workflow_id}": {
			"get": {
				"tags": [
					"workflows"
				],
				"summary": "Get Workflow",
				"description": "Gets a workflow",
				"operationId": "get_workflow",
				"parameters": [
					{
						"name": "workflow_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The workflow to get",
							"title": "Workflow Id"
						},
						"description": "The workflow to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WorkflowRecordDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"workflows"
				],
				"summary": "Update Workflow",
				"description": "Updates a workflow",
				"operationId": "update_workflow",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_update_workflow"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WorkflowRecordDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"workflows"
				],
				"summary": "Delete Workflow",
				"description": "Deletes a workflow",
				"operationId": "delete_workflow",
				"parameters": [
					{
						"name": "workflow_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The workflow to delete",
							"title": "Workflow Id"
						},
						"description": "The workflow to delete"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/workflows/": {
			"post": {
				"tags": [
					"workflows"
				],
				"summary": "Create Workflow",
				"description": "Creates a workflow",
				"operationId": "create_workflow",
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Body_create_workflow"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/WorkflowRecordDTO"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"get": {
				"tags": [
					"workflows"
				],
				"summary": "List Workflows",
				"description": "Gets a page of workflows",
				"operationId": "list_workflows",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The page to get",
							"default": 0,
							"title": "Page"
						},
						"description": "The page to get"
					},
					{
						"name": "per_page",
						"in": "query",
						"required": false,
						"schema": {
							"type": "integer",
							"description": "The number of workflows per page",
							"default": 10,
							"title": "Per Page"
						},
						"description": "The number of workflows per page"
					},
					{
						"name": "order_by",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/WorkflowRecordOrderBy"
								}
							],
							"description": "The attribute to order by",
							"default": "name",
							"title": "Order By"
						},
						"description": "The attribute to order by"
					},
					{
						"name": "direction",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/SQLiteDirection"
								}
							],
							"description": "The direction to order by",
							"default": "ASC",
							"title": "Direction"
						},
						"description": "The direction to order by"
					},
					{
						"name": "category",
						"in": "query",
						"required": false,
						"schema": {
							"allOf": [
								{
									"$ref": "#/components/schemas/WorkflowCategory"
								}
							],
							"description": "The category of workflow to get",
							"default": "user",
							"title": "Category"
						},
						"description": "The category of workflow to get"
					},
					{
						"name": "query",
						"in": "query",
						"required": false,
						"schema": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "null"
								}
							],
							"description": "The text to query by (matches name and description)",
							"title": "Query"
						},
						"description": "The text to query by (matches name and description)"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResults_WorkflowRecordListItemDTO_"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/style_presets/i/{style_preset_id}": {
			"get": {
				"tags": [
					"style_presets"
				],
				"summary": "Get Style Preset",
				"description": "Gets a style preset",
				"operationId": "get_style_preset",
				"parameters": [
					{
						"name": "style_preset_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The style preset to get",
							"title": "Style Preset Id"
						},
						"description": "The style preset to get"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StylePresetRecordWithImage"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"patch": {
				"tags": [
					"style_presets"
				],
				"summary": "Update Style Preset",
				"description": "Updates a style preset",
				"operationId": "update_style_preset",
				"parameters": [
					{
						"name": "style_preset_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of the style preset to update",
							"title": "Style Preset Id"
						},
						"description": "The id of the style preset to update"
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body_update_style_preset"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StylePresetRecordWithImage"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"style_presets"
				],
				"summary": "Delete Style Preset",
				"description": "Deletes a style preset",
				"operationId": "delete_style_preset",
				"parameters": [
					{
						"name": "style_preset_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The style preset to delete",
							"title": "Style Preset Id"
						},
						"description": "The style preset to delete"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/style_presets/": {
			"get": {
				"tags": [
					"style_presets"
				],
				"summary": "List Style Presets",
				"description": "Gets a page of style presets",
				"operationId": "list_style_presets",
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/StylePresetRecordWithImage"
									},
									"type": "array",
									"title": "Response 200 List Style Presets"
								}
							}
						}
					}
				}
			},
			"post": {
				"tags": [
					"style_presets"
				],
				"summary": "Create Style Preset",
				"description": "Creates a style preset",
				"operationId": "create_style_preset",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body_create_style_preset"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StylePresetRecordWithImage"
								}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/style_presets/i/{style_preset_id}/image": {
			"get": {
				"tags": [
					"style_presets"
				],
				"summary": "Get Style Preset Image",
				"description": "Gets an image file that previews the model",
				"operationId": "get_style_preset_image",
				"parameters": [
					{
						"name": "style_preset_id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"description": "The id of the style preset image to get",
							"title": "Style Preset Id"
						},
						"description": "The id of the style preset image to get"
					}
				],
				"responses": {
					"200": {
						"description": "The style preset image was fetched successfully",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"400": {
						"description": "Bad request"
					},
					"404": {
						"description": "The style preset image could not be found"
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/style_presets/export": {
			"get": {
				"tags": [
					"style_presets"
				],
				"summary": "Export Style Presets",
				"operationId": "export_style_presets",
				"responses": {
					"200": {
						"description": "A CSV file with the requested data.",
						"content": {
							"application/json": {
								"schema": {}
							},
							"text/csv": {}
						}
					}
				}
			}
		},
		"/api/v1/style_presets/import": {
			"post": {
				"tags": [
					"style_presets"
				],
				"summary": "Import Style Presets",
				"operationId": "import_style_presets",
				"requestBody": {
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/Body_import_style_presets"
							}
						}
					},
					"required": true
				},
				"responses": {
					"200": {
						"description": "Successful Response",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					},
					"422": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HTTPValidationError"
								}
							}
						}
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"AddImagesToBoardResult": {
				"properties": {
					"board_id": {
						"type": "string",
						"title": "Board Id",
						"description": "The id of the board the images were added to"
					},
					"added_image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Added Image Names",
						"description": "The image names that were added to the board"
					}
				},
				"type": "object",
				"required": [
					"board_id",
					"added_image_names"
				],
				"title": "AddImagesToBoardResult"
			},
			"AddInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Adds two numbers",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"a": {
						"default": 0,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "A",
						"type": "integer",
						"ui_hidden": false
					},
					"b": {
						"default": 0,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "B",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "add",
						"default": "add",
						"enum": [
							"add"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"add"
				],
				"title": "Add Integers",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"AlphaMaskToTensorInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "beta",
				"description": "Convert a mask image to a tensor. Opaque regions are 1 and transparent regions are 0.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The mask image to convert.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"invert": {
						"default": false,
						"description": "Whether to invert the mask.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "alpha_mask_to_tensor",
						"default": "alpha_mask_to_tensor",
						"enum": [
							"alpha_mask_to_tensor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"conditioning"
				],
				"title": "Alpha Mask to Tensor",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/MaskOutput"
				}
			},
			"AppConfig": {
				"properties": {
					"infill_methods": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Infill Methods",
						"description": "List of available infill methods"
					},
					"upscaling_methods": {
						"items": {
							"$ref": "#/components/schemas/Upscaler"
						},
						"type": "array",
						"title": "Upscaling Methods",
						"description": "List of upscaling methods"
					},
					"nsfw_methods": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Nsfw Methods",
						"description": "List of NSFW checking methods"
					},
					"watermarking_methods": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Watermarking Methods",
						"description": "List of invisible watermark methods"
					}
				},
				"type": "object",
				"required": [
					"infill_methods",
					"upscaling_methods",
					"nsfw_methods",
					"watermarking_methods"
				],
				"title": "AppConfig",
				"description": "App Config Response"
			},
			"AppDependencyVersions": {
				"properties": {
					"accelerate": {
						"type": "string",
						"title": "Accelerate",
						"description": "accelerate version"
					},
					"compel": {
						"type": "string",
						"title": "Compel",
						"description": "compel version"
					},
					"cuda": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cuda",
						"description": "CUDA version"
					},
					"diffusers": {
						"type": "string",
						"title": "Diffusers",
						"description": "diffusers version"
					},
					"numpy": {
						"type": "string",
						"title": "Numpy",
						"description": "Numpy version"
					},
					"opencv": {
						"type": "string",
						"title": "Opencv",
						"description": "OpenCV version"
					},
					"onnx": {
						"type": "string",
						"title": "Onnx",
						"description": "ONNX version"
					},
					"pillow": {
						"type": "string",
						"title": "Pillow",
						"description": "Pillow (PIL) version"
					},
					"python": {
						"type": "string",
						"title": "Python",
						"description": "Python version"
					},
					"torch": {
						"type": "string",
						"title": "Torch",
						"description": "PyTorch version"
					},
					"torchvision": {
						"type": "string",
						"title": "Torchvision",
						"description": "PyTorch Vision version"
					},
					"transformers": {
						"type": "string",
						"title": "Transformers",
						"description": "transformers version"
					},
					"xformers": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Xformers",
						"description": "xformers version"
					}
				},
				"type": "object",
				"required": [
					"accelerate",
					"compel",
					"cuda",
					"diffusers",
					"numpy",
					"opencv",
					"onnx",
					"pillow",
					"python",
					"torch",
					"torchvision",
					"transformers",
					"xformers"
				],
				"title": "AppDependencyVersions",
				"description": "App depencency Versions Response"
			},
			"AppVersion": {
				"properties": {
					"version": {
						"type": "string",
						"title": "Version",
						"description": "App version"
					}
				},
				"type": "object",
				"required": [
					"version"
				],
				"title": "AppVersion",
				"description": "App Version Response"
			},
			"BaseMetadata": {
				"properties": {
					"name": {
						"type": "string",
						"title": "Name",
						"description": "model's name"
					},
					"type": {
						"type": "string",
						"enum": [
							"basemetadata"
						],
						"const": "basemetadata",
						"title": "Type",
						"default": "basemetadata"
					}
				},
				"type": "object",
				"required": [
					"name"
				],
				"title": "BaseMetadata",
				"description": "Adds typing data for discriminated union."
			},
			"BaseModelType": {
				"type": "string",
				"enum": [
					"any",
					"sd-1",
					"sd-2",
					"sdxl",
					"sdxl-refiner",
					"flux"
				],
				"title": "BaseModelType",
				"description": "Base model type."
			},
			"Batch": {
				"properties": {
					"batch_id": {
						"type": "string",
						"title": "Batch Id",
						"description": "The ID of the batch"
					},
					"data": {
						"anyOf": [
							{
								"items": {
									"items": {
										"$ref": "#/components/schemas/BatchDatum"
									},
									"type": "array"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Data",
						"description": "The batch data collection."
					},
					"graph": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Graph"
							}
						],
						"description": "The graph to initialize the session with"
					},
					"workflow": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/WorkflowWithoutID"
							},
							{
								"type": "null"
							}
						],
						"description": "The workflow to initialize the session with"
					},
					"runs": {
						"type": "integer",
						"minimum": 1,
						"title": "Runs",
						"description": "Int stating how many times to iterate through all possible batch indices",
						"default": 1
					}
				},
				"type": "object",
				"required": [
					"graph",
					"runs"
				],
				"title": "Batch"
			},
			"BatchDatum": {
				"properties": {
					"node_path": {
						"type": "string",
						"title": "Node Path",
						"description": "The node into which this batch data collection will be substituted."
					},
					"field_name": {
						"type": "string",
						"title": "Field Name",
						"description": "The field into which this batch data collection will be substituted."
					},
					"items": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "number"
								},
								{
									"type": "integer"
								}
							]
						},
						"type": "array",
						"title": "Items",
						"description": "The list of items to substitute into the node/field."
					}
				},
				"type": "object",
				"required": [
					"node_path",
					"field_name"
				],
				"title": "BatchDatum"
			},
			"BatchEnqueuedEvent": {
				"description": "Event model for batch_enqueued",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"batch_id": {
						"description": "The ID of the batch",
						"title": "Batch Id",
						"type": "string"
					},
					"enqueued": {
						"description": "The number of invocations enqueued",
						"title": "Enqueued",
						"type": "integer"
					},
					"requested": {
						"description": "The number of invocations initially requested to be enqueued (may be less than enqueued if queue was full)",
						"title": "Requested",
						"type": "integer"
					},
					"priority": {
						"description": "The priority of the batch",
						"title": "Priority",
						"type": "integer"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"batch_id",
					"enqueued",
					"requested",
					"priority"
				],
				"title": "BatchEnqueuedEvent",
				"type": "object"
			},
			"BatchStatus": {
				"properties": {
					"queue_id": {
						"type": "string",
						"title": "Queue Id",
						"description": "The ID of the queue"
					},
					"batch_id": {
						"type": "string",
						"title": "Batch Id",
						"description": "The ID of the batch"
					},
					"pending": {
						"type": "integer",
						"title": "Pending",
						"description": "Number of queue items with status 'pending'"
					},
					"in_progress": {
						"type": "integer",
						"title": "In Progress",
						"description": "Number of queue items with status 'in_progress'"
					},
					"completed": {
						"type": "integer",
						"title": "Completed",
						"description": "Number of queue items with status 'complete'"
					},
					"failed": {
						"type": "integer",
						"title": "Failed",
						"description": "Number of queue items with status 'error'"
					},
					"canceled": {
						"type": "integer",
						"title": "Canceled",
						"description": "Number of queue items with status 'canceled'"
					},
					"total": {
						"type": "integer",
						"title": "Total",
						"description": "Total number of queue items"
					}
				},
				"type": "object",
				"required": [
					"queue_id",
					"batch_id",
					"pending",
					"in_progress",
					"completed",
					"failed",
					"canceled",
					"total"
				],
				"title": "BatchStatus"
			},
			"BlankImageInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates a blank image and forwards it to the pipeline",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"width": {
						"default": 512,
						"description": "The width of the image",
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 512,
						"description": "The height of the image",
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"mode": {
						"default": "RGB",
						"description": "The mode of the image",
						"enum": [
							"RGB",
							"RGBA"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "RGB",
						"orig_required": false,
						"title": "Mode",
						"type": "string",
						"ui_hidden": false
					},
					"color": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ColorField"
							}
						],
						"default": {
							"r": 0,
							"g": 0,
							"b": 0,
							"a": 255
						},
						"description": "The color of the image",
						"field_kind": "input",
						"input": "any",
						"orig_default": {
							"a": 255,
							"b": 0,
							"g": 0,
							"r": 0
						},
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "blank_image",
						"default": "blank_image",
						"enum": [
							"blank_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image"
				],
				"title": "Blank Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"BlendLatentsInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Blend two latents using a given alpha. Latents must have same size.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents_a": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"latents_b": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"alpha": {
						"default": 0.5,
						"description": "Blending factor. 0.0 = use input A only, 1.0 = use input B only, 0.5 = 50% mix of input A and input B.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.5,
						"orig_required": false,
						"title": "Alpha",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "lblend",
						"default": "lblend",
						"enum": [
							"lblend"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"blend"
				],
				"title": "Blend Latents",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"BoardChanges": {
				"properties": {
					"board_name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Board Name",
						"description": "The board's new name."
					},
					"cover_image_name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image Name",
						"description": "The name of the board's new cover image."
					},
					"archived": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Archived",
						"description": "Whether or not the board is archived"
					}
				},
				"additionalProperties": false,
				"type": "object",
				"title": "BoardChanges"
			},
			"BoardDTO": {
				"properties": {
					"board_id": {
						"type": "string",
						"title": "Board Id",
						"description": "The unique ID of the board."
					},
					"board_name": {
						"type": "string",
						"title": "Board Name",
						"description": "The name of the board."
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "The created timestamp of the board."
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "The updated timestamp of the board."
					},
					"deleted_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Deleted At",
						"description": "The deleted timestamp of the board."
					},
					"cover_image_name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image Name",
						"description": "The name of the board's cover image."
					},
					"archived": {
						"type": "boolean",
						"title": "Archived",
						"description": "Whether or not the board is archived."
					},
					"is_private": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Is Private",
						"description": "Whether the board is private."
					},
					"image_count": {
						"type": "integer",
						"title": "Image Count",
						"description": "The number of images in the board."
					}
				},
				"type": "object",
				"required": [
					"board_id",
					"board_name",
					"created_at",
					"updated_at",
					"cover_image_name",
					"archived",
					"image_count"
				],
				"title": "BoardDTO",
				"description": "Deserialized board record with cover image URL and image count."
			},
			"BoardField": {
				"description": "A board primitive field",
				"properties": {
					"board_id": {
						"description": "The id of the board",
						"title": "Board Id",
						"type": "string"
					}
				},
				"required": [
					"board_id"
				],
				"title": "BoardField",
				"type": "object"
			},
			"Body_add_image_to_board": {
				"properties": {
					"board_id": {
						"type": "string",
						"title": "Board Id",
						"description": "The id of the board to add to"
					},
					"image_name": {
						"type": "string",
						"title": "Image Name",
						"description": "The name of the image to add"
					}
				},
				"type": "object",
				"required": [
					"board_id",
					"image_name"
				],
				"title": "Body_add_image_to_board"
			},
			"Body_add_images_to_board": {
				"properties": {
					"board_id": {
						"type": "string",
						"title": "Board Id",
						"description": "The id of the board to add to"
					},
					"image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Image Names",
						"description": "The names of the images to add"
					}
				},
				"type": "object",
				"required": [
					"board_id",
					"image_names"
				],
				"title": "Body_add_images_to_board"
			},
			"Body_cancel_by_batch_ids": {
				"properties": {
					"batch_ids": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Batch Ids",
						"description": "The list of batch_ids to cancel all queue items for"
					}
				},
				"type": "object",
				"required": [
					"batch_ids"
				],
				"title": "Body_cancel_by_batch_ids"
			},
			"Body_create_style_preset": {
				"properties": {
					"image": {
						"anyOf": [
							{
								"type": "string",
								"format": "binary"
							},
							{
								"type": "null"
							}
						],
						"title": "Image",
						"description": "The image file to upload"
					},
					"data": {
						"type": "string",
						"title": "Data",
						"description": "The data of the style preset to create"
					}
				},
				"type": "object",
				"required": [
					"data"
				],
				"title": "Body_create_style_preset"
			},
			"Body_create_workflow": {
				"properties": {
					"workflow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WorkflowWithoutID"
							}
						],
						"description": "The workflow to create"
					}
				},
				"type": "object",
				"required": [
					"workflow"
				],
				"title": "Body_create_workflow"
			},
			"Body_delete_images_from_list": {
				"properties": {
					"image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Image Names",
						"description": "The list of names of images to delete"
					}
				},
				"type": "object",
				"required": [
					"image_names"
				],
				"title": "Body_delete_images_from_list"
			},
			"Body_download": {
				"properties": {
					"source": {
						"type": "string",
						"minLength": 1,
						"format": "uri",
						"title": "Source",
						"description": "download source"
					},
					"dest": {
						"type": "string",
						"title": "Dest",
						"description": "download destination"
					},
					"priority": {
						"type": "integer",
						"title": "Priority",
						"description": "queue priority",
						"default": 10
					},
					"access_token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Access Token",
						"description": "token for authorization to download"
					}
				},
				"type": "object",
				"required": [
					"source",
					"dest"
				],
				"title": "Body_download"
			},
			"Body_download_images_from_list": {
				"properties": {
					"image_names": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Image Names",
						"description": "The list of names of images to download"
					},
					"board_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Board Id",
						"description": "The board from which image should be downloaded"
					}
				},
				"type": "object",
				"title": "Body_download_images_from_list"
			},
			"Body_enqueue_batch": {
				"properties": {
					"batch": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Batch"
							}
						],
						"description": "Batch to process"
					},
					"prepend": {
						"type": "boolean",
						"title": "Prepend",
						"description": "Whether or not to prepend this batch in the queue",
						"default": false
					}
				},
				"type": "object",
				"required": [
					"batch"
				],
				"title": "Body_enqueue_batch"
			},
			"Body_import_style_presets": {
				"properties": {
					"file": {
						"type": "string",
						"format": "binary",
						"title": "File",
						"description": "The file to import"
					}
				},
				"type": "object",
				"required": [
					"file"
				],
				"title": "Body_import_style_presets"
			},
			"Body_parse_dynamicprompts": {
				"properties": {
					"prompt": {
						"type": "string",
						"title": "Prompt",
						"description": "The prompt to parse with dynamicprompts"
					},
					"max_prompts": {
						"type": "integer",
						"maximum": 10000,
						"minimum": 1,
						"title": "Max Prompts",
						"description": "The max number of prompts to generate",
						"default": 1000
					},
					"combinatorial": {
						"type": "boolean",
						"title": "Combinatorial",
						"description": "Whether to use the combinatorial generator",
						"default": true
					}
				},
				"type": "object",
				"required": [
					"prompt"
				],
				"title": "Body_parse_dynamicprompts"
			},
			"Body_remove_image_from_board": {
				"properties": {
					"image_name": {
						"type": "string",
						"title": "Image Name",
						"description": "The name of the image to remove"
					}
				},
				"type": "object",
				"required": [
					"image_name"
				],
				"title": "Body_remove_image_from_board"
			},
			"Body_remove_images_from_board": {
				"properties": {
					"image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Image Names",
						"description": "The names of the images to remove"
					}
				},
				"type": "object",
				"required": [
					"image_names"
				],
				"title": "Body_remove_images_from_board"
			},
			"Body_star_images_in_list": {
				"properties": {
					"image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Image Names",
						"description": "The list of names of images to star"
					}
				},
				"type": "object",
				"required": [
					"image_names"
				],
				"title": "Body_star_images_in_list"
			},
			"Body_unstar_images_in_list": {
				"properties": {
					"image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Image Names",
						"description": "The list of names of images to unstar"
					}
				},
				"type": "object",
				"required": [
					"image_names"
				],
				"title": "Body_unstar_images_in_list"
			},
			"Body_update_model_image": {
				"properties": {
					"image": {
						"type": "string",
						"format": "binary",
						"title": "Image"
					}
				},
				"type": "object",
				"required": [
					"image"
				],
				"title": "Body_update_model_image"
			},
			"Body_update_style_preset": {
				"properties": {
					"image": {
						"anyOf": [
							{
								"type": "string",
								"format": "binary"
							},
							{
								"type": "null"
							}
						],
						"title": "Image",
						"description": "The image file to upload"
					},
					"data": {
						"type": "string",
						"title": "Data",
						"description": "The data of the style preset to update"
					}
				},
				"type": "object",
				"required": [
					"data"
				],
				"title": "Body_update_style_preset"
			},
			"Body_update_workflow": {
				"properties": {
					"workflow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Workflow"
							}
						],
						"description": "The updated workflow"
					}
				},
				"type": "object",
				"required": [
					"workflow"
				],
				"title": "Body_update_workflow"
			},
			"Body_upload_image": {
				"properties": {
					"file": {
						"type": "string",
						"format": "binary",
						"title": "File"
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/JsonValue"
							},
							{
								"type": "null"
							}
						],
						"description": "The metadata to associate with the image"
					}
				},
				"type": "object",
				"required": [
					"file"
				],
				"title": "Body_upload_image"
			},
			"BooleanCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of boolean primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The collection of boolean values",
						"field_kind": "input",
						"input": "any",
						"items": {
							"type": "boolean"
						},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "boolean_collection",
						"default": "boolean_collection",
						"enum": [
							"boolean_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"boolean",
					"collection"
				],
				"title": "Boolean Collection Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/BooleanCollectionOutput"
				}
			},
			"BooleanCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of booleans",
				"properties": {
					"collection": {
						"description": "The output boolean collection",
						"field_kind": "output",
						"items": {
							"type": "boolean"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "boolean_collection_output",
						"default": "boolean_collection_output",
						"enum": [
							"boolean_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "BooleanCollectionOutput",
				"type": "object"
			},
			"BooleanInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A boolean primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": false,
						"description": "The boolean value",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Value",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "boolean",
						"default": "boolean",
						"enum": [
							"boolean"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"boolean"
				],
				"title": "Boolean Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/BooleanOutput"
				}
			},
			"BooleanOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single boolean",
				"properties": {
					"value": {
						"description": "The output boolean",
						"field_kind": "output",
						"title": "Value",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "boolean_output",
						"default": "boolean_output",
						"enum": [
							"boolean_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"value",
					"type",
					"type"
				],
				"title": "BooleanOutput",
				"type": "object"
			},
			"BoundingBoxCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of bounding boxes",
				"properties": {
					"collection": {
						"description": "The output bounding boxes.",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/BoundingBoxField"
						},
						"title": "Bounding Boxes",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "bounding_box_collection_output",
						"default": "bounding_box_collection_output",
						"enum": [
							"bounding_box_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "BoundingBoxCollectionOutput",
				"type": "object"
			},
			"BoundingBoxField": {
				"description": "A bounding box primitive value.",
				"properties": {
					"x_min": {
						"description": "The minimum x-coordinate of the bounding box (inclusive).",
						"minimum": 0,
						"title": "X Min",
						"type": "integer"
					},
					"x_max": {
						"description": "The maximum x-coordinate of the bounding box (exclusive).",
						"minimum": 0,
						"title": "X Max",
						"type": "integer"
					},
					"y_min": {
						"description": "The minimum y-coordinate of the bounding box (inclusive).",
						"minimum": 0,
						"title": "Y Min",
						"type": "integer"
					},
					"y_max": {
						"description": "The maximum y-coordinate of the bounding box (exclusive).",
						"minimum": 0,
						"title": "Y Max",
						"type": "integer"
					},
					"score": {
						"anyOf": [
							{
								"maximum": 1,
								"minimum": 0,
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The score associated with the bounding box. In the range [0, 1]. This value is typically set when the bounding box was produced by a detector and has an associated confidence score.",
						"title": "Score"
					}
				},
				"required": [
					"x_min",
					"x_max",
					"y_min",
					"y_max"
				],
				"title": "BoundingBoxField",
				"type": "object"
			},
			"BoundingBoxInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "Create a bounding box manually by supplying box coordinates",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"x_min": {
						"default": 0,
						"description": "x-coordinate of the bounding box's top left vertex",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X Min",
						"type": "integer",
						"ui_hidden": false
					},
					"y_min": {
						"default": 0,
						"description": "y-coordinate of the bounding box's top left vertex",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y Min",
						"type": "integer",
						"ui_hidden": false
					},
					"x_max": {
						"default": 0,
						"description": "x-coordinate of the bounding box's bottom right vertex",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X Max",
						"type": "integer",
						"ui_hidden": false
					},
					"y_max": {
						"default": 0,
						"description": "y-coordinate of the bounding box's bottom right vertex",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y Max",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "bounding_box",
						"default": "bounding_box",
						"enum": [
							"bounding_box"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"segmentation",
					"collection",
					"bounding box"
				],
				"title": "Bounding Box",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/BoundingBoxOutput"
				}
			},
			"BoundingBoxOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single bounding box",
				"properties": {
					"bounding_box": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BoundingBoxField"
							}
						],
						"description": "The output bounding box.",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "bounding_box_output",
						"default": "bounding_box_output",
						"enum": [
							"bounding_box_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"bounding_box",
					"type",
					"type"
				],
				"title": "BoundingBoxOutput",
				"type": "object"
			},
			"BulkDownloadCompleteEvent": {
				"description": "Event model for bulk_download_complete",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"bulk_download_id": {
						"description": "The ID of the bulk image download",
						"title": "Bulk Download Id",
						"type": "string"
					},
					"bulk_download_item_id": {
						"description": "The ID of the bulk image download item",
						"title": "Bulk Download Item Id",
						"type": "string"
					},
					"bulk_download_item_name": {
						"description": "The name of the bulk image download item",
						"title": "Bulk Download Item Name",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"bulk_download_id",
					"bulk_download_item_id",
					"bulk_download_item_name"
				],
				"title": "BulkDownloadCompleteEvent",
				"type": "object"
			},
			"BulkDownloadErrorEvent": {
				"description": "Event model for bulk_download_error",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"bulk_download_id": {
						"description": "The ID of the bulk image download",
						"title": "Bulk Download Id",
						"type": "string"
					},
					"bulk_download_item_id": {
						"description": "The ID of the bulk image download item",
						"title": "Bulk Download Item Id",
						"type": "string"
					},
					"bulk_download_item_name": {
						"description": "The name of the bulk image download item",
						"title": "Bulk Download Item Name",
						"type": "string"
					},
					"error": {
						"description": "The error message",
						"title": "Error",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"bulk_download_id",
					"bulk_download_item_id",
					"bulk_download_item_name",
					"error"
				],
				"title": "BulkDownloadErrorEvent",
				"type": "object"
			},
			"BulkDownloadStartedEvent": {
				"description": "Event model for bulk_download_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"bulk_download_id": {
						"description": "The ID of the bulk image download",
						"title": "Bulk Download Id",
						"type": "string"
					},
					"bulk_download_item_id": {
						"description": "The ID of the bulk image download item",
						"title": "Bulk Download Item Id",
						"type": "string"
					},
					"bulk_download_item_name": {
						"description": "The name of the bulk image download item",
						"title": "Bulk Download Item Name",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"bulk_download_id",
					"bulk_download_item_id",
					"bulk_download_item_name"
				],
				"title": "BulkDownloadStartedEvent",
				"type": "object"
			},
			"CLIPEmbedDiffusersConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					},
					"repo_variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": ""
					},
					"type": {
						"type": "string",
						"enum": [
							"clip_embed"
						],
						"const": "clip_embed",
						"title": "Type",
						"default": "clip_embed"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "CLIPEmbedDiffusersConfig",
				"description": "Model config for Clip Embeddings."
			},
			"CLIPField": {
				"properties": {
					"tokenizer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load tokenizer submodel"
					},
					"text_encoder": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load text_encoder submodel"
					},
					"skipped_layers": {
						"description": "Number of skipped layers in text_encoder",
						"title": "Skipped Layers",
						"type": "integer"
					},
					"loras": {
						"description": "LoRAs to apply on model loading",
						"items": {
							"$ref": "#/components/schemas/LoRAField"
						},
						"title": "Loras",
						"type": "array"
					}
				},
				"required": [
					"tokenizer",
					"text_encoder",
					"skipped_layers",
					"loras"
				],
				"title": "CLIPField",
				"type": "object"
			},
			"CLIPOutput": {
				"class": "output",
				"description": "Base class for invocations that output a CLIP field",
				"properties": {
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP",
						"ui_hidden": false
					},
					"type": {
						"const": "clip_output",
						"default": "clip_output",
						"enum": [
							"clip_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"clip",
					"type",
					"type"
				],
				"title": "CLIPOutput",
				"type": "object"
			},
			"CLIPSkipInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Skip layers in clip text_encoder model.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "CLIP",
						"ui_hidden": false
					},
					"skipped_layers": {
						"default": 0,
						"description": "Number of layers to skip in text encoder",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Skipped Layers",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "clip_skip",
						"default": "clip_skip",
						"enum": [
							"clip_skip"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"clipskip",
					"clip",
					"skip"
				],
				"title": "CLIP Skip",
				"type": "object",
				"version": "1.1.0",
				"output": {
					"$ref": "#/components/schemas/CLIPSkipInvocationOutput"
				}
			},
			"CLIPSkipInvocationOutput": {
				"class": "output",
				"description": "CLIP skip node output",
				"properties": {
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP",
						"ui_hidden": false
					},
					"type": {
						"const": "clip_skip_output",
						"default": "clip_skip_output",
						"enum": [
							"clip_skip_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"clip",
					"type",
					"type"
				],
				"title": "CLIPSkipInvocationOutput",
				"type": "object"
			},
			"CLIPVisionDiffusersConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					},
					"repo_variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": ""
					},
					"type": {
						"type": "string",
						"enum": [
							"clip_vision"
						],
						"const": "clip_vision",
						"title": "Type",
						"default": "clip_vision"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "CLIPVisionDiffusersConfig",
				"description": "Model config for CLIPVision."
			},
			"CV2InfillInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Infills transparent areas of an image using OpenCV Inpainting",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "infill_cv2",
						"default": "infill_cv2",
						"enum": [
							"infill_cv2"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"inpaint"
				],
				"title": "CV2 Infill",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"CacheStats": {
				"properties": {
					"hits": {
						"type": "integer",
						"title": "Hits",
						"default": 0
					},
					"misses": {
						"type": "integer",
						"title": "Misses",
						"default": 0
					},
					"high_watermark": {
						"type": "integer",
						"title": "High Watermark",
						"default": 0
					},
					"in_cache": {
						"type": "integer",
						"title": "In Cache",
						"default": 0
					},
					"cleared": {
						"type": "integer",
						"title": "Cleared",
						"default": 0
					},
					"cache_size": {
						"type": "integer",
						"title": "Cache Size",
						"default": 0
					},
					"loaded_model_sizes": {
						"additionalProperties": {
							"type": "integer"
						},
						"type": "object",
						"title": "Loaded Model Sizes"
					}
				},
				"type": "object",
				"title": "CacheStats"
			},
			"CacheType": {
				"type": "string",
				"enum": [
					"RAM",
					"VRAM"
				],
				"title": "CacheType",
				"description": "Cache type - one of vram or ram."
			},
			"CalculateImageTilesEvenSplitInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Calculate the coordinates and overlaps of tiles that cover a target image shape.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image_width": {
						"default": 1024,
						"description": "The image width, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Width",
						"type": "integer",
						"ui_hidden": false
					},
					"image_height": {
						"default": 1024,
						"description": "The image height, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Height",
						"type": "integer",
						"ui_hidden": false
					},
					"num_tiles_x": {
						"default": 2,
						"description": "Number of tiles to divide image into on the x axis",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 2,
						"orig_required": false,
						"title": "Num Tiles X",
						"type": "integer",
						"ui_hidden": false
					},
					"num_tiles_y": {
						"default": 2,
						"description": "Number of tiles to divide image into on the y axis",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 2,
						"orig_required": false,
						"title": "Num Tiles Y",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap": {
						"default": 128,
						"description": "The overlap, in pixels, between adjacent tiles.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"multipleOf": 8,
						"orig_default": 128,
						"orig_required": false,
						"title": "Overlap",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "calculate_image_tiles_even_split",
						"default": "calculate_image_tiles_even_split",
						"enum": [
							"calculate_image_tiles_even_split"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Calculate Image Tiles Even Split",
				"type": "object",
				"version": "1.1.1",
				"output": {
					"$ref": "#/components/schemas/CalculateImageTilesOutput"
				}
			},
			"CalculateImageTilesInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Calculate the coordinates and overlaps of tiles that cover a target image shape.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image_width": {
						"default": 1024,
						"description": "The image width, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Width",
						"type": "integer",
						"ui_hidden": false
					},
					"image_height": {
						"default": 1024,
						"description": "The image height, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Height",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_width": {
						"default": 576,
						"description": "The tile width, in pixels.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 576,
						"orig_required": false,
						"title": "Tile Width",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_height": {
						"default": 576,
						"description": "The tile height, in pixels.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 576,
						"orig_required": false,
						"title": "Tile Height",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap": {
						"default": 128,
						"description": "The target overlap, in pixels, between adjacent tiles. Adjacent tiles will overlap by at least this amount",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 128,
						"orig_required": false,
						"title": "Overlap",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "calculate_image_tiles",
						"default": "calculate_image_tiles",
						"enum": [
							"calculate_image_tiles"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Calculate Image Tiles",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/CalculateImageTilesOutput"
				}
			},
			"CalculateImageTilesMinimumOverlapInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Calculate the coordinates and overlaps of tiles that cover a target image shape.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image_width": {
						"default": 1024,
						"description": "The image width, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Width",
						"type": "integer",
						"ui_hidden": false
					},
					"image_height": {
						"default": 1024,
						"description": "The image height, in pixels, to calculate tiles for.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Image Height",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_width": {
						"default": 576,
						"description": "The tile width, in pixels.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 576,
						"orig_required": false,
						"title": "Tile Width",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_height": {
						"default": 576,
						"description": "The tile height, in pixels.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 576,
						"orig_required": false,
						"title": "Tile Height",
						"type": "integer",
						"ui_hidden": false
					},
					"min_overlap": {
						"default": 128,
						"description": "Minimum overlap between adjacent tiles, in pixels.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 128,
						"orig_required": false,
						"title": "Min Overlap",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "calculate_image_tiles_min_overlap",
						"default": "calculate_image_tiles_min_overlap",
						"enum": [
							"calculate_image_tiles_min_overlap"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Calculate Image Tiles Minimum Overlap",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/CalculateImageTilesOutput"
				}
			},
			"CalculateImageTilesOutput": {
				"class": "output",
				"properties": {
					"tiles": {
						"description": "The tiles coordinates that cover a particular image shape.",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/Tile"
						},
						"title": "Tiles",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "calculate_image_tiles_output",
						"default": "calculate_image_tiles_output",
						"enum": [
							"calculate_image_tiles_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"tiles",
					"type",
					"type"
				],
				"title": "CalculateImageTilesOutput",
				"type": "object"
			},
			"CancelByBatchIDsResult": {
				"properties": {
					"canceled": {
						"type": "integer",
						"title": "Canceled",
						"description": "Number of queue items canceled"
					}
				},
				"type": "object",
				"required": [
					"canceled"
				],
				"title": "CancelByBatchIDsResult",
				"description": "Result of canceling by list of batch ids"
			},
			"CannyImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Canny edge detection for ControlNet",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"low_threshold": {
						"default": 100,
						"description": "The low threshold of the Canny pixel gradient (0-255)",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 100,
						"orig_required": false,
						"title": "Low Threshold",
						"type": "integer",
						"ui_hidden": false
					},
					"high_threshold": {
						"default": 200,
						"description": "The high threshold of the Canny pixel gradient (0-255)",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 200,
						"orig_required": false,
						"title": "High Threshold",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "canny_image_processor",
						"default": "canny_image_processor",
						"enum": [
							"canny_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"canny"
				],
				"title": "Canny Processor",
				"type": "object",
				"version": "1.3.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"CanvasPasteBackInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Combines two images by using the mask provided. Intended for use on the Unified Canvas.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"source_image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The source image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"target_image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The target image",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The mask to use when pasting",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mask_blur": {
						"default": 0,
						"description": "The amount to blur the mask by",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Mask Blur",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "canvas_paste_back",
						"default": "canvas_paste_back",
						"enum": [
							"canvas_paste_back"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"combine"
				],
				"title": "Canvas Paste Back",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"CenterPadCropInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Pad or crop an image's sides from the center by specified pixels. Positive values are outside of the image.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to crop",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"left": {
						"default": 0,
						"description": "Number of pixels to pad/crop from the left (negative values crop inwards, positive values pad outwards)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Left",
						"type": "integer",
						"ui_hidden": false
					},
					"right": {
						"default": 0,
						"description": "Number of pixels to pad/crop from the right (negative values crop inwards, positive values pad outwards)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Right",
						"type": "integer",
						"ui_hidden": false
					},
					"top": {
						"default": 0,
						"description": "Number of pixels to pad/crop from the top (negative values crop inwards, positive values pad outwards)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Top",
						"type": "integer",
						"ui_hidden": false
					},
					"bottom": {
						"default": 0,
						"description": "Number of pixels to pad/crop from the bottom (negative values crop inwards, positive values pad outwards)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Bottom",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_pad_crop",
						"default": "img_pad_crop",
						"enum": [
							"img_pad_crop"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"pad",
					"crop"
				],
				"title": "Center Pad or Crop Image",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"Classification": {
				"description": "The classification of an Invocation.\n- `Stable`: The invocation, including its inputs/outputs and internal logic, is stable. You may build workflows with it, having confidence that they will not break because of a change in this invocation.\n- `Beta`: The invocation is not yet stable, but is planned to be stable in the future. Workflows built around this invocation may break, but we are committed to supporting this invocation long-term.\n- `Prototype`: The invocation is not yet stable and may be removed from the application at any time. Workflows built around this invocation may break, and we are *not* committed to supporting this invocation.",
				"enum": [
					"stable",
					"beta",
					"prototype"
				],
				"title": "Classification",
				"type": "string"
			},
			"ClearResult": {
				"properties": {
					"deleted": {
						"type": "integer",
						"title": "Deleted",
						"description": "Number of queue items deleted"
					}
				},
				"type": "object",
				"required": [
					"deleted"
				],
				"title": "ClearResult",
				"description": "Result of clearing the session queue"
			},
			"CollectInvocation": {
				"class": "invocation",
				"classification": "stable",
				"description": "Collects values into a collection",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"item": {
						"anyOf": [
							{},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The item to collect (all inputs must be of the same type)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "Collection Item",
						"ui_hidden": false,
						"ui_type": "CollectionItemField"
					},
					"collection": {
						"default": [],
						"description": "The collection, will be provided on execution",
						"field_kind": "input",
						"input": "any",
						"items": {},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": true
					},
					"type": {
						"const": "collect",
						"default": "collect",
						"enum": [
							"collect"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"title": "CollectInvocation",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/CollectInvocationOutput"
				}
			},
			"CollectInvocationOutput": {
				"class": "output",
				"properties": {
					"collection": {
						"description": "The collection of input items",
						"field_kind": "output",
						"items": {},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false,
						"ui_type": "CollectionField"
					},
					"type": {
						"const": "collect_output",
						"default": "collect_output",
						"enum": [
							"collect_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "CollectInvocationOutput",
				"type": "object"
			},
			"ColorCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of colors",
				"properties": {
					"collection": {
						"description": "The output colors",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/ColorField"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "color_collection_output",
						"default": "color_collection_output",
						"enum": [
							"color_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "ColorCollectionOutput",
				"type": "object"
			},
			"ColorCorrectInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Shifts the colors of a target image to match the reference image, optionally\nusing a mask to only color-correct certain regions of the target image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to color-correct",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"reference": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "Reference image for color-correction",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Mask to use when applying color-correction",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"mask_blur_radius": {
						"default": 8,
						"description": "Mask blur radius",
						"field_kind": "input",
						"input": "any",
						"orig_default": 8,
						"orig_required": false,
						"title": "Mask Blur Radius",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "color_correct",
						"default": "color_correct",
						"enum": [
							"color_correct"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"color"
				],
				"title": "Color Correct",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ColorField": {
				"description": "A color primitive field",
				"properties": {
					"r": {
						"description": "The red component",
						"maximum": 255,
						"minimum": 0,
						"title": "R",
						"type": "integer"
					},
					"g": {
						"description": "The green component",
						"maximum": 255,
						"minimum": 0,
						"title": "G",
						"type": "integer"
					},
					"b": {
						"description": "The blue component",
						"maximum": 255,
						"minimum": 0,
						"title": "B",
						"type": "integer"
					},
					"a": {
						"description": "The alpha component",
						"maximum": 255,
						"minimum": 0,
						"title": "A",
						"type": "integer"
					}
				},
				"required": [
					"r",
					"g",
					"b",
					"a"
				],
				"title": "ColorField",
				"type": "object"
			},
			"ColorInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A color primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"color": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ColorField"
							}
						],
						"default": {
							"r": 0,
							"g": 0,
							"b": 0,
							"a": 255
						},
						"description": "The color value",
						"field_kind": "input",
						"input": "any",
						"orig_default": {
							"a": 255,
							"b": 0,
							"g": 0,
							"r": 0
						},
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "color",
						"default": "color",
						"enum": [
							"color"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"color"
				],
				"title": "Color Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/ColorOutput"
				}
			},
			"ColorMapImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates a color map from the provided image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"color_map_tile_size": {
						"default": 64,
						"description": "Tile size",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 64,
						"orig_required": false,
						"title": "Color Map Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "color_map_image_processor",
						"default": "color_map_image_processor",
						"enum": [
							"color_map_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet"
				],
				"title": "Color Map Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ColorOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single color",
				"properties": {
					"color": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ColorField"
							}
						],
						"description": "The output color",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "color_output",
						"default": "color_output",
						"enum": [
							"color_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"color",
					"type",
					"type"
				],
				"title": "ColorOutput",
				"type": "object"
			},
			"CompelInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Parse prompt using compel package to conditioning.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"prompt": {
						"default": "",
						"description": "Prompt to be parsed by Compel to create a conditioning tensor",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Prompt",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "CLIP",
						"ui_hidden": false
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "A mask defining the region that this conditioning prompt applies to.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "compel",
						"default": "compel",
						"enum": [
							"compel"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"compel"
				],
				"title": "Prompt",
				"type": "object",
				"version": "1.2.0",
				"output": {
					"$ref": "#/components/schemas/ConditioningOutput"
				}
			},
			"ConditioningCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of conditioning tensor primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The collection of conditioning tensors",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/ConditioningField"
						},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "conditioning_collection",
						"default": "conditioning_collection",
						"enum": [
							"conditioning_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"conditioning",
					"collection"
				],
				"title": "Conditioning Collection Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/ConditioningCollectionOutput"
				}
			},
			"ConditioningCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of conditioning tensors",
				"properties": {
					"collection": {
						"description": "The output conditioning tensors",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/ConditioningField"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "conditioning_collection_output",
						"default": "conditioning_collection_output",
						"enum": [
							"conditioning_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "ConditioningCollectionOutput",
				"type": "object"
			},
			"ConditioningField": {
				"description": "A conditioning tensor primitive value",
				"properties": {
					"conditioning_name": {
						"description": "The name of conditioning tensor",
						"title": "Conditioning Name",
						"type": "string"
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The mask associated with this conditioning tensor. Excluded regions should be set to False, included regions should be set to True."
					}
				},
				"required": [
					"conditioning_name"
				],
				"title": "ConditioningField",
				"type": "object"
			},
			"ConditioningInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A conditioning tensor primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							}
						],
						"default": null,
						"description": "Conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "conditioning",
						"default": "conditioning",
						"enum": [
							"conditioning"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"conditioning"
				],
				"title": "Conditioning Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/ConditioningOutput"
				}
			},
			"ConditioningOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single conditioning tensor",
				"properties": {
					"conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							}
						],
						"description": "Conditioning tensor",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "conditioning_output",
						"default": "conditioning_output",
						"enum": [
							"conditioning_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"conditioning",
					"type",
					"type"
				],
				"title": "ConditioningOutput",
				"type": "object"
			},
			"ContentShuffleImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies content shuffle processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"h": {
						"default": 512,
						"description": "Content shuffle `h` parameter",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 512,
						"orig_required": false,
						"title": "H",
						"type": "integer",
						"ui_hidden": false
					},
					"w": {
						"default": 512,
						"description": "Content shuffle `w` parameter",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 512,
						"orig_required": false,
						"title": "W",
						"type": "integer",
						"ui_hidden": false
					},
					"f": {
						"default": 256,
						"description": "Content shuffle `f` parameter",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 256,
						"orig_required": false,
						"title": "F",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "content_shuffle_image_processor",
						"default": "content_shuffle_image_processor",
						"enum": [
							"content_shuffle_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"contentshuffle"
				],
				"title": "Content Shuffle Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ControlAdapterDefaultSettings": {
				"properties": {
					"preprocessor": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Preprocessor"
					}
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
					"preprocessor"
				],
				"title": "ControlAdapterDefaultSettings"
			},
			"ControlField": {
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The control image"
					},
					"control_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The ControlNet model to use"
					},
					"control_weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the ControlNet",
						"title": "Control Weight"
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the ControlNet is first applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the ControlNet is last applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "End Step Percent",
						"type": "number"
					},
					"control_mode": {
						"default": "balanced",
						"description": "The control mode to use",
						"enum": [
							"balanced",
							"more_prompt",
							"more_control",
							"unbalanced"
						],
						"title": "Control Mode",
						"type": "string"
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode to use",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"title": "Resize Mode",
						"type": "string"
					}
				},
				"required": [
					"image",
					"control_model"
				],
				"title": "ControlField",
				"type": "object"
			},
			"ControlNetCheckpointConfig": {
				"properties": {
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ControlAdapterDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint",
							"bnb_quantized_nf4b"
						],
						"title": "Format",
						"description": "Format of the provided checkpoint model",
						"default": "checkpoint"
					},
					"config_path": {
						"type": "string",
						"title": "Config Path",
						"description": "path to the checkpoint model config file"
					},
					"converted_at": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"title": "Converted At",
						"description": "When this model was last converted to diffusers"
					},
					"type": {
						"type": "string",
						"enum": [
							"controlnet"
						],
						"const": "controlnet",
						"title": "Type",
						"default": "controlnet"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"config_path",
					"key",
					"type",
					"format"
				],
				"title": "ControlNetCheckpointConfig",
				"description": "Model config for ControlNet models (diffusers version)."
			},
			"ControlNetDiffusersConfig": {
				"properties": {
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ControlAdapterDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					},
					"repo_variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": ""
					},
					"type": {
						"type": "string",
						"enum": [
							"controlnet"
						],
						"const": "controlnet",
						"title": "Type",
						"default": "controlnet"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "ControlNetDiffusersConfig",
				"description": "Model config for ControlNet models (diffusers version)."
			},
			"ControlNetInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Collects ControlNet info to pass to other nodes",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The control image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"control_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "ControlNet model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false,
						"ui_type": "ControlNetModelField"
					},
					"control_weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the ControlNet",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Control Weight",
						"ui_hidden": false
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the ControlNet is first applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Begin Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the ControlNet is last applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "End Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"control_mode": {
						"default": "balanced",
						"description": "The control mode used",
						"enum": [
							"balanced",
							"more_prompt",
							"more_control",
							"unbalanced"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "balanced",
						"orig_required": false,
						"title": "Control Mode",
						"type": "string",
						"ui_hidden": false
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode used",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "just_resize",
						"orig_required": false,
						"title": "Resize Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "controlnet",
						"default": "controlnet",
						"enum": [
							"controlnet"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet"
				],
				"title": "ControlNet",
				"type": "object",
				"version": "1.1.2",
				"output": {
					"$ref": "#/components/schemas/ControlOutput"
				}
			},
			"ControlNetMetadataField": {
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The control image"
					},
					"processed_image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The control image, after processing."
					},
					"control_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The ControlNet model to use"
					},
					"control_weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the ControlNet",
						"title": "Control Weight"
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the ControlNet is first applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the ControlNet is last applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "End Step Percent",
						"type": "number"
					},
					"control_mode": {
						"default": "balanced",
						"description": "The control mode to use",
						"enum": [
							"balanced",
							"more_prompt",
							"more_control",
							"unbalanced"
						],
						"title": "Control Mode",
						"type": "string"
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode to use",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"title": "Resize Mode",
						"type": "string"
					}
				},
				"required": [
					"image",
					"control_model"
				],
				"title": "ControlNetMetadataField",
				"type": "object"
			},
			"ControlOutput": {
				"class": "output",
				"description": "node output for ControlNet info",
				"properties": {
					"control": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ControlField"
							}
						],
						"description": "ControlNet(s) to apply",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "control_output",
						"default": "control_output",
						"enum": [
							"control_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"control",
					"type",
					"type"
				],
				"title": "ControlOutput",
				"type": "object"
			},
			"CoreMetadataInvocation": {
				"additionalProperties": true,
				"category": "metadata",
				"class": "invocation",
				"classification": "stable",
				"description": "Collects core generation metadata into a MetadataField",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"generation_mode": {
						"anyOf": [
							{
								"enum": [
									"txt2img",
									"img2img",
									"inpaint",
									"outpaint",
									"sdxl_txt2img",
									"sdxl_img2img",
									"sdxl_inpaint",
									"sdxl_outpaint"
								],
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The generation mode that output this image",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Generation Mode",
						"ui_hidden": false
					},
					"positive_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The positive prompt parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Positive Prompt",
						"ui_hidden": false
					},
					"negative_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The negative prompt parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Negative Prompt",
						"ui_hidden": false
					},
					"width": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The width parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Width",
						"ui_hidden": false
					},
					"height": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The height parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Height",
						"ui_hidden": false
					},
					"seed": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The seed used for noise generation",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Seed",
						"ui_hidden": false
					},
					"rand_device": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The device used for random number generation",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Rand Device",
						"ui_hidden": false
					},
					"cfg_scale": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The classifier-free guidance scale parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Cfg Scale",
						"ui_hidden": false
					},
					"cfg_rescale_multiplier": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Rescale multiplier for CFG guidance, used for models trained with zero-terminal SNR",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Cfg Rescale Multiplier",
						"ui_hidden": false
					},
					"steps": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The number of steps used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Steps",
						"ui_hidden": false
					},
					"scheduler": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The scheduler used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Scheduler",
						"ui_hidden": false
					},
					"seamless_x": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Whether seamless tiling was used on the X axis",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Seamless X",
						"ui_hidden": false
					},
					"seamless_y": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Whether seamless tiling was used on the Y axis",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Seamless Y",
						"ui_hidden": false
					},
					"clip_skip": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The number of skipped CLIP layers",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Clip Skip",
						"ui_hidden": false
					},
					"model": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The main model used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"controlnets": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/ControlNetMetadataField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The ControlNets used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Controlnets",
						"ui_hidden": false
					},
					"ipAdapters": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/IPAdapterMetadataField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The IP Adapters used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Ipadapters",
						"ui_hidden": false
					},
					"t2iAdapters": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/T2IAdapterMetadataField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The IP Adapters used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "T2Iadapters",
						"ui_hidden": false
					},
					"loras": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/LoRAMetadataField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The LoRAs used for inference",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Loras",
						"ui_hidden": false
					},
					"strength": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The strength used for latents-to-latents",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Strength",
						"ui_hidden": false
					},
					"init_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The name of the initial image",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Init Image",
						"ui_hidden": false
					},
					"vae": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The VAE used for decoding, if the main model's default was not used",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"hrf_enabled": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Whether or not high resolution fix was enabled.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Hrf Enabled",
						"ui_hidden": false
					},
					"hrf_method": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The high resolution fix upscale method.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Hrf Method",
						"ui_hidden": false
					},
					"hrf_strength": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The high resolution fix img2img strength used in the upscale pass.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Hrf Strength",
						"ui_hidden": false
					},
					"positive_style_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The positive style prompt parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Positive Style Prompt",
						"ui_hidden": false
					},
					"negative_style_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The negative style prompt parameter",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Negative Style Prompt",
						"ui_hidden": false
					},
					"refiner_model": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The SDXL Refiner model used",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"refiner_cfg_scale": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The classifier-free guidance scale parameter used for the refiner",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Cfg Scale",
						"ui_hidden": false
					},
					"refiner_steps": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The number of steps used for the refiner",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Steps",
						"ui_hidden": false
					},
					"refiner_scheduler": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The scheduler used for the refiner",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Scheduler",
						"ui_hidden": false
					},
					"refiner_positive_aesthetic_score": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The aesthetic score used for the refiner",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Positive Aesthetic Score",
						"ui_hidden": false
					},
					"refiner_negative_aesthetic_score": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The aesthetic score used for the refiner",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Negative Aesthetic Score",
						"ui_hidden": false
					},
					"refiner_start": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The start value used for refiner denoising",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Refiner Start",
						"ui_hidden": false
					},
					"type": {
						"const": "core_metadata",
						"default": "core_metadata",
						"enum": [
							"core_metadata"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"metadata"
				],
				"title": "Core Metadata",
				"type": "object",
				"version": "2.0.0",
				"output": {
					"$ref": "#/components/schemas/MetadataOutput"
				}
			},
			"CreateDenoiseMaskInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates mask for denoising model run.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false,
						"ui_order": 0
					},
					"image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Image which will be masked",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false,
						"ui_order": 1
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The mask to use when pasting",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false,
						"ui_order": 2
					},
					"tiled": {
						"default": false,
						"description": "Processing using overlapping tiles (reduce memory consumption)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Tiled",
						"type": "boolean",
						"ui_hidden": false,
						"ui_order": 3
					},
					"fp32": {
						"default": false,
						"description": "Whether or not to use full float32 precision",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Fp32",
						"type": "boolean",
						"ui_hidden": false,
						"ui_order": 4
					},
					"type": {
						"const": "create_denoise_mask",
						"default": "create_denoise_mask",
						"enum": [
							"create_denoise_mask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"mask",
					"denoise"
				],
				"title": "Create Denoise Mask",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/DenoiseMaskOutput"
				}
			},
			"CreateGradientMaskInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates mask for denoising model run.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "Image which will be masked",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false,
						"ui_order": 1
					},
					"edge_radius": {
						"default": 16,
						"description": "How far to blur/expand the edges of the mask",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 16,
						"orig_required": false,
						"title": "Edge Radius",
						"type": "integer",
						"ui_hidden": false,
						"ui_order": 2
					},
					"coherence_mode": {
						"default": "Gaussian Blur",
						"enum": [
							"Gaussian Blur",
							"Box Blur",
							"Staged"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "Gaussian Blur",
						"orig_required": false,
						"title": "Coherence Mode",
						"type": "string",
						"ui_hidden": false,
						"ui_order": 3
					},
					"minimum_denoise": {
						"default": 0,
						"description": "Minimum denoise level for the coherence region",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Minimum Denoise",
						"type": "number",
						"ui_hidden": false,
						"ui_order": 4
					},
					"image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "OPTIONAL: Only connect for specialized Inpainting models, masked_latents will be generated from the image with the VAE",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "[OPTIONAL] Image",
						"ui_hidden": false,
						"ui_order": 6
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "OPTIONAL: If the Unet is a specialized Inpainting model, masked_latents will be generated from the image with the VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "[OPTIONAL] UNet",
						"ui_hidden": false,
						"ui_order": 5
					},
					"vae": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "OPTIONAL: Only connect for specialized Inpainting models, masked_latents will be generated from the image with the VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "[OPTIONAL] VAE",
						"ui_hidden": false,
						"ui_order": 7
					},
					"tiled": {
						"default": false,
						"description": "Processing using overlapping tiles (reduce memory consumption)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Tiled",
						"type": "boolean",
						"ui_hidden": false,
						"ui_order": 8
					},
					"fp32": {
						"default": false,
						"description": "Whether or not to use full float32 precision",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Fp32",
						"type": "boolean",
						"ui_hidden": false,
						"ui_order": 9
					},
					"type": {
						"const": "create_gradient_mask",
						"default": "create_gradient_mask",
						"enum": [
							"create_gradient_mask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"mask",
					"denoise"
				],
				"title": "Create Gradient Mask",
				"type": "object",
				"version": "1.2.0",
				"output": {
					"$ref": "#/components/schemas/GradientMaskOutput"
				}
			},
			"CropLatentsCoreInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Crops a latent-space tensor to a box specified in image-space. The box dimensions and coordinates must be\ndivisible by the latent scale factor of 8.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"x": {
						"default": null,
						"description": "The left x coordinate (in px) of the crop rectangle in image space. This value will be converted to a dimension in latent space.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"multipleOf": 8,
						"orig_required": true,
						"title": "X",
						"type": "integer",
						"ui_hidden": false
					},
					"y": {
						"default": null,
						"description": "The top y coordinate (in px) of the crop rectangle in image space. This value will be converted to a dimension in latent space.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"multipleOf": 8,
						"orig_required": true,
						"title": "Y",
						"type": "integer",
						"ui_hidden": false
					},
					"width": {
						"default": null,
						"description": "The width (in px) of the crop rectangle in image space. This value will be converted to a dimension in latent space.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"multipleOf": 8,
						"orig_required": true,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": null,
						"description": "The height (in px) of the crop rectangle in image space. This value will be converted to a dimension in latent space.",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"multipleOf": 8,
						"orig_required": true,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "crop_latents",
						"default": "crop_latents",
						"enum": [
							"crop_latents"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"crop"
				],
				"title": "Crop Latents",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"CursorPaginatedResults_SessionQueueItemDTO_": {
				"properties": {
					"limit": {
						"type": "integer",
						"title": "Limit",
						"description": "Limit of items to get"
					},
					"has_more": {
						"type": "boolean",
						"title": "Has More",
						"description": "Whether there are more items available"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/SessionQueueItemDTO"
						},
						"type": "array",
						"title": "Items",
						"description": "Items"
					}
				},
				"type": "object",
				"required": [
					"limit",
					"has_more",
					"items"
				],
				"title": "CursorPaginatedResults[SessionQueueItemDTO]"
			},
			"CvInpaintInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Simple inpaint using opencv.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to inpaint",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The mask to use when inpainting",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "cv_inpaint",
						"default": "cv_inpaint",
						"enum": [
							"cv_inpaint"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"opencv",
					"inpaint"
				],
				"title": "OpenCV Inpaint",
				"type": "object",
				"version": "1.3.1",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"DWOpenposeImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates an openpose pose from an image using DWPose",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"draw_body": {
						"default": true,
						"field_kind": "input",
						"input": "any",
						"orig_default": true,
						"orig_required": false,
						"title": "Draw Body",
						"type": "boolean",
						"ui_hidden": false
					},
					"draw_face": {
						"default": false,
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Draw Face",
						"type": "boolean",
						"ui_hidden": false
					},
					"draw_hands": {
						"default": false,
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Draw Hands",
						"type": "boolean",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "dw_openpose_image_processor",
						"default": "dw_openpose_image_processor",
						"enum": [
							"dw_openpose_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"dwpose",
					"openpose"
				],
				"title": "DW Openpose Image Processor",
				"type": "object",
				"version": "1.1.1",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"DeleteBoardResult": {
				"properties": {
					"board_id": {
						"type": "string",
						"title": "Board Id",
						"description": "The id of the board that was deleted."
					},
					"deleted_board_images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Deleted Board Images",
						"description": "The image names of the board-images relationships that were deleted."
					},
					"deleted_images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Deleted Images",
						"description": "The names of the images that were deleted."
					}
				},
				"type": "object",
				"required": [
					"board_id",
					"deleted_board_images",
					"deleted_images"
				],
				"title": "DeleteBoardResult"
			},
			"DeleteImagesFromListResult": {
				"properties": {
					"deleted_images": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Deleted Images"
					}
				},
				"type": "object",
				"required": [
					"deleted_images"
				],
				"title": "DeleteImagesFromListResult"
			},
			"DenoiseLatentsInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Denoises noisy latents to decodable images",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"positive_conditioning": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ConditioningField"
								},
								"type": "array"
							}
						],
						"default": null,
						"description": "Positive conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "Positive Conditioning",
						"ui_hidden": false,
						"ui_order": 0
					},
					"negative_conditioning": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ConditioningField"
								},
								"type": "array"
							}
						],
						"default": null,
						"description": "Negative conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "Negative Conditioning",
						"ui_hidden": false,
						"ui_order": 1
					},
					"noise": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Noise tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false,
						"ui_order": 3
					},
					"steps": {
						"default": 10,
						"description": "Number of steps to run",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 10,
						"orig_required": false,
						"title": "Steps",
						"type": "integer",
						"ui_hidden": false
					},
					"cfg_scale": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 7.5,
						"description": "Classifier-Free Guidance scale",
						"field_kind": "input",
						"input": "any",
						"orig_default": 7.5,
						"orig_required": false,
						"title": "CFG Scale",
						"ui_hidden": false
					},
					"denoising_start": {
						"default": 0,
						"description": "When to start denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Denoising Start",
						"type": "number",
						"ui_hidden": false
					},
					"denoising_end": {
						"default": 1,
						"description": "When to stop denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "Denoising End",
						"type": "number",
						"ui_hidden": false
					},
					"scheduler": {
						"default": "euler",
						"description": "Scheduler to use during inference",
						"enum": [
							"ddim",
							"ddpm",
							"deis",
							"deis_k",
							"lms",
							"lms_k",
							"pndm",
							"heun",
							"heun_k",
							"euler",
							"euler_k",
							"euler_a",
							"kdpm_2",
							"kdpm_2_k",
							"kdpm_2_a",
							"kdpm_2_a_k",
							"dpmpp_2s",
							"dpmpp_2s_k",
							"dpmpp_2m",
							"dpmpp_2m_k",
							"dpmpp_2m_sde",
							"dpmpp_2m_sde_k",
							"dpmpp_3m",
							"dpmpp_3m_k",
							"dpmpp_sde",
							"dpmpp_sde_k",
							"unipc",
							"unipc_k",
							"lcm",
							"tcd"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "euler",
						"orig_required": false,
						"title": "Scheduler",
						"type": "string",
						"ui_hidden": false,
						"ui_type": "SchedulerField"
					},
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "UNet",
						"ui_hidden": false,
						"ui_order": 2
					},
					"control": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ControlField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ControlField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "Control",
						"ui_hidden": false,
						"ui_order": 5
					},
					"ip_adapter": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/IPAdapterField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/IPAdapterField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "IP-Adapter to apply",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "IP-Adapter",
						"ui_hidden": false,
						"ui_order": 6
					},
					"t2i_adapter": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/T2IAdapterField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/T2IAdapterField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "T2I-Adapter(s) to apply",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "T2I-Adapter",
						"ui_hidden": false,
						"ui_order": 7
					},
					"cfg_rescale_multiplier": {
						"default": 0,
						"description": "Rescale multiplier for CFG guidance, used for models trained with zero-terminal SNR",
						"exclusiveMaximum": 1,
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "CFG Rescale Multiplier",
						"type": "number",
						"ui_hidden": false
					},
					"latents": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false,
						"ui_order": 4
					},
					"denoise_mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/DenoiseMaskField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "A mask of the region to apply the denoising process to.",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false,
						"ui_order": 8
					},
					"type": {
						"const": "denoise_latents",
						"default": "denoise_latents",
						"enum": [
							"denoise_latents"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"denoise",
					"txt2img",
					"t2i",
					"t2l",
					"img2img",
					"i2i",
					"l2l"
				],
				"title": "Denoise Latents",
				"type": "object",
				"version": "1.5.3",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"DenoiseMaskField": {
				"description": "An inpaint mask field",
				"properties": {
					"mask_name": {
						"description": "The name of the mask image",
						"title": "Mask Name",
						"type": "string"
					},
					"masked_latents_name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The name of the masked image latents",
						"title": "Masked Latents Name"
					},
					"gradient": {
						"default": false,
						"description": "Used for gradient inpainting",
						"title": "Gradient",
						"type": "boolean"
					}
				},
				"required": [
					"mask_name"
				],
				"title": "DenoiseMaskField",
				"type": "object"
			},
			"DenoiseMaskOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single image",
				"properties": {
					"denoise_mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DenoiseMaskField"
							}
						],
						"description": "Mask for denoise model run",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "denoise_mask_output",
						"default": "denoise_mask_output",
						"enum": [
							"denoise_mask_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"denoise_mask",
					"type",
					"type"
				],
				"title": "DenoiseMaskOutput",
				"type": "object"
			},
			"DepthAnythingImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates a depth map based on the Depth Anything algorithm",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"model_size": {
						"default": "small_v2",
						"description": "The size of the depth model to use",
						"enum": [
							"large",
							"base",
							"small",
							"small_v2"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "small_v2",
						"orig_required": false,
						"title": "Model Size",
						"type": "string",
						"ui_hidden": false
					},
					"resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "depth_anything_image_processor",
						"default": "depth_anything_image_processor",
						"enum": [
							"depth_anything_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"depth",
					"depth anything"
				],
				"title": "Depth Anything Processor",
				"type": "object",
				"version": "1.1.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"DivideInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Divides two numbers",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"a": {
						"default": 0,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "A",
						"type": "integer",
						"ui_hidden": false
					},
					"b": {
						"default": 0,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "B",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "div",
						"default": "div",
						"enum": [
							"div"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"divide"
				],
				"title": "Divide Integers",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"DownloadCancelledEvent": {
				"description": "Event model for download_cancelled",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"source": {
						"description": "The source of the download",
						"title": "Source",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"source"
				],
				"title": "DownloadCancelledEvent",
				"type": "object"
			},
			"DownloadCompleteEvent": {
				"description": "Event model for download_complete",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"source": {
						"description": "The source of the download",
						"title": "Source",
						"type": "string"
					},
					"download_path": {
						"description": "The local path where the download is saved",
						"title": "Download Path",
						"type": "string"
					},
					"total_bytes": {
						"description": "The total number of bytes downloaded",
						"title": "Total Bytes",
						"type": "integer"
					}
				},
				"required": [
					"timestamp",
					"source",
					"download_path",
					"total_bytes"
				],
				"title": "DownloadCompleteEvent",
				"type": "object"
			},
			"DownloadErrorEvent": {
				"description": "Event model for download_error",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"source": {
						"description": "The source of the download",
						"title": "Source",
						"type": "string"
					},
					"error_type": {
						"description": "The type of error",
						"title": "Error Type",
						"type": "string"
					},
					"error": {
						"description": "The error message",
						"title": "Error",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"source",
					"error_type",
					"error"
				],
				"title": "DownloadErrorEvent",
				"type": "object"
			},
			"DownloadJob": {
				"properties": {
					"id": {
						"type": "integer",
						"title": "Id",
						"description": "Numeric ID of this job",
						"default": -1
					},
					"dest": {
						"type": "string",
						"format": "path",
						"title": "Dest",
						"description": "Initial destination of downloaded model on local disk; a directory or file path"
					},
					"download_path": {
						"anyOf": [
							{
								"type": "string",
								"format": "path"
							},
							{
								"type": "null"
							}
						],
						"title": "Download Path",
						"description": "Final location of downloaded file or directory"
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DownloadJobStatus"
							}
						],
						"description": "Status of the download",
						"default": "waiting"
					},
					"bytes": {
						"type": "integer",
						"title": "Bytes",
						"description": "Bytes downloaded so far",
						"default": 0
					},
					"total_bytes": {
						"type": "integer",
						"title": "Total Bytes",
						"description": "Total file size (bytes)",
						"default": 0
					},
					"error_type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Type",
						"description": "Name of exception that caused an error"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error",
						"description": "Traceback of the exception that caused an error"
					},
					"source": {
						"type": "string",
						"minLength": 1,
						"format": "uri",
						"title": "Source",
						"description": "Where to download from. Specific types specified in child classes."
					},
					"access_token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Access Token",
						"description": "authorization token for protected resources"
					},
					"priority": {
						"type": "integer",
						"title": "Priority",
						"description": "Queue priority; lower values are higher priority",
						"default": 10
					},
					"job_started": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Job Started",
						"description": "Timestamp for when the download job started"
					},
					"job_ended": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Job Ended",
						"description": "Timestamp for when the download job ende1d (completed or errored)"
					},
					"content_type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Content Type",
						"description": "Content type of downloaded file"
					}
				},
				"type": "object",
				"required": [
					"dest",
					"source"
				],
				"title": "DownloadJob",
				"description": "Class to monitor and control a model download request."
			},
			"DownloadJobStatus": {
				"type": "string",
				"enum": [
					"waiting",
					"running",
					"completed",
					"cancelled",
					"error"
				],
				"title": "DownloadJobStatus",
				"description": "State of a download job."
			},
			"DownloadProgressEvent": {
				"description": "Event model for download_progress",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"source": {
						"description": "The source of the download",
						"title": "Source",
						"type": "string"
					},
					"download_path": {
						"description": "The local path where the download is saved",
						"title": "Download Path",
						"type": "string"
					},
					"current_bytes": {
						"description": "The number of bytes downloaded so far",
						"title": "Current Bytes",
						"type": "integer"
					},
					"total_bytes": {
						"description": "The total number of bytes to be downloaded",
						"title": "Total Bytes",
						"type": "integer"
					}
				},
				"required": [
					"timestamp",
					"source",
					"download_path",
					"current_bytes",
					"total_bytes"
				],
				"title": "DownloadProgressEvent",
				"type": "object"
			},
			"DownloadStartedEvent": {
				"description": "Event model for download_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"source": {
						"description": "The source of the download",
						"title": "Source",
						"type": "string"
					},
					"download_path": {
						"description": "The local path where the download is saved",
						"title": "Download Path",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"source",
					"download_path"
				],
				"title": "DownloadStartedEvent",
				"type": "object"
			},
			"DynamicPromptInvocation": {
				"category": "prompt",
				"class": "invocation",
				"classification": "stable",
				"description": "Parses a prompt using adieyal/dynamicprompts' random or combinatorial generator",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": false,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"prompt": {
						"default": null,
						"description": "The prompt to parse with dynamicprompts",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Prompt",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"max_prompts": {
						"default": 1,
						"description": "The number of prompts to generate",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Max Prompts",
						"type": "integer",
						"ui_hidden": false
					},
					"combinatorial": {
						"default": false,
						"description": "Whether to use the combinatorial generator",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Combinatorial",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "dynamic_prompt",
						"default": "dynamic_prompt",
						"enum": [
							"dynamic_prompt"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"collection"
				],
				"title": "Dynamic Prompt",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringCollectionOutput"
				}
			},
			"DynamicPromptsResponse": {
				"properties": {
					"prompts": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Prompts"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error"
					}
				},
				"type": "object",
				"required": [
					"prompts"
				],
				"title": "DynamicPromptsResponse"
			},
			"ESRGANInvocation": {
				"category": "esrgan",
				"class": "invocation",
				"classification": "stable",
				"description": "Upscales an image using RealESRGAN.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The input image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"model_name": {
						"default": "RealESRGAN_x4plus.pth",
						"description": "The Real-ESRGAN model to use",
						"enum": [
							"RealESRGAN_x4plus.pth",
							"RealESRGAN_x4plus_anime_6B.pth",
							"ESRGAN_SRx4_DF2KOST_official-ff704c30.pth",
							"RealESRGAN_x2plus.pth"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "RealESRGAN_x4plus.pth",
						"orig_required": false,
						"title": "Model Name",
						"type": "string",
						"ui_hidden": false
					},
					"tile_size": {
						"default": 400,
						"description": "Tile size for tiled ESRGAN upscaling (0=tiling disabled)",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 400,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "esrgan",
						"default": "esrgan",
						"enum": [
							"esrgan"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"esrgan",
					"upscale"
				],
				"title": "Upscale (RealESRGAN)",
				"type": "object",
				"version": "1.3.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"Edge": {
				"properties": {
					"source": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EdgeConnection"
							}
						],
						"description": "The connection for the edge's from node and field"
					},
					"destination": {
						"allOf": [
							{
								"$ref": "#/components/schemas/EdgeConnection"
							}
						],
						"description": "The connection for the edge's to node and field"
					}
				},
				"type": "object",
				"required": [
					"source",
					"destination"
				],
				"title": "Edge"
			},
			"EdgeConnection": {
				"properties": {
					"node_id": {
						"type": "string",
						"title": "Node Id",
						"description": "The id of the node for this edge connection"
					},
					"field": {
						"type": "string",
						"title": "Field",
						"description": "The field for this connection"
					}
				},
				"type": "object",
				"required": [
					"node_id",
					"field"
				],
				"title": "EdgeConnection"
			},
			"EnqueueBatchResult": {
				"properties": {
					"queue_id": {
						"type": "string",
						"title": "Queue Id",
						"description": "The ID of the queue"
					},
					"enqueued": {
						"type": "integer",
						"title": "Enqueued",
						"description": "The total number of queue items enqueued"
					},
					"requested": {
						"type": "integer",
						"title": "Requested",
						"description": "The total number of queue items requested to be enqueued"
					},
					"batch": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Batch"
							}
						],
						"description": "The batch that was enqueued"
					},
					"priority": {
						"type": "integer",
						"title": "Priority",
						"description": "The priority of the enqueued batch"
					}
				},
				"type": "object",
				"required": [
					"queue_id",
					"enqueued",
					"requested",
					"batch",
					"priority"
				],
				"title": "EnqueueBatchResult"
			},
			"ExposedField": {
				"properties": {
					"nodeId": {
						"type": "string",
						"title": "Nodeid"
					},
					"fieldName": {
						"type": "string",
						"title": "Fieldname"
					}
				},
				"type": "object",
				"required": [
					"nodeId",
					"fieldName"
				],
				"title": "ExposedField"
			},
			"FaceIdentifierInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Outputs an image with detected face IDs printed on each face. For use with other FaceTools.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "Image to face detect",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"minimum_confidence": {
						"default": 0.5,
						"description": "Minimum confidence for face detection (lower if detection is failing)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.5,
						"orig_required": false,
						"title": "Minimum Confidence",
						"type": "number",
						"ui_hidden": false
					},
					"chunk": {
						"default": false,
						"description": "Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Chunk",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "face_identifier",
						"default": "face_identifier",
						"enum": [
							"face_identifier"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"face",
					"identifier"
				],
				"title": "FaceIdentifier",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"FaceMaskInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Face mask creation using mediapipe face detection",
				"node_pack": "invokeai",
				"properties": {
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "Image to face detect",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"face_ids": {
						"default": "",
						"description": "Comma-separated list of face ids to mask eg '0,2,7'. Numbered from 0. Leave empty to mask all. Find face IDs with FaceIdentifier node.",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Face Ids",
						"type": "string",
						"ui_hidden": false
					},
					"minimum_confidence": {
						"default": 0.5,
						"description": "Minimum confidence for face detection (lower if detection is failing)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.5,
						"orig_required": false,
						"title": "Minimum Confidence",
						"type": "number",
						"ui_hidden": false
					},
					"x_offset": {
						"default": 0,
						"description": "Offset for the X-axis of the face mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X Offset",
						"type": "number",
						"ui_hidden": false
					},
					"y_offset": {
						"default": 0,
						"description": "Offset for the Y-axis of the face mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y Offset",
						"type": "number",
						"ui_hidden": false
					},
					"chunk": {
						"default": false,
						"description": "Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Chunk",
						"type": "boolean",
						"ui_hidden": false
					},
					"invert_mask": {
						"default": false,
						"description": "Toggle to invert the mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert Mask",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "face_mask_detection",
						"default": "face_mask_detection",
						"enum": [
							"face_mask_detection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"face",
					"mask"
				],
				"title": "FaceMask",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/FaceMaskOutput"
				}
			},
			"FaceMaskOutput": {
				"class": "output",
				"description": "Base class for FaceMask output",
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The output image",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "The width of the image in pixels",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The height of the image in pixels",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "face_mask_output",
						"default": "face_mask_output",
						"enum": [
							"face_mask_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The output mask",
						"field_kind": "output",
						"ui_hidden": false
					}
				},
				"required": [
					"image",
					"width",
					"height",
					"type",
					"mask",
					"type"
				],
				"title": "FaceMaskOutput",
				"type": "object"
			},
			"FaceOffInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Bound, extract, and mask a face from an image using MediaPipe detection",
				"node_pack": "invokeai",
				"properties": {
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "Image for face detection",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"face_id": {
						"default": 0,
						"description": "The face ID to process, numbered from 0. Multiple faces not supported. Find a face's ID with FaceIdentifier node.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Face Id",
						"type": "integer",
						"ui_hidden": false
					},
					"minimum_confidence": {
						"default": 0.5,
						"description": "Minimum confidence for face detection (lower if detection is failing)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.5,
						"orig_required": false,
						"title": "Minimum Confidence",
						"type": "number",
						"ui_hidden": false
					},
					"x_offset": {
						"default": 0,
						"description": "X-axis offset of the mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X Offset",
						"type": "number",
						"ui_hidden": false
					},
					"y_offset": {
						"default": 0,
						"description": "Y-axis offset of the mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y Offset",
						"type": "number",
						"ui_hidden": false
					},
					"padding": {
						"default": 0,
						"description": "All-axis padding around the mask in pixels",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Padding",
						"type": "integer",
						"ui_hidden": false
					},
					"chunk": {
						"default": false,
						"description": "Whether to bypass full image face detection and default to image chunking. Chunking will occur if no faces are found in the full image.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Chunk",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "face_off",
						"default": "face_off",
						"enum": [
							"face_off"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"faceoff",
					"face",
					"mask"
				],
				"title": "FaceOff",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/FaceOffOutput"
				}
			},
			"FaceOffOutput": {
				"class": "output",
				"description": "Base class for FaceOff Output",
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The output image",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "The width of the image in pixels",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The height of the image in pixels",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "face_off_output",
						"default": "face_off_output",
						"enum": [
							"face_off_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The output mask",
						"field_kind": "output",
						"ui_hidden": false
					},
					"x": {
						"description": "The x coordinate of the bounding box's left side",
						"field_kind": "output",
						"title": "X",
						"type": "integer",
						"ui_hidden": false
					},
					"y": {
						"description": "The y coordinate of the bounding box's top side",
						"field_kind": "output",
						"title": "Y",
						"type": "integer",
						"ui_hidden": false
					}
				},
				"required": [
					"image",
					"width",
					"height",
					"type",
					"mask",
					"x",
					"y",
					"type"
				],
				"title": "FaceOffOutput",
				"type": "object"
			},
			"FieldKind": {
				"description": "The kind of field.\n- `Input`: An input field on a node.\n- `Output`: An output field on a node.\n- `Internal`: A field which is treated as an input, but cannot be used in node definitions. Metadata is\none example. It is provided to nodes via the WithMetadata class, and we want to reserve the field name\n\"metadata\" for this on all nodes. `FieldKind` is used to short-circuit the field name validation logic,\nallowing \"metadata\" for that field.\n- `NodeAttribute`: The field is a node attribute. These are fields which are not inputs or outputs,\nbut which are used to store information about the node. For example, the `id` and `type` fields are node\nattributes.\n\nThe presence of this in `json_schema_extra[\"field_kind\"]` is used when initializing node schemas on app\nstartup, and when generating the OpenAPI schema for the workflow editor.",
				"enum": [
					"input",
					"output",
					"internal",
					"node_attribute"
				],
				"title": "FieldKind",
				"type": "string"
			},
			"FloatCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of float primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The collection of float values",
						"field_kind": "input",
						"input": "any",
						"items": {
							"type": "number"
						},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "float_collection",
						"default": "float_collection",
						"enum": [
							"float_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"float",
					"collection"
				],
				"title": "Float Collection Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/FloatCollectionOutput"
				}
			},
			"FloatCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of floats",
				"properties": {
					"collection": {
						"description": "The float collection",
						"field_kind": "output",
						"items": {
							"type": "number"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "float_collection_output",
						"default": "float_collection_output",
						"enum": [
							"float_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "FloatCollectionOutput",
				"type": "object"
			},
			"FloatInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A float primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": 0,
						"description": "The float value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Value",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "float",
						"default": "float",
						"enum": [
							"float"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"float"
				],
				"title": "Float Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/FloatOutput"
				}
			},
			"FloatLinearRangeInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates a range",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"start": {
						"default": 5,
						"description": "The first value of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 5,
						"orig_required": false,
						"title": "Start",
						"type": "number",
						"ui_hidden": false
					},
					"stop": {
						"default": 10,
						"description": "The last value of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 10,
						"orig_required": false,
						"title": "Stop",
						"type": "number",
						"ui_hidden": false
					},
					"steps": {
						"default": 30,
						"description": "number of values to interpolate over (including start and stop)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 30,
						"orig_required": false,
						"title": "Steps",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "float_range",
						"default": "float_range",
						"enum": [
							"float_range"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"range"
				],
				"title": "Float Range",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/FloatCollectionOutput"
				}
			},
			"FloatMathInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Performs floating point math.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"operation": {
						"default": "ADD",
						"description": "The operation to perform",
						"enum": [
							"ADD",
							"SUB",
							"MUL",
							"DIV",
							"EXP",
							"ABS",
							"SQRT",
							"MIN",
							"MAX"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "ADD",
						"orig_required": false,
						"title": "Operation",
						"type": "string",
						"ui_choice_labels": {
							"ABS": "Absolute Value of A",
							"ADD": "Add A+B",
							"DIV": "Divide A/B",
							"EXP": "Exponentiate A^B",
							"MAX": "Maximum(A,B)",
							"MIN": "Minimum(A,B)",
							"MUL": "Multiply A*B",
							"SQRT": "Square Root of A",
							"SUB": "Subtract A-B"
						},
						"ui_hidden": false
					},
					"a": {
						"default": 1,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "A",
						"type": "number",
						"ui_hidden": false
					},
					"b": {
						"default": 1,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "B",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "float_math",
						"default": "float_math",
						"enum": [
							"float_math"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"float",
					"add",
					"subtract",
					"multiply",
					"divide",
					"power",
					"root",
					"absolute value",
					"min",
					"max"
				],
				"title": "Float Math",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/FloatOutput"
				}
			},
			"FloatOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single float",
				"properties": {
					"value": {
						"description": "The output float",
						"field_kind": "output",
						"title": "Value",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "float_output",
						"default": "float_output",
						"enum": [
							"float_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"value",
					"type",
					"type"
				],
				"title": "FloatOutput",
				"type": "object"
			},
			"FloatToIntegerInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Rounds a float number to (a multiple of) an integer.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": 0,
						"description": "The value to round",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Value",
						"type": "number",
						"ui_hidden": false
					},
					"multiple": {
						"default": 1,
						"description": "The multiple to round to",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1,
						"orig_required": false,
						"title": "Multiple of",
						"type": "integer",
						"ui_hidden": false
					},
					"method": {
						"default": "Nearest",
						"description": "The method to use for rounding",
						"enum": [
							"Nearest",
							"Floor",
							"Ceiling",
							"Truncate"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "Nearest",
						"orig_required": false,
						"title": "Method",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "float_to_int",
						"default": "float_to_int",
						"enum": [
							"float_to_int"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"round",
					"integer",
					"float",
					"convert"
				],
				"title": "Float To Integer",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"FluxConditioningField": {
				"description": "A conditioning tensor primitive value",
				"properties": {
					"conditioning_name": {
						"description": "The name of conditioning tensor",
						"title": "Conditioning Name",
						"type": "string"
					}
				},
				"required": [
					"conditioning_name"
				],
				"title": "FluxConditioningField",
				"type": "object"
			},
			"FluxConditioningOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single conditioning tensor",
				"properties": {
					"conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/FluxConditioningField"
							}
						],
						"description": "Conditioning tensor",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "flux_conditioning_output",
						"default": "flux_conditioning_output",
						"enum": [
							"flux_conditioning_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"conditioning",
					"type",
					"type"
				],
				"title": "FluxConditioningOutput",
				"type": "object"
			},
			"FluxDenoiseInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "prototype",
				"description": "Run denoising process with a FLUX transformer model.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"denoise_mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/DenoiseMaskField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "A mask of the region to apply the denoising process to.",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"denoising_start": {
						"default": 0,
						"description": "When to start denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Denoising Start",
						"type": "number",
						"ui_hidden": false
					},
					"denoising_end": {
						"default": 1,
						"description": "When to stop denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "Denoising End",
						"type": "number",
						"ui_hidden": false
					},
					"transformer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TransformerField"
							}
						],
						"default": null,
						"description": "Flux model (Transformer) to load",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "Transformer",
						"ui_hidden": false
					},
					"positive_text_conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/FluxConditioningField"
							}
						],
						"default": null,
						"description": "Positive conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"width": {
						"default": 1024,
						"description": "Width of the generated image.",
						"field_kind": "input",
						"input": "any",
						"multipleOf": 16,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 1024,
						"description": "Height of the generated image.",
						"field_kind": "input",
						"input": "any",
						"multipleOf": 16,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"num_steps": {
						"default": 4,
						"description": "Number of diffusion steps. Recommended values are schnell: 4, dev: 50.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 4,
						"orig_required": false,
						"title": "Num Steps",
						"type": "integer",
						"ui_hidden": false
					},
					"guidance": {
						"default": 4,
						"description": "The guidance strength. Higher values adhere more strictly to the prompt, and will produce less diverse images. FLUX dev only, ignored for schnell.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 4,
						"orig_required": false,
						"title": "Guidance",
						"type": "number",
						"ui_hidden": false
					},
					"seed": {
						"default": 0,
						"description": "Randomness seed for reproducibility.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Seed",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "flux_denoise",
						"default": "flux_denoise",
						"enum": [
							"flux_denoise"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"flux"
				],
				"title": "FLUX Denoise",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"FluxModelLoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "prototype",
				"description": "Loads a flux base model, outputting its submodels.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Flux model (Transformer) to load",
						"field_kind": "input",
						"input": "direct",
						"orig_required": true,
						"ui_hidden": false,
						"ui_type": "FluxMainModelField"
					},
					"t5_encoder_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "T5 tokenizer and text encoder",
						"field_kind": "input",
						"input": "direct",
						"orig_required": true,
						"title": "T5 Encoder",
						"ui_hidden": false,
						"ui_type": "T5EncoderModelField"
					},
					"clip_embed_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "CLIP Embed loader",
						"field_kind": "input",
						"input": "direct",
						"orig_required": true,
						"title": "CLIP Embed",
						"ui_hidden": false,
						"ui_type": "CLIPEmbedModelField"
					},
					"vae_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "VAE model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "VAE",
						"ui_hidden": false,
						"ui_type": "FluxVAEModelField"
					},
					"type": {
						"const": "flux_model_loader",
						"default": "flux_model_loader",
						"enum": [
							"flux_model_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"model",
					"t5_encoder_model",
					"clip_embed_model",
					"type",
					"id"
				],
				"tags": [
					"model",
					"flux"
				],
				"title": "Flux Main Model",
				"type": "object",
				"version": "1.0.4",
				"output": {
					"$ref": "#/components/schemas/FluxModelLoaderOutput"
				}
			},
			"FluxModelLoaderOutput": {
				"class": "output",
				"description": "Flux base model loader output",
				"properties": {
					"transformer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TransformerField"
							}
						],
						"description": "Transformer",
						"field_kind": "output",
						"title": "Transformer",
						"ui_hidden": false
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP",
						"ui_hidden": false
					},
					"t5_encoder": {
						"allOf": [
							{
								"$ref": "#/components/schemas/T5EncoderField"
							}
						],
						"description": "T5 tokenizer and text encoder",
						"field_kind": "output",
						"title": "T5 Encoder",
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"max_seq_len": {
						"description": "The max sequence length to used for the T5 encoder. (256 for schnell transformer, 512 for dev transformer)",
						"enum": [
							256,
							512
						],
						"field_kind": "output",
						"title": "Max Seq Length",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "flux_model_loader_output",
						"default": "flux_model_loader_output",
						"enum": [
							"flux_model_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"transformer",
					"clip",
					"t5_encoder",
					"vae",
					"max_seq_len",
					"type",
					"type"
				],
				"title": "FluxModelLoaderOutput",
				"type": "object"
			},
			"FluxTextEncoderInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "prototype",
				"description": "Encodes and preps a prompt for a flux image.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "CLIP",
						"ui_hidden": false
					},
					"t5_encoder": {
						"allOf": [
							{
								"$ref": "#/components/schemas/T5EncoderField"
							}
						],
						"default": null,
						"description": "T5 tokenizer and text encoder",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "T5Encoder",
						"ui_hidden": false
					},
					"t5_max_seq_len": {
						"default": null,
						"description": "Max sequence length for the T5 encoder. Expected to be 256 for FLUX schnell models and 512 for FLUX dev models.",
						"enum": [
							256,
							512
						],
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "T5 Max Seq Len",
						"type": "integer",
						"ui_hidden": false
					},
					"prompt": {
						"default": null,
						"description": "Text prompt to encode.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Prompt",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "flux_text_encoder",
						"default": "flux_text_encoder",
						"enum": [
							"flux_text_encoder"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"conditioning",
					"flux"
				],
				"title": "FLUX Text Encoding",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/FluxConditioningOutput"
				}
			},
			"FluxVaeDecodeInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates an image from latents.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "flux_vae_decode",
						"default": "flux_vae_decode",
						"enum": [
							"flux_vae_decode"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"image",
					"vae",
					"l2i",
					"flux"
				],
				"title": "FLUX Latents to Image",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"FluxVaeEncodeInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Encodes an image into latents.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to encode.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "flux_vae_encode",
						"default": "flux_vae_encode",
						"enum": [
							"flux_vae_encode"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"image",
					"vae",
					"i2l",
					"flux"
				],
				"title": "FLUX Image to Latents",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"FoundModel": {
				"properties": {
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model"
					},
					"is_installed": {
						"type": "boolean",
						"title": "Is Installed",
						"description": "Whether or not the model is already installed"
					}
				},
				"type": "object",
				"required": [
					"path",
					"is_installed"
				],
				"title": "FoundModel"
			},
			"FreeUConfig": {
				"description": "Configuration for the FreeU hyperparameters.\n- https://huggingface.co/docs/diffusers/main/en/using-diffusers/freeu\n- https://github.com/ChenyangSi/FreeU",
				"properties": {
					"s1": {
						"description": "Scaling factor for stage 1 to attenuate the contributions of the skip features. This is done to mitigate the \"oversmoothing effect\" in the enhanced denoising process.",
						"maximum": 3,
						"minimum": -1,
						"title": "S1",
						"type": "number"
					},
					"s2": {
						"description": "Scaling factor for stage 2 to attenuate the contributions of the skip features. This is done to mitigate the \"oversmoothing effect\" in the enhanced denoising process.",
						"maximum": 3,
						"minimum": -1,
						"title": "S2",
						"type": "number"
					},
					"b1": {
						"description": "Scaling factor for stage 1 to amplify the contributions of backbone features.",
						"maximum": 3,
						"minimum": -1,
						"title": "B1",
						"type": "number"
					},
					"b2": {
						"description": "Scaling factor for stage 2 to amplify the contributions of backbone features.",
						"maximum": 3,
						"minimum": -1,
						"title": "B2",
						"type": "number"
					}
				},
				"required": [
					"s1",
					"s2",
					"b1",
					"b2"
				],
				"title": "FreeUConfig",
				"type": "object"
			},
			"FreeUInvocation": {
				"category": "unet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies FreeU to the UNet. Suggested values (b1/b2/s1/s2):\n\nSD1.5: 1.2/1.4/0.9/0.2,\nSD2: 1.1/1.2/0.9/0.2,\nSDXL: 1.1/1.2/0.6/0.4,",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "UNet",
						"ui_hidden": false
					},
					"b1": {
						"default": 1.2,
						"description": "Scaling factor for stage 1 to amplify the contributions of backbone features.",
						"field_kind": "input",
						"input": "any",
						"maximum": 3,
						"minimum": -1,
						"orig_default": 1.2,
						"orig_required": false,
						"title": "B1",
						"type": "number",
						"ui_hidden": false
					},
					"b2": {
						"default": 1.4,
						"description": "Scaling factor for stage 2 to amplify the contributions of backbone features.",
						"field_kind": "input",
						"input": "any",
						"maximum": 3,
						"minimum": -1,
						"orig_default": 1.4,
						"orig_required": false,
						"title": "B2",
						"type": "number",
						"ui_hidden": false
					},
					"s1": {
						"default": 0.9,
						"description": "Scaling factor for stage 1 to attenuate the contributions of the skip features. This is done to mitigate the \"oversmoothing effect\" in the enhanced denoising process.",
						"field_kind": "input",
						"input": "any",
						"maximum": 3,
						"minimum": -1,
						"orig_default": 0.9,
						"orig_required": false,
						"title": "S1",
						"type": "number",
						"ui_hidden": false
					},
					"s2": {
						"default": 0.2,
						"description": "Scaling factor for stage 2 to attenuate the contributions of the skip features. This is done to mitigate the \"oversmoothing effect\" in the enhanced denoising process.",
						"field_kind": "input",
						"input": "any",
						"maximum": 3,
						"minimum": -1,
						"orig_default": 0.2,
						"orig_required": false,
						"title": "S2",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "freeu",
						"default": "freeu",
						"enum": [
							"freeu"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"freeu"
				],
				"title": "FreeU",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/UNetOutput"
				}
			},
			"GradientMaskOutput": {
				"class": "output",
				"description": "Outputs a denoise mask and an image representing the total gradient of the mask.",
				"properties": {
					"denoise_mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/DenoiseMaskField"
							}
						],
						"description": "Mask for denoise model run",
						"field_kind": "output",
						"ui_hidden": false
					},
					"expanded_mask_area": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "Image representing the total gradient area of the mask. For paste-back purposes.",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "gradient_mask_output",
						"default": "gradient_mask_output",
						"enum": [
							"gradient_mask_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"denoise_mask",
					"expanded_mask_area",
					"type",
					"type"
				],
				"title": "GradientMaskOutput",
				"type": "object"
			},
			"Graph": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id",
						"description": "The id of this graph"
					},
					"nodes": {
						"additionalProperties": {
							"oneOf": [
								{
									"$ref": "#/components/schemas/AddInvocation"
								},
								{
									"$ref": "#/components/schemas/AlphaMaskToTensorInvocation"
								},
								{
									"$ref": "#/components/schemas/BlankImageInvocation"
								},
								{
									"$ref": "#/components/schemas/BlendLatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/BooleanCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/BooleanInvocation"
								},
								{
									"$ref": "#/components/schemas/BoundingBoxInvocation"
								},
								{
									"$ref": "#/components/schemas/CLIPSkipInvocation"
								},
								{
									"$ref": "#/components/schemas/CV2InfillInvocation"
								},
								{
									"$ref": "#/components/schemas/CalculateImageTilesEvenSplitInvocation"
								},
								{
									"$ref": "#/components/schemas/CalculateImageTilesInvocation"
								},
								{
									"$ref": "#/components/schemas/CalculateImageTilesMinimumOverlapInvocation"
								},
								{
									"$ref": "#/components/schemas/CannyImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/CanvasPasteBackInvocation"
								},
								{
									"$ref": "#/components/schemas/CenterPadCropInvocation"
								},
								{
									"$ref": "#/components/schemas/CollectInvocation"
								},
								{
									"$ref": "#/components/schemas/ColorCorrectInvocation"
								},
								{
									"$ref": "#/components/schemas/ColorInvocation"
								},
								{
									"$ref": "#/components/schemas/ColorMapImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/CompelInvocation"
								},
								{
									"$ref": "#/components/schemas/ConditioningCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/ConditioningInvocation"
								},
								{
									"$ref": "#/components/schemas/ContentShuffleImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/ControlNetInvocation"
								},
								{
									"$ref": "#/components/schemas/CoreMetadataInvocation"
								},
								{
									"$ref": "#/components/schemas/CreateDenoiseMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/CreateGradientMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/CropLatentsCoreInvocation"
								},
								{
									"$ref": "#/components/schemas/CvInpaintInvocation"
								},
								{
									"$ref": "#/components/schemas/DWOpenposeImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/DenoiseLatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/DepthAnythingImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/DivideInvocation"
								},
								{
									"$ref": "#/components/schemas/DynamicPromptInvocation"
								},
								{
									"$ref": "#/components/schemas/ESRGANInvocation"
								},
								{
									"$ref": "#/components/schemas/FaceIdentifierInvocation"
								},
								{
									"$ref": "#/components/schemas/FaceMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/FaceOffInvocation"
								},
								{
									"$ref": "#/components/schemas/FloatCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/FloatInvocation"
								},
								{
									"$ref": "#/components/schemas/FloatLinearRangeInvocation"
								},
								{
									"$ref": "#/components/schemas/FloatMathInvocation"
								},
								{
									"$ref": "#/components/schemas/FloatToIntegerInvocation"
								},
								{
									"$ref": "#/components/schemas/FluxDenoiseInvocation"
								},
								{
									"$ref": "#/components/schemas/FluxModelLoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/FluxTextEncoderInvocation"
								},
								{
									"$ref": "#/components/schemas/FluxVaeDecodeInvocation"
								},
								{
									"$ref": "#/components/schemas/FluxVaeEncodeInvocation"
								},
								{
									"$ref": "#/components/schemas/FreeUInvocation"
								},
								{
									"$ref": "#/components/schemas/GroundingDinoInvocation"
								},
								{
									"$ref": "#/components/schemas/HedImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/HeuristicResizeInvocation"
								},
								{
									"$ref": "#/components/schemas/IPAdapterInvocation"
								},
								{
									"$ref": "#/components/schemas/IdealSizeInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageBlurInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageChannelInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageChannelMultiplyInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageChannelOffsetInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageConvertInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageCropInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageHueAdjustmentInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageInverseLerpInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageLerpInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageMaskToTensorInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageMultiplyInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageNSFWBlurInvocation"
								},
								{
									"$ref": "#/components/schemas/ImagePasteInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageResizeInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageScaleInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageToLatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/ImageWatermarkInvocation"
								},
								{
									"$ref": "#/components/schemas/InfillColorInvocation"
								},
								{
									"$ref": "#/components/schemas/InfillPatchMatchInvocation"
								},
								{
									"$ref": "#/components/schemas/InfillTileInvocation"
								},
								{
									"$ref": "#/components/schemas/IntegerCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/IntegerInvocation"
								},
								{
									"$ref": "#/components/schemas/IntegerMathInvocation"
								},
								{
									"$ref": "#/components/schemas/InvertTensorMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/IterateInvocation"
								},
								{
									"$ref": "#/components/schemas/LaMaInfillInvocation"
								},
								{
									"$ref": "#/components/schemas/LatentsCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/LatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/LatentsToImageInvocation"
								},
								{
									"$ref": "#/components/schemas/LeresImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/LineartAnimeImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/LineartImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/LoRACollectionLoader"
								},
								{
									"$ref": "#/components/schemas/LoRALoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/LoRASelectorInvocation"
								},
								{
									"$ref": "#/components/schemas/MainModelLoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/MaskCombineInvocation"
								},
								{
									"$ref": "#/components/schemas/MaskEdgeInvocation"
								},
								{
									"$ref": "#/components/schemas/MaskFromAlphaInvocation"
								},
								{
									"$ref": "#/components/schemas/MaskFromIDInvocation"
								},
								{
									"$ref": "#/components/schemas/MaskTensorToImageInvocation"
								},
								{
									"$ref": "#/components/schemas/MediapipeFaceProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/MergeMetadataInvocation"
								},
								{
									"$ref": "#/components/schemas/MergeTilesToImageInvocation"
								},
								{
									"$ref": "#/components/schemas/MetadataInvocation"
								},
								{
									"$ref": "#/components/schemas/MetadataItemInvocation"
								},
								{
									"$ref": "#/components/schemas/MidasDepthImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/MlsdImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/ModelIdentifierInvocation"
								},
								{
									"$ref": "#/components/schemas/MultiplyInvocation"
								},
								{
									"$ref": "#/components/schemas/NoiseInvocation"
								},
								{
									"$ref": "#/components/schemas/NormalbaeImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/PairTileImageInvocation"
								},
								{
									"$ref": "#/components/schemas/PidiImageProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/PromptsFromFileInvocation"
								},
								{
									"$ref": "#/components/schemas/RandomFloatInvocation"
								},
								{
									"$ref": "#/components/schemas/RandomIntInvocation"
								},
								{
									"$ref": "#/components/schemas/RandomRangeInvocation"
								},
								{
									"$ref": "#/components/schemas/RangeInvocation"
								},
								{
									"$ref": "#/components/schemas/RangeOfSizeInvocation"
								},
								{
									"$ref": "#/components/schemas/RectangleMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/ResizeLatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/RoundInvocation"
								},
								{
									"$ref": "#/components/schemas/SDXLCompelPromptInvocation"
								},
								{
									"$ref": "#/components/schemas/SDXLLoRACollectionLoader"
								},
								{
									"$ref": "#/components/schemas/SDXLLoRALoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/SDXLModelLoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/SDXLRefinerCompelPromptInvocation"
								},
								{
									"$ref": "#/components/schemas/SDXLRefinerModelLoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/SaveImageInvocation"
								},
								{
									"$ref": "#/components/schemas/ScaleLatentsInvocation"
								},
								{
									"$ref": "#/components/schemas/SchedulerInvocation"
								},
								{
									"$ref": "#/components/schemas/SeamlessModeInvocation"
								},
								{
									"$ref": "#/components/schemas/SegmentAnythingInvocation"
								},
								{
									"$ref": "#/components/schemas/SegmentAnythingProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/ShowImageInvocation"
								},
								{
									"$ref": "#/components/schemas/SpandrelImageToImageAutoscaleInvocation"
								},
								{
									"$ref": "#/components/schemas/SpandrelImageToImageInvocation"
								},
								{
									"$ref": "#/components/schemas/StepParamEasingInvocation"
								},
								{
									"$ref": "#/components/schemas/StringCollectionInvocation"
								},
								{
									"$ref": "#/components/schemas/StringInvocation"
								},
								{
									"$ref": "#/components/schemas/StringJoinInvocation"
								},
								{
									"$ref": "#/components/schemas/StringJoinThreeInvocation"
								},
								{
									"$ref": "#/components/schemas/StringReplaceInvocation"
								},
								{
									"$ref": "#/components/schemas/StringSplitInvocation"
								},
								{
									"$ref": "#/components/schemas/StringSplitNegInvocation"
								},
								{
									"$ref": "#/components/schemas/SubtractInvocation"
								},
								{
									"$ref": "#/components/schemas/T2IAdapterInvocation"
								},
								{
									"$ref": "#/components/schemas/TileResamplerProcessorInvocation"
								},
								{
									"$ref": "#/components/schemas/TileToPropertiesInvocation"
								},
								{
									"$ref": "#/components/schemas/TiledMultiDiffusionDenoiseLatents"
								},
								{
									"$ref": "#/components/schemas/UnsharpMaskInvocation"
								},
								{
									"$ref": "#/components/schemas/VAELoaderInvocation"
								},
								{
									"$ref": "#/components/schemas/ZoeDepthImageProcessorInvocation"
								}
							]
						},
						"type": "object",
						"title": "Nodes",
						"description": "The nodes in this graph"
					},
					"edges": {
						"items": {
							"$ref": "#/components/schemas/Edge"
						},
						"type": "array",
						"title": "Edges",
						"description": "The connections between nodes and their fields in this graph"
					}
				},
				"type": "object",
				"title": "Graph"
			},
			"GraphExecutionState": {
				"properties": {
					"id": {
						"type": "string",
						"title": "Id",
						"description": "The id of the execution state"
					},
					"graph": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Graph"
							}
						],
						"description": "The graph being executed"
					},
					"execution_graph": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Graph"
							}
						],
						"description": "The expanded graph of activated and executed nodes"
					},
					"executed": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"uniqueItems": true,
						"title": "Executed",
						"description": "The set of node ids that have been executed"
					},
					"executed_history": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Executed History",
						"description": "The list of node ids that have been executed, in order of execution"
					},
					"results": {
						"additionalProperties": {
							"oneOf": [
								{
									"$ref": "#/components/schemas/BooleanCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/BooleanOutput"
								},
								{
									"$ref": "#/components/schemas/BoundingBoxCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/BoundingBoxOutput"
								},
								{
									"$ref": "#/components/schemas/CLIPOutput"
								},
								{
									"$ref": "#/components/schemas/CLIPSkipInvocationOutput"
								},
								{
									"$ref": "#/components/schemas/CalculateImageTilesOutput"
								},
								{
									"$ref": "#/components/schemas/CollectInvocationOutput"
								},
								{
									"$ref": "#/components/schemas/ColorCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/ColorOutput"
								},
								{
									"$ref": "#/components/schemas/ConditioningCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/ConditioningOutput"
								},
								{
									"$ref": "#/components/schemas/ControlOutput"
								},
								{
									"$ref": "#/components/schemas/DenoiseMaskOutput"
								},
								{
									"$ref": "#/components/schemas/FaceMaskOutput"
								},
								{
									"$ref": "#/components/schemas/FaceOffOutput"
								},
								{
									"$ref": "#/components/schemas/FloatCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/FloatOutput"
								},
								{
									"$ref": "#/components/schemas/FluxConditioningOutput"
								},
								{
									"$ref": "#/components/schemas/FluxModelLoaderOutput"
								},
								{
									"$ref": "#/components/schemas/GradientMaskOutput"
								},
								{
									"$ref": "#/components/schemas/IPAdapterOutput"
								},
								{
									"$ref": "#/components/schemas/IdealSizeOutput"
								},
								{
									"$ref": "#/components/schemas/ImageCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/ImageOutput"
								},
								{
									"$ref": "#/components/schemas/IntegerCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/IntegerOutput"
								},
								{
									"$ref": "#/components/schemas/IterateInvocationOutput"
								},
								{
									"$ref": "#/components/schemas/LatentsCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/LatentsOutput"
								},
								{
									"$ref": "#/components/schemas/LoRALoaderOutput"
								},
								{
									"$ref": "#/components/schemas/LoRASelectorOutput"
								},
								{
									"$ref": "#/components/schemas/MaskOutput"
								},
								{
									"$ref": "#/components/schemas/MetadataItemOutput"
								},
								{
									"$ref": "#/components/schemas/MetadataOutput"
								},
								{
									"$ref": "#/components/schemas/ModelIdentifierOutput"
								},
								{
									"$ref": "#/components/schemas/ModelLoaderOutput"
								},
								{
									"$ref": "#/components/schemas/NoiseOutput"
								},
								{
									"$ref": "#/components/schemas/PairTileImageOutput"
								},
								{
									"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
								},
								{
									"$ref": "#/components/schemas/SDXLModelLoaderOutput"
								},
								{
									"$ref": "#/components/schemas/SDXLRefinerModelLoaderOutput"
								},
								{
									"$ref": "#/components/schemas/SchedulerOutput"
								},
								{
									"$ref": "#/components/schemas/SeamlessModeOutput"
								},
								{
									"$ref": "#/components/schemas/String2Output"
								},
								{
									"$ref": "#/components/schemas/StringCollectionOutput"
								},
								{
									"$ref": "#/components/schemas/StringOutput"
								},
								{
									"$ref": "#/components/schemas/StringPosNegOutput"
								},
								{
									"$ref": "#/components/schemas/T2IAdapterOutput"
								},
								{
									"$ref": "#/components/schemas/TileToPropertiesOutput"
								},
								{
									"$ref": "#/components/schemas/UNetOutput"
								},
								{
									"$ref": "#/components/schemas/VAEOutput"
								}
							]
						},
						"type": "object",
						"title": "Results",
						"description": "The results of node executions"
					},
					"errors": {
						"additionalProperties": {
							"type": "string"
						},
						"type": "object",
						"title": "Errors",
						"description": "Errors raised when executing nodes"
					},
					"prepared_source_mapping": {
						"additionalProperties": {
							"type": "string"
						},
						"type": "object",
						"title": "Prepared Source Mapping",
						"description": "The map of prepared nodes to original graph nodes"
					},
					"source_prepared_mapping": {
						"additionalProperties": {
							"items": {
								"type": "string"
							},
							"type": "array",
							"uniqueItems": true
						},
						"type": "object",
						"title": "Source Prepared Mapping",
						"description": "The map of original graph nodes to prepared nodes"
					}
				},
				"type": "object",
				"required": [
					"graph"
				],
				"title": "GraphExecutionState",
				"description": "Tracks the state of a graph execution"
			},
			"GroundingDinoInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Runs a Grounding DINO model. Performs zero-shot bounding-box object detection from a text prompt.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"default": null,
						"description": "The Grounding DINO model to use.",
						"enum": [
							"grounding-dino-tiny",
							"grounding-dino-base"
						],
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Model",
						"type": "string",
						"ui_hidden": false
					},
					"prompt": {
						"default": null,
						"description": "The prompt describing the object to segment.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Prompt",
						"type": "string",
						"ui_hidden": false
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to segment.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detection_threshold": {
						"default": 0.3,
						"description": "The detection threshold for the Grounding DINO model. All detected bounding boxes with scores above this threshold will be returned.",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0.3,
						"orig_required": false,
						"title": "Detection Threshold",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "grounding_dino",
						"default": "grounding_dino",
						"enum": [
							"grounding_dino"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"object detection"
				],
				"title": "Grounding DINO (Text Prompt Object Detection)",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/BoundingBoxCollectionOutput"
				}
			},
			"HFModelSource": {
				"properties": {
					"repo_id": {
						"type": "string",
						"title": "Repo Id"
					},
					"variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": "fp16"
					},
					"subfolder": {
						"anyOf": [
							{
								"type": "string",
								"format": "path"
							},
							{
								"type": "null"
							}
						],
						"title": "Subfolder"
					},
					"access_token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Access Token"
					},
					"type": {
						"type": "string",
						"enum": [
							"hf"
						],
						"const": "hf",
						"title": "Type",
						"default": "hf"
					}
				},
				"type": "object",
				"required": [
					"repo_id"
				],
				"title": "HFModelSource",
				"description": "A HuggingFace repo_id with optional variant, sub-folder and access token.\nNote that the variant option, if not provided to the constructor, will default to fp16, which is\nwhat people (almost) always want."
			},
			"HTTPValidationError": {
				"properties": {
					"detail": {
						"items": {
							"$ref": "#/components/schemas/ValidationError"
						},
						"type": "array",
						"title": "Detail"
					}
				},
				"type": "object",
				"title": "HTTPValidationError"
			},
			"HedImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies HED edge detection to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"scribble": {
						"default": false,
						"description": "Whether or not to use scribble mode",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Scribble",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "hed_image_processor",
						"default": "hed_image_processor",
						"enum": [
							"hed_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"hed",
					"softedge"
				],
				"title": "HED (softedge) Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"HeuristicResizeInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "prototype",
				"description": "Resize an image using a heuristic method. Preserves edge maps.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to resize",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"width": {
						"default": 512,
						"description": "The width to resize to (px)",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 512,
						"description": "The height to resize to (px)",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "heuristic_resize",
						"default": "heuristic_resize",
						"enum": [
							"heuristic_resize"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image, controlnet"
				],
				"title": "Heuristic Resize",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"HuggingFaceMetadata": {
				"properties": {
					"name": {
						"type": "string",
						"title": "Name",
						"description": "model's name"
					},
					"files": {
						"items": {
							"$ref": "#/components/schemas/RemoteModelFile"
						},
						"type": "array",
						"title": "Files",
						"description": "model files and their sizes"
					},
					"type": {
						"type": "string",
						"enum": [
							"huggingface"
						],
						"const": "huggingface",
						"title": "Type",
						"default": "huggingface"
					},
					"id": {
						"type": "string",
						"title": "Id",
						"description": "The HF model id"
					},
					"api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Api Response",
						"description": "Response from the HF API as stringified JSON"
					},
					"is_diffusers": {
						"type": "boolean",
						"title": "Is Diffusers",
						"description": "Whether the metadata is for a Diffusers format model",
						"default": false
					},
					"ckpt_urls": {
						"anyOf": [
							{
								"items": {
									"type": "string",
									"minLength": 1,
									"format": "uri"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Ckpt Urls",
						"description": "URLs for all checkpoint format models in the metadata"
					}
				},
				"type": "object",
				"required": [
					"name",
					"id"
				],
				"title": "HuggingFaceMetadata",
				"description": "Extended metadata fields provided by HuggingFace."
			},
			"HuggingFaceModels": {
				"properties": {
					"urls": {
						"anyOf": [
							{
								"items": {
									"type": "string",
									"minLength": 1,
									"format": "uri"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Urls",
						"description": "URLs for all checkpoint format models in the metadata"
					},
					"is_diffusers": {
						"type": "boolean",
						"title": "Is Diffusers",
						"description": "Whether the metadata is for a Diffusers format model"
					}
				},
				"type": "object",
				"required": [
					"urls",
					"is_diffusers"
				],
				"title": "HuggingFaceModels"
			},
			"IPAdapterCheckpointConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"ip_adapter"
						],
						"const": "ip_adapter",
						"title": "Type",
						"default": "ip_adapter"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint"
						],
						"const": "checkpoint",
						"title": "Format"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"format",
					"key",
					"type",
					"format"
				],
				"title": "IPAdapterCheckpointConfig",
				"description": "Model config for IP Adapter checkpoint format models."
			},
			"IPAdapterField": {
				"properties": {
					"image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ImageField"
								},
								"type": "array"
							}
						],
						"description": "The IP-Adapter image prompt(s).",
						"title": "Image"
					},
					"ip_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The IP-Adapter model to use."
					},
					"image_encoder_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The name of the CLIP image encoder model."
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the IP-Adapter.",
						"title": "Weight"
					},
					"target_blocks": {
						"default": [],
						"description": "The IP Adapter blocks to apply",
						"items": {
							"type": "string"
						},
						"title": "Target Blocks",
						"type": "array"
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the IP-Adapter is first applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the IP-Adapter is last applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "End Step Percent",
						"type": "number"
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The bool mask associated with this IP-Adapter. Excluded regions should be set to False, included regions should be set to True."
					}
				},
				"required": [
					"image",
					"ip_adapter_model",
					"image_encoder_model"
				],
				"title": "IPAdapterField",
				"type": "object"
			},
			"IPAdapterInvocation": {
				"category": "ip_adapter",
				"class": "invocation",
				"classification": "stable",
				"description": "Collects IP-Adapter info to pass to other nodes.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ImageField"
								},
								"type": "array"
							}
						],
						"default": null,
						"description": "The IP-Adapter image prompt(s).",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Image",
						"ui_hidden": false,
						"ui_order": 1
					},
					"ip_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "The IP-Adapter model.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "IP-Adapter Model",
						"ui_hidden": false,
						"ui_order": -1,
						"ui_type": "IPAdapterModelField"
					},
					"clip_vision_model": {
						"default": "ViT-H",
						"description": "CLIP Vision model to use. Overrides model settings. Mandatory for checkpoint models.",
						"enum": [
							"ViT-H",
							"ViT-G"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "ViT-H",
						"orig_required": false,
						"title": "Clip Vision Model",
						"type": "string",
						"ui_hidden": false,
						"ui_order": 2
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the IP-Adapter",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Weight",
						"ui_hidden": false
					},
					"method": {
						"default": "full",
						"description": "The method to apply the IP-Adapter",
						"enum": [
							"full",
							"style",
							"composition"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "full",
						"orig_required": false,
						"title": "Method",
						"type": "string",
						"ui_hidden": false
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the IP-Adapter is first applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Begin Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the IP-Adapter is last applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "End Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "A mask defining the region that this IP-Adapter applies to.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "ip_adapter",
						"default": "ip_adapter",
						"enum": [
							"ip_adapter"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"ip_adapter",
					"control"
				],
				"title": "IP-Adapter",
				"type": "object",
				"version": "1.4.1",
				"output": {
					"$ref": "#/components/schemas/IPAdapterOutput"
				}
			},
			"IPAdapterInvokeAIConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"ip_adapter"
						],
						"const": "ip_adapter",
						"title": "Type",
						"default": "ip_adapter"
					},
					"image_encoder_model_id": {
						"type": "string",
						"title": "Image Encoder Model Id"
					},
					"format": {
						"type": "string",
						"enum": [
							"invokeai"
						],
						"const": "invokeai",
						"title": "Format"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"image_encoder_model_id",
					"format",
					"key",
					"type",
					"format"
				],
				"title": "IPAdapterInvokeAIConfig",
				"description": "Model config for IP Adapter diffusers format models."
			},
			"IPAdapterMetadataField": {
				"description": "IP Adapter Field, minus the CLIP Vision Encoder model",
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The IP-Adapter image prompt."
					},
					"ip_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The IP-Adapter model."
					},
					"clip_vision_model": {
						"description": "The CLIP Vision model",
						"enum": [
							"ViT-H",
							"ViT-G"
						],
						"title": "Clip Vision Model",
						"type": "string"
					},
					"method": {
						"description": "Method to apply IP Weights with",
						"enum": [
							"full",
							"style",
							"composition"
						],
						"title": "Method",
						"type": "string"
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"description": "The weight given to the IP-Adapter",
						"title": "Weight"
					},
					"begin_step_percent": {
						"description": "When the IP-Adapter is first applied (% of total steps)",
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"description": "When the IP-Adapter is last applied (% of total steps)",
						"title": "End Step Percent",
						"type": "number"
					}
				},
				"required": [
					"image",
					"ip_adapter_model",
					"clip_vision_model",
					"method",
					"weight",
					"begin_step_percent",
					"end_step_percent"
				],
				"title": "IPAdapterMetadataField",
				"type": "object"
			},
			"IPAdapterOutput": {
				"class": "output",
				"properties": {
					"ip_adapter": {
						"allOf": [
							{
								"$ref": "#/components/schemas/IPAdapterField"
							}
						],
						"description": "IP-Adapter to apply",
						"field_kind": "output",
						"title": "IP-Adapter",
						"ui_hidden": false
					},
					"type": {
						"const": "ip_adapter_output",
						"default": "ip_adapter_output",
						"enum": [
							"ip_adapter_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"ip_adapter",
					"type",
					"type"
				],
				"title": "IPAdapterOutput",
				"type": "object"
			},
			"IdealSizeInvocation": {
				"class": "invocation",
				"classification": "stable",
				"description": "Calculates the ideal size for generation to avoid duplication",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"width": {
						"default": 1024,
						"description": "Final image width",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 576,
						"description": "Final image height",
						"field_kind": "input",
						"input": "any",
						"orig_default": 576,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"multiplier": {
						"default": 1,
						"description": "Amount to multiply the model's dimensions by when calculating the ideal size (may result in initial generation artifacts if too large)",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Multiplier",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "ideal_size",
						"default": "ideal_size",
						"enum": [
							"ideal_size"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"math",
					"ideal_size"
				],
				"title": "Ideal Size",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/IdealSizeOutput"
				}
			},
			"IdealSizeOutput": {
				"class": "output",
				"description": "Base class for invocations that output an image",
				"properties": {
					"width": {
						"description": "The ideal width of the image (in pixels)",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The ideal height of the image (in pixels)",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "ideal_size_output",
						"default": "ideal_size_output",
						"enum": [
							"ideal_size_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"width",
					"height",
					"type",
					"type"
				],
				"title": "IdealSizeOutput",
				"type": "object"
			},
			"ImageBlurInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Blurs an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to blur",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"radius": {
						"default": 8,
						"description": "The blur radius",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 8,
						"orig_required": false,
						"title": "Radius",
						"type": "number",
						"ui_hidden": false
					},
					"blur_type": {
						"default": "gaussian",
						"description": "The type of blur",
						"enum": [
							"gaussian",
							"box"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "gaussian",
						"orig_required": false,
						"title": "Blur Type",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_blur",
						"default": "img_blur",
						"enum": [
							"img_blur"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"blur"
				],
				"title": "Blur Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageCategory": {
				"type": "string",
				"enum": [
					"general",
					"mask",
					"control",
					"user",
					"other"
				],
				"title": "ImageCategory",
				"description": "The category of an image.\n\n- GENERAL: The image is an output, init image, or otherwise an image without a specialized purpose.\n- MASK: The image is a mask image.\n- CONTROL: The image is a ControlNet control image.\n- USER: The image is a user-provide image.\n- OTHER: The image is some other type of image with a specialized purpose. To be used by external nodes."
			},
			"ImageChannelInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Gets a channel from an image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to get the channel from",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"channel": {
						"default": "A",
						"description": "The channel to get",
						"enum": [
							"A",
							"R",
							"G",
							"B"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "A",
						"orig_required": false,
						"title": "Channel",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_chan",
						"default": "img_chan",
						"enum": [
							"img_chan"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"channel"
				],
				"title": "Extract Image Channel",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageChannelMultiplyInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Scale a specific color channel of an image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to adjust",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"channel": {
						"default": null,
						"description": "Which channel to adjust",
						"enum": [
							"Red (RGBA)",
							"Green (RGBA)",
							"Blue (RGBA)",
							"Alpha (RGBA)",
							"Cyan (CMYK)",
							"Magenta (CMYK)",
							"Yellow (CMYK)",
							"Black (CMYK)",
							"Hue (HSV)",
							"Saturation (HSV)",
							"Value (HSV)",
							"Luminosity (LAB)",
							"A (LAB)",
							"B (LAB)",
							"Y (YCbCr)",
							"Cb (YCbCr)",
							"Cr (YCbCr)"
						],
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Channel",
						"type": "string",
						"ui_hidden": false
					},
					"scale": {
						"default": 1,
						"description": "The amount to scale the channel by.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "Scale",
						"type": "number",
						"ui_hidden": false
					},
					"invert_channel": {
						"default": false,
						"description": "Invert the channel after scaling",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert Channel",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "img_channel_multiply",
						"default": "img_channel_multiply",
						"enum": [
							"img_channel_multiply"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"invert",
					"scale",
					"multiply",
					"red",
					"green",
					"blue",
					"alpha",
					"cyan",
					"magenta",
					"yellow",
					"black",
					"hue",
					"saturation",
					"luminosity",
					"value"
				],
				"title": "Multiply Image Channel",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageChannelOffsetInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Add or subtract a value from a specific color channel of an image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to adjust",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"channel": {
						"default": null,
						"description": "Which channel to adjust",
						"enum": [
							"Red (RGBA)",
							"Green (RGBA)",
							"Blue (RGBA)",
							"Alpha (RGBA)",
							"Cyan (CMYK)",
							"Magenta (CMYK)",
							"Yellow (CMYK)",
							"Black (CMYK)",
							"Hue (HSV)",
							"Saturation (HSV)",
							"Value (HSV)",
							"Luminosity (LAB)",
							"A (LAB)",
							"B (LAB)",
							"Y (YCbCr)",
							"Cb (YCbCr)",
							"Cr (YCbCr)"
						],
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Channel",
						"type": "string",
						"ui_hidden": false
					},
					"offset": {
						"default": 0,
						"description": "The amount to adjust the channel by",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": -255,
						"orig_default": 0,
						"orig_required": false,
						"title": "Offset",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_channel_offset",
						"default": "img_channel_offset",
						"enum": [
							"img_channel_offset"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"offset",
					"red",
					"green",
					"blue",
					"alpha",
					"cyan",
					"magenta",
					"yellow",
					"black",
					"hue",
					"saturation",
					"luminosity",
					"value"
				],
				"title": "Offset Image Channel",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of image primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": null,
						"description": "The collection of image values",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/ImageField"
						},
						"orig_required": true,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "image_collection",
						"default": "image_collection",
						"enum": [
							"image_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"image",
					"collection"
				],
				"title": "Image Collection Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/ImageCollectionOutput"
				}
			},
			"ImageCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of images",
				"properties": {
					"collection": {
						"description": "The output images",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/ImageField"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "image_collection_output",
						"default": "image_collection_output",
						"enum": [
							"image_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "ImageCollectionOutput",
				"type": "object"
			},
			"ImageConvertInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Converts an image to a different mode.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to convert",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mode": {
						"default": "L",
						"description": "The mode to convert to",
						"enum": [
							"L",
							"RGB",
							"RGBA",
							"CMYK",
							"YCbCr",
							"LAB",
							"HSV",
							"I",
							"F"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "L",
						"orig_required": false,
						"title": "Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_conv",
						"default": "img_conv",
						"enum": [
							"img_conv"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"convert"
				],
				"title": "Convert Image Mode",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageCropInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Crops an image to a specified box. The box can be outside of the image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to crop",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"x": {
						"default": 0,
						"description": "The left x coordinate of the crop rectangle",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X",
						"type": "integer",
						"ui_hidden": false
					},
					"y": {
						"default": 0,
						"description": "The top y coordinate of the crop rectangle",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y",
						"type": "integer",
						"ui_hidden": false
					},
					"width": {
						"default": 512,
						"description": "The width of the crop rectangle",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 512,
						"description": "The height of the crop rectangle",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_crop",
						"default": "img_crop",
						"enum": [
							"img_crop"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"crop"
				],
				"title": "Crop Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageDTO": {
				"properties": {
					"image_name": {
						"type": "string",
						"title": "Image Name",
						"description": "The unique name of the image."
					},
					"image_url": {
						"type": "string",
						"title": "Image Url",
						"description": "The URL of the image."
					},
					"thumbnail_url": {
						"type": "string",
						"title": "Thumbnail Url",
						"description": "The URL of the image's thumbnail."
					},
					"image_origin": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ResourceOrigin"
							}
						],
						"description": "The type of the image."
					},
					"image_category": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageCategory"
							}
						],
						"description": "The category of the image."
					},
					"width": {
						"type": "integer",
						"title": "Width",
						"description": "The width of the image in px."
					},
					"height": {
						"type": "integer",
						"title": "Height",
						"description": "The height of the image in px."
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "The created timestamp of the image."
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "The updated timestamp of the image."
					},
					"deleted_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Deleted At",
						"description": "The deleted timestamp of the image."
					},
					"is_intermediate": {
						"type": "boolean",
						"title": "Is Intermediate",
						"description": "Whether this is an intermediate image."
					},
					"session_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Session Id",
						"description": "The session ID that generated this image, if it is a generated image."
					},
					"node_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Node Id",
						"description": "The node ID that generated this image, if it is a generated image."
					},
					"starred": {
						"type": "boolean",
						"title": "Starred",
						"description": "Whether this image is starred."
					},
					"has_workflow": {
						"type": "boolean",
						"title": "Has Workflow",
						"description": "Whether this image has a workflow."
					},
					"board_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Board Id",
						"description": "The id of the board the image belongs to, if one exists."
					}
				},
				"type": "object",
				"required": [
					"image_name",
					"image_url",
					"thumbnail_url",
					"image_origin",
					"image_category",
					"width",
					"height",
					"created_at",
					"updated_at",
					"is_intermediate",
					"starred",
					"has_workflow"
				],
				"title": "ImageDTO",
				"description": "Deserialized image record, enriched for the frontend."
			},
			"ImageField": {
				"description": "An image primitive field",
				"properties": {
					"image_name": {
						"description": "The name of the image",
						"title": "Image Name",
						"type": "string"
					}
				},
				"required": [
					"image_name"
				],
				"title": "ImageField",
				"type": "object"
			},
			"ImageHueAdjustmentInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Adjusts the Hue of an image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to adjust",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"hue": {
						"default": 0,
						"description": "The degrees by which to rotate the hue, 0-360",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Hue",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_hue_adjust",
						"default": "img_hue_adjust",
						"enum": [
							"img_hue_adjust"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"hue"
				],
				"title": "Adjust Image Hue",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageInverseLerpInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Inverse linear interpolation of all pixels of an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to lerp",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"min": {
						"default": 0,
						"description": "The minimum input value",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Min",
						"type": "integer",
						"ui_hidden": false
					},
					"max": {
						"default": 255,
						"description": "The maximum input value",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 255,
						"orig_required": false,
						"title": "Max",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_ilerp",
						"default": "img_ilerp",
						"enum": [
							"img_ilerp"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"ilerp"
				],
				"title": "Inverse Lerp Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "An image primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "image",
						"default": "image",
						"enum": [
							"image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"image"
				],
				"title": "Image Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageLerpInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Linear interpolation of all pixels of an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to lerp",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"min": {
						"default": 0,
						"description": "The minimum output value",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Min",
						"type": "integer",
						"ui_hidden": false
					},
					"max": {
						"default": 255,
						"description": "The maximum output value",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 255,
						"orig_required": false,
						"title": "Max",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "img_lerp",
						"default": "img_lerp",
						"enum": [
							"img_lerp"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"lerp"
				],
				"title": "Lerp Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageMaskToTensorInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Convert a mask image to a tensor. Converts the image to grayscale and uses thresholding at the specified value.",
				"node_pack": "invokeai",
				"properties": {
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The mask image to convert.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"cutoff": {
						"default": 128,
						"description": "Cutoff (<)",
						"field_kind": "input",
						"input": "any",
						"maximum": 255,
						"minimum": 0,
						"orig_default": 128,
						"orig_required": false,
						"title": "Cutoff",
						"type": "integer",
						"ui_hidden": false
					},
					"invert": {
						"default": false,
						"description": "Whether to invert the mask.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "image_mask_to_tensor",
						"default": "image_mask_to_tensor",
						"enum": [
							"image_mask_to_tensor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"conditioning"
				],
				"title": "Image Mask to Tensor",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/MaskOutput"
				}
			},
			"ImageMultiplyInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Multiplies two images together using `PIL.ImageChops.multiply()`.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image1": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The first image to multiply",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"image2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The second image to multiply",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "img_mul",
						"default": "img_mul",
						"enum": [
							"img_mul"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"multiply"
				],
				"title": "Multiply Images",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageNSFWBlurInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Add blur to NSFW-flagged images",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to check",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "img_nsfw",
						"default": "img_nsfw",
						"enum": [
							"img_nsfw"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"nsfw"
				],
				"title": "Blur NSFW Image",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single image",
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The output image",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "The width of the image in pixels",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The height of the image in pixels",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "image_output",
						"default": "image_output",
						"enum": [
							"image_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"image",
					"width",
					"height",
					"type",
					"type"
				],
				"title": "ImageOutput",
				"type": "object"
			},
			"ImagePasteInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Pastes an image into another image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"base_image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The base image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to paste",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The mask to use when pasting",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"x": {
						"default": 0,
						"description": "The left x coordinate at which to paste the image",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "X",
						"type": "integer",
						"ui_hidden": false
					},
					"y": {
						"default": 0,
						"description": "The top y coordinate at which to paste the image",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Y",
						"type": "integer",
						"ui_hidden": false
					},
					"crop": {
						"default": false,
						"description": "Crop to base image dimensions",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Crop",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "img_paste",
						"default": "img_paste",
						"enum": [
							"img_paste"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"paste"
				],
				"title": "Paste Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageRecordChanges": {
				"properties": {
					"image_category": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageCategory"
							},
							{
								"type": "null"
							}
						],
						"description": "The image's new category."
					},
					"session_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Session Id",
						"description": "The image's new session ID."
					},
					"is_intermediate": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Is Intermediate",
						"description": "The image's new `is_intermediate` flag."
					},
					"starred": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Starred",
						"description": "The image's new `starred` state"
					}
				},
				"additionalProperties": true,
				"type": "object",
				"title": "ImageRecordChanges",
				"description": "A set of changes to apply to an image record.\n\nOnly limited changes are valid:\n  - `image_category`: change the category of an image\n  - `session_id`: change the session associated with an image\n  - `is_intermediate`: change the image's `is_intermediate` flag\n  - `starred`: change whether the image is starred"
			},
			"ImageResizeInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Resizes an image to specific dimensions",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to resize",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"width": {
						"default": 512,
						"description": "The width to resize to (px)",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 512,
						"description": "The height to resize to (px)",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"resample_mode": {
						"default": "bicubic",
						"description": "The resampling mode",
						"enum": [
							"nearest",
							"box",
							"bilinear",
							"hamming",
							"bicubic",
							"lanczos"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "bicubic",
						"orig_required": false,
						"title": "Resample Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_resize",
						"default": "img_resize",
						"enum": [
							"img_resize"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"resize"
				],
				"title": "Resize Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageScaleInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Scales an image by a factor",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to scale",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"scale_factor": {
						"default": 2,
						"description": "The factor by which to scale the image",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 2,
						"orig_required": false,
						"title": "Scale Factor",
						"type": "number",
						"ui_hidden": false
					},
					"resample_mode": {
						"default": "bicubic",
						"description": "The resampling mode",
						"enum": [
							"nearest",
							"box",
							"bilinear",
							"hamming",
							"bicubic",
							"lanczos"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "bicubic",
						"orig_required": false,
						"title": "Resample Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_scale",
						"default": "img_scale",
						"enum": [
							"img_scale"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"scale"
				],
				"title": "Scale Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImageToLatentsInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Encodes an image into latents.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to encode",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"tiled": {
						"default": false,
						"description": "Processing using overlapping tiles (reduce memory consumption)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Tiled",
						"type": "boolean",
						"ui_hidden": false
					},
					"tile_size": {
						"default": 0,
						"description": "The tile size for VAE tiling in pixels (image space). If set to 0, the default tile size for the model will be used. Larger tile sizes generally produce better results at the cost of higher memory usage.",
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 0,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"fp32": {
						"default": false,
						"description": "Whether or not to use full float32 precision",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Fp32",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "i2l",
						"default": "i2l",
						"enum": [
							"i2l"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"image",
					"vae",
					"i2l"
				],
				"title": "Image to Latents",
				"type": "object",
				"version": "1.1.0",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"ImageUrlsDTO": {
				"properties": {
					"image_name": {
						"type": "string",
						"title": "Image Name",
						"description": "The unique name of the image."
					},
					"image_url": {
						"type": "string",
						"title": "Image Url",
						"description": "The URL of the image."
					},
					"thumbnail_url": {
						"type": "string",
						"title": "Thumbnail Url",
						"description": "The URL of the image's thumbnail."
					}
				},
				"type": "object",
				"required": [
					"image_name",
					"image_url",
					"thumbnail_url"
				],
				"title": "ImageUrlsDTO",
				"description": "The URLs for an image and its thumbnail."
			},
			"ImageWatermarkInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Add an invisible watermark to an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to check",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"text": {
						"default": "InvokeAI",
						"description": "Watermark text",
						"field_kind": "input",
						"input": "any",
						"orig_default": "InvokeAI",
						"orig_required": false,
						"title": "Text",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "img_watermark",
						"default": "img_watermark",
						"enum": [
							"img_watermark"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"watermark"
				],
				"title": "Add Invisible Watermark",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ImagesDownloaded": {
				"properties": {
					"response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Response",
						"description": "The message to display to the user when images begin downloading"
					},
					"bulk_download_item_name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Bulk Download Item Name",
						"description": "The name of the bulk download item for which events will be emitted"
					}
				},
				"type": "object",
				"title": "ImagesDownloaded"
			},
			"ImagesUpdatedFromListResult": {
				"properties": {
					"updated_image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Updated Image Names",
						"description": "The image names that were updated"
					}
				},
				"type": "object",
				"required": [
					"updated_image_names"
				],
				"title": "ImagesUpdatedFromListResult"
			},
			"InfillColorInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Infills transparent areas of an image with a solid color",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"color": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ColorField"
							}
						],
						"default": {
							"r": 127,
							"g": 127,
							"b": 127,
							"a": 255
						},
						"description": "The color to use to infill",
						"field_kind": "input",
						"input": "any",
						"orig_default": {
							"a": 255,
							"b": 127,
							"g": 127,
							"r": 127
						},
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "infill_rgba",
						"default": "infill_rgba",
						"enum": [
							"infill_rgba"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"inpaint"
				],
				"title": "Solid Color Infill",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"InfillPatchMatchInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Infills transparent areas of an image using the PatchMatch algorithm",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"downscale": {
						"default": 2,
						"description": "Run patchmatch on downscaled image to speedup infill",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 2,
						"orig_required": false,
						"title": "Downscale",
						"type": "number",
						"ui_hidden": false
					},
					"resample_mode": {
						"default": "bicubic",
						"description": "The resampling mode",
						"enum": [
							"nearest",
							"box",
							"bilinear",
							"hamming",
							"bicubic",
							"lanczos"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "bicubic",
						"orig_required": false,
						"title": "Resample Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "infill_patchmatch",
						"default": "infill_patchmatch",
						"enum": [
							"infill_patchmatch"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"inpaint"
				],
				"title": "PatchMatch Infill",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"InfillTileInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Infills transparent areas of an image with tiles of the image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"tile_size": {
						"default": 32,
						"description": "The tile size (px)",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 32,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"seed": {
						"default": 0,
						"description": "The seed to use for tile generation (omit for random)",
						"field_kind": "input",
						"input": "any",
						"maximum": 4294967295,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Seed",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "infill_tile",
						"default": "infill_tile",
						"enum": [
							"infill_tile"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"inpaint"
				],
				"title": "Tile Infill",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"Input": {
				"description": "The type of input a field accepts.\n- `Input.Direct`: The field must have its value provided directly, when the invocation and field       are instantiated.\n- `Input.Connection`: The field must have its value provided by a connection.\n- `Input.Any`: The field may have its value provided either directly or by a connection.",
				"enum": [
					"connection",
					"direct",
					"any"
				],
				"title": "Input",
				"type": "string"
			},
			"InputFieldJSONSchemaExtra": {
				"description": "Extra attributes to be added to input fields and their OpenAPI schema. Used during graph execution,\nand by the workflow editor during schema parsing and UI rendering.",
				"properties": {
					"input": {
						"$ref": "#/components/schemas/Input"
					},
					"orig_required": {
						"title": "Orig Required",
						"type": "boolean"
					},
					"field_kind": {
						"$ref": "#/components/schemas/FieldKind"
					},
					"default": {
						"anyOf": [
							{},
							{
								"type": "null"
							}
						],
						"default": null,
						"title": "Default"
					},
					"orig_default": {
						"anyOf": [
							{},
							{
								"type": "null"
							}
						],
						"default": null,
						"title": "Orig Default"
					},
					"ui_hidden": {
						"default": false,
						"title": "Ui Hidden",
						"type": "boolean"
					},
					"ui_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UIType"
							},
							{
								"type": "null"
							}
						],
						"default": null
					},
					"ui_component": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UIComponent"
							},
							{
								"type": "null"
							}
						],
						"default": null
					},
					"ui_order": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"title": "Ui Order"
					},
					"ui_choice_labels": {
						"anyOf": [
							{
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"title": "Ui Choice Labels"
					}
				},
				"required": [
					"input",
					"orig_required",
					"field_kind",
					"default",
					"orig_default",
					"ui_hidden",
					"ui_type",
					"ui_component",
					"ui_order",
					"ui_choice_labels"
				],
				"title": "InputFieldJSONSchemaExtra",
				"type": "object"
			},
			"InstallStatus": {
				"type": "string",
				"enum": [
					"waiting",
					"downloading",
					"downloads_done",
					"running",
					"completed",
					"error",
					"cancelled"
				],
				"title": "InstallStatus",
				"description": "State of an install job running in the background."
			},
			"IntegerCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of integer primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The collection of integer values",
						"field_kind": "input",
						"input": "any",
						"items": {
							"type": "integer"
						},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "integer_collection",
						"default": "integer_collection",
						"enum": [
							"integer_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"integer",
					"collection"
				],
				"title": "Integer Collection Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/IntegerCollectionOutput"
				}
			},
			"IntegerCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of integers",
				"properties": {
					"collection": {
						"description": "The int collection",
						"field_kind": "output",
						"items": {
							"type": "integer"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "integer_collection_output",
						"default": "integer_collection_output",
						"enum": [
							"integer_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "IntegerCollectionOutput",
				"type": "object"
			},
			"IntegerInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "An integer primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": 0,
						"description": "The integer value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Value",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "integer",
						"default": "integer",
						"enum": [
							"integer"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"integer"
				],
				"title": "Integer Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"IntegerMathInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Performs integer math.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"operation": {
						"default": "ADD",
						"description": "The operation to perform",
						"enum": [
							"ADD",
							"SUB",
							"MUL",
							"DIV",
							"EXP",
							"MOD",
							"ABS",
							"MIN",
							"MAX"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "ADD",
						"orig_required": false,
						"title": "Operation",
						"type": "string",
						"ui_choice_labels": {
							"ABS": "Absolute Value of A",
							"ADD": "Add A+B",
							"DIV": "Divide A/B",
							"EXP": "Exponentiate A^B",
							"MAX": "Maximum(A,B)",
							"MIN": "Minimum(A,B)",
							"MOD": "Modulus A%B",
							"MUL": "Multiply A*B",
							"SUB": "Subtract A-B"
						},
						"ui_hidden": false
					},
					"a": {
						"default": 1,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "A",
						"type": "integer",
						"ui_hidden": false
					},
					"b": {
						"default": 1,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "B",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "integer_math",
						"default": "integer_math",
						"enum": [
							"integer_math"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"integer",
					"add",
					"subtract",
					"multiply",
					"divide",
					"modulus",
					"power",
					"absolute value",
					"min",
					"max"
				],
				"title": "Integer Math",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"IntegerOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single integer",
				"properties": {
					"value": {
						"description": "The output integer",
						"field_kind": "output",
						"title": "Value",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "integer_output",
						"default": "integer_output",
						"enum": [
							"integer_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"value",
					"type",
					"type"
				],
				"title": "IntegerOutput",
				"type": "object"
			},
			"InvertTensorMaskInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "beta",
				"description": "Inverts a tensor mask.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							}
						],
						"default": null,
						"description": "The tensor mask to convert.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "invert_tensor_mask",
						"default": "invert_tensor_mask",
						"enum": [
							"invert_tensor_mask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"conditioning"
				],
				"title": "Invert Tensor Mask",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/MaskOutput"
				}
			},
			"InvocationCacheStatus": {
				"properties": {
					"size": {
						"type": "integer",
						"title": "Size",
						"description": "The current size of the invocation cache"
					},
					"hits": {
						"type": "integer",
						"title": "Hits",
						"description": "The number of cache hits"
					},
					"misses": {
						"type": "integer",
						"title": "Misses",
						"description": "The number of cache misses"
					},
					"enabled": {
						"type": "boolean",
						"title": "Enabled",
						"description": "Whether the invocation cache is enabled"
					},
					"max_size": {
						"type": "integer",
						"title": "Max Size",
						"description": "The maximum size of the invocation cache"
					}
				},
				"type": "object",
				"required": [
					"size",
					"hits",
					"misses",
					"enabled",
					"max_size"
				],
				"title": "InvocationCacheStatus"
			},
			"InvocationCompleteEvent": {
				"description": "Event model for invocation_complete",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"item_id": {
						"description": "The ID of the queue item",
						"title": "Item Id",
						"type": "integer"
					},
					"batch_id": {
						"description": "The ID of the queue batch",
						"title": "Batch Id",
						"type": "string"
					},
					"session_id": {
						"description": "The ID of the session (aka graph execution state)",
						"title": "Session Id",
						"type": "string"
					},
					"invocation": {
						"description": "The ID of the invocation",
						"oneOf": [
							{
								"$ref": "#/components/schemas/AddInvocation"
							},
							{
								"$ref": "#/components/schemas/AlphaMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/BlankImageInvocation"
							},
							{
								"$ref": "#/components/schemas/BlendLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanInvocation"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxInvocation"
							},
							{
								"$ref": "#/components/schemas/CLIPSkipInvocation"
							},
							{
								"$ref": "#/components/schemas/CV2InfillInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesEvenSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesMinimumOverlapInvocation"
							},
							{
								"$ref": "#/components/schemas/CannyImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CanvasPasteBackInvocation"
							},
							{
								"$ref": "#/components/schemas/CenterPadCropInvocation"
							},
							{
								"$ref": "#/components/schemas/CollectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorCorrectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorMapImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CompelInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningInvocation"
							},
							{
								"$ref": "#/components/schemas/ContentShuffleImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ControlNetInvocation"
							},
							{
								"$ref": "#/components/schemas/CoreMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateDenoiseMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateGradientMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CropLatentsCoreInvocation"
							},
							{
								"$ref": "#/components/schemas/CvInpaintInvocation"
							},
							{
								"$ref": "#/components/schemas/DWOpenposeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DenoiseLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/DepthAnythingImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DivideInvocation"
							},
							{
								"$ref": "#/components/schemas/DynamicPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/ESRGANInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceOffInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatLinearRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatMathInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatToIntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxDenoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxTextEncoderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeDecodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeEncodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FreeUInvocation"
							},
							{
								"$ref": "#/components/schemas/GroundingDinoInvocation"
							},
							{
								"$ref": "#/components/schemas/HedImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/HeuristicResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/IdealSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelOffsetInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageConvertInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCropInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageHueAdjustmentInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInverseLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageNSFWBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImagePasteInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageScaleInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageToLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageWatermarkInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillColorInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillPatchMatchInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillTileInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerMathInvocation"
							},
							{
								"$ref": "#/components/schemas/InvertTensorMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/IterateInvocation"
							},
							{
								"$ref": "#/components/schemas/LaMaInfillInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/LeresImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartAnimeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/LoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRASelectorInvocation"
							},
							{
								"$ref": "#/components/schemas/MainModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskCombineInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskEdgeInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromAlphaInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromIDInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskTensorToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MediapipeFaceProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeTilesToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataItemInvocation"
							},
							{
								"$ref": "#/components/schemas/MidasDepthImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MlsdImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ModelIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/MultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/NoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/NormalbaeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PairTileImageInvocation"
							},
							{
								"$ref": "#/components/schemas/PidiImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PromptsFromFileInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomFloatInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomIntInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeOfSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/RectangleMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/ResizeLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/RoundInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SaveImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ScaleLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/SchedulerInvocation"
							},
							{
								"$ref": "#/components/schemas/SeamlessModeInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ShowImageInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageAutoscaleInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/StepParamEasingInvocation"
							},
							{
								"$ref": "#/components/schemas/StringCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/StringInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinThreeInvocation"
							},
							{
								"$ref": "#/components/schemas/StringReplaceInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitNegInvocation"
							},
							{
								"$ref": "#/components/schemas/SubtractInvocation"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/TileResamplerProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/TileToPropertiesInvocation"
							},
							{
								"$ref": "#/components/schemas/TiledMultiDiffusionDenoiseLatents"
							},
							{
								"$ref": "#/components/schemas/UnsharpMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/VAELoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/ZoeDepthImageProcessorInvocation"
							}
						],
						"title": "Invocation"
					},
					"invocation_source_id": {
						"description": "The ID of the prepared invocation's source node",
						"title": "Invocation Source Id",
						"type": "string"
					},
					"result": {
						"description": "The result of the invocation",
						"oneOf": [
							{
								"$ref": "#/components/schemas/BooleanCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/BooleanOutput"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxOutput"
							},
							{
								"$ref": "#/components/schemas/CLIPOutput"
							},
							{
								"$ref": "#/components/schemas/CLIPSkipInvocationOutput"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesOutput"
							},
							{
								"$ref": "#/components/schemas/CollectInvocationOutput"
							},
							{
								"$ref": "#/components/schemas/ColorCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/ColorOutput"
							},
							{
								"$ref": "#/components/schemas/ConditioningCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/ConditioningOutput"
							},
							{
								"$ref": "#/components/schemas/ControlOutput"
							},
							{
								"$ref": "#/components/schemas/DenoiseMaskOutput"
							},
							{
								"$ref": "#/components/schemas/FaceMaskOutput"
							},
							{
								"$ref": "#/components/schemas/FaceOffOutput"
							},
							{
								"$ref": "#/components/schemas/FloatCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/FloatOutput"
							},
							{
								"$ref": "#/components/schemas/FluxConditioningOutput"
							},
							{
								"$ref": "#/components/schemas/FluxModelLoaderOutput"
							},
							{
								"$ref": "#/components/schemas/GradientMaskOutput"
							},
							{
								"$ref": "#/components/schemas/IPAdapterOutput"
							},
							{
								"$ref": "#/components/schemas/IdealSizeOutput"
							},
							{
								"$ref": "#/components/schemas/ImageCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/ImageOutput"
							},
							{
								"$ref": "#/components/schemas/IntegerCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/IntegerOutput"
							},
							{
								"$ref": "#/components/schemas/IterateInvocationOutput"
							},
							{
								"$ref": "#/components/schemas/LatentsCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/LatentsOutput"
							},
							{
								"$ref": "#/components/schemas/LoRALoaderOutput"
							},
							{
								"$ref": "#/components/schemas/LoRASelectorOutput"
							},
							{
								"$ref": "#/components/schemas/MaskOutput"
							},
							{
								"$ref": "#/components/schemas/MetadataItemOutput"
							},
							{
								"$ref": "#/components/schemas/MetadataOutput"
							},
							{
								"$ref": "#/components/schemas/ModelIdentifierOutput"
							},
							{
								"$ref": "#/components/schemas/ModelLoaderOutput"
							},
							{
								"$ref": "#/components/schemas/NoiseOutput"
							},
							{
								"$ref": "#/components/schemas/PairTileImageOutput"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
							},
							{
								"$ref": "#/components/schemas/SDXLModelLoaderOutput"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerModelLoaderOutput"
							},
							{
								"$ref": "#/components/schemas/SchedulerOutput"
							},
							{
								"$ref": "#/components/schemas/SeamlessModeOutput"
							},
							{
								"$ref": "#/components/schemas/String2Output"
							},
							{
								"$ref": "#/components/schemas/StringCollectionOutput"
							},
							{
								"$ref": "#/components/schemas/StringOutput"
							},
							{
								"$ref": "#/components/schemas/StringPosNegOutput"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterOutput"
							},
							{
								"$ref": "#/components/schemas/TileToPropertiesOutput"
							},
							{
								"$ref": "#/components/schemas/UNetOutput"
							},
							{
								"$ref": "#/components/schemas/VAEOutput"
							}
						],
						"title": "Result"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"item_id",
					"batch_id",
					"session_id",
					"invocation",
					"invocation_source_id",
					"result"
				],
				"title": "InvocationCompleteEvent",
				"type": "object"
			},
			"InvocationDenoiseProgressEvent": {
				"description": "Event model for invocation_denoise_progress",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"item_id": {
						"description": "The ID of the queue item",
						"title": "Item Id",
						"type": "integer"
					},
					"batch_id": {
						"description": "The ID of the queue batch",
						"title": "Batch Id",
						"type": "string"
					},
					"session_id": {
						"description": "The ID of the session (aka graph execution state)",
						"title": "Session Id",
						"type": "string"
					},
					"invocation": {
						"description": "The ID of the invocation",
						"oneOf": [
							{
								"$ref": "#/components/schemas/AddInvocation"
							},
							{
								"$ref": "#/components/schemas/AlphaMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/BlankImageInvocation"
							},
							{
								"$ref": "#/components/schemas/BlendLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanInvocation"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxInvocation"
							},
							{
								"$ref": "#/components/schemas/CLIPSkipInvocation"
							},
							{
								"$ref": "#/components/schemas/CV2InfillInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesEvenSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesMinimumOverlapInvocation"
							},
							{
								"$ref": "#/components/schemas/CannyImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CanvasPasteBackInvocation"
							},
							{
								"$ref": "#/components/schemas/CenterPadCropInvocation"
							},
							{
								"$ref": "#/components/schemas/CollectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorCorrectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorMapImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CompelInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningInvocation"
							},
							{
								"$ref": "#/components/schemas/ContentShuffleImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ControlNetInvocation"
							},
							{
								"$ref": "#/components/schemas/CoreMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateDenoiseMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateGradientMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CropLatentsCoreInvocation"
							},
							{
								"$ref": "#/components/schemas/CvInpaintInvocation"
							},
							{
								"$ref": "#/components/schemas/DWOpenposeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DenoiseLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/DepthAnythingImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DivideInvocation"
							},
							{
								"$ref": "#/components/schemas/DynamicPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/ESRGANInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceOffInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatLinearRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatMathInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatToIntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxDenoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxTextEncoderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeDecodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeEncodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FreeUInvocation"
							},
							{
								"$ref": "#/components/schemas/GroundingDinoInvocation"
							},
							{
								"$ref": "#/components/schemas/HedImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/HeuristicResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/IdealSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelOffsetInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageConvertInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCropInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageHueAdjustmentInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInverseLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageNSFWBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImagePasteInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageScaleInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageToLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageWatermarkInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillColorInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillPatchMatchInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillTileInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerMathInvocation"
							},
							{
								"$ref": "#/components/schemas/InvertTensorMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/IterateInvocation"
							},
							{
								"$ref": "#/components/schemas/LaMaInfillInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/LeresImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartAnimeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/LoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRASelectorInvocation"
							},
							{
								"$ref": "#/components/schemas/MainModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskCombineInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskEdgeInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromAlphaInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromIDInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskTensorToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MediapipeFaceProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeTilesToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataItemInvocation"
							},
							{
								"$ref": "#/components/schemas/MidasDepthImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MlsdImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ModelIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/MultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/NoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/NormalbaeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PairTileImageInvocation"
							},
							{
								"$ref": "#/components/schemas/PidiImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PromptsFromFileInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomFloatInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomIntInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeOfSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/RectangleMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/ResizeLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/RoundInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SaveImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ScaleLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/SchedulerInvocation"
							},
							{
								"$ref": "#/components/schemas/SeamlessModeInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ShowImageInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageAutoscaleInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/StepParamEasingInvocation"
							},
							{
								"$ref": "#/components/schemas/StringCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/StringInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinThreeInvocation"
							},
							{
								"$ref": "#/components/schemas/StringReplaceInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitNegInvocation"
							},
							{
								"$ref": "#/components/schemas/SubtractInvocation"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/TileResamplerProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/TileToPropertiesInvocation"
							},
							{
								"$ref": "#/components/schemas/TiledMultiDiffusionDenoiseLatents"
							},
							{
								"$ref": "#/components/schemas/UnsharpMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/VAELoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/ZoeDepthImageProcessorInvocation"
							}
						],
						"title": "Invocation"
					},
					"invocation_source_id": {
						"description": "The ID of the prepared invocation's source node",
						"title": "Invocation Source Id",
						"type": "string"
					},
					"progress_image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProgressImage"
							}
						],
						"description": "The progress image sent at each step during processing"
					},
					"step": {
						"description": "The current step of the invocation",
						"title": "Step",
						"type": "integer"
					},
					"total_steps": {
						"description": "The total number of steps in the invocation",
						"title": "Total Steps",
						"type": "integer"
					},
					"order": {
						"description": "The order of the invocation in the session",
						"title": "Order",
						"type": "integer"
					},
					"percentage": {
						"description": "The percentage of completion of the invocation",
						"title": "Percentage",
						"type": "number"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"item_id",
					"batch_id",
					"session_id",
					"invocation",
					"invocation_source_id",
					"progress_image",
					"step",
					"total_steps",
					"order",
					"percentage"
				],
				"title": "InvocationDenoiseProgressEvent",
				"type": "object"
			},
			"InvocationErrorEvent": {
				"description": "Event model for invocation_error",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"item_id": {
						"description": "The ID of the queue item",
						"title": "Item Id",
						"type": "integer"
					},
					"batch_id": {
						"description": "The ID of the queue batch",
						"title": "Batch Id",
						"type": "string"
					},
					"session_id": {
						"description": "The ID of the session (aka graph execution state)",
						"title": "Session Id",
						"type": "string"
					},
					"invocation": {
						"description": "The ID of the invocation",
						"oneOf": [
							{
								"$ref": "#/components/schemas/AddInvocation"
							},
							{
								"$ref": "#/components/schemas/AlphaMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/BlankImageInvocation"
							},
							{
								"$ref": "#/components/schemas/BlendLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanInvocation"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxInvocation"
							},
							{
								"$ref": "#/components/schemas/CLIPSkipInvocation"
							},
							{
								"$ref": "#/components/schemas/CV2InfillInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesEvenSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesMinimumOverlapInvocation"
							},
							{
								"$ref": "#/components/schemas/CannyImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CanvasPasteBackInvocation"
							},
							{
								"$ref": "#/components/schemas/CenterPadCropInvocation"
							},
							{
								"$ref": "#/components/schemas/CollectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorCorrectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorMapImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CompelInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningInvocation"
							},
							{
								"$ref": "#/components/schemas/ContentShuffleImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ControlNetInvocation"
							},
							{
								"$ref": "#/components/schemas/CoreMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateDenoiseMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateGradientMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CropLatentsCoreInvocation"
							},
							{
								"$ref": "#/components/schemas/CvInpaintInvocation"
							},
							{
								"$ref": "#/components/schemas/DWOpenposeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DenoiseLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/DepthAnythingImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DivideInvocation"
							},
							{
								"$ref": "#/components/schemas/DynamicPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/ESRGANInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceOffInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatLinearRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatMathInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatToIntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxDenoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxTextEncoderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeDecodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeEncodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FreeUInvocation"
							},
							{
								"$ref": "#/components/schemas/GroundingDinoInvocation"
							},
							{
								"$ref": "#/components/schemas/HedImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/HeuristicResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/IdealSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelOffsetInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageConvertInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCropInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageHueAdjustmentInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInverseLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageNSFWBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImagePasteInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageScaleInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageToLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageWatermarkInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillColorInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillPatchMatchInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillTileInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerMathInvocation"
							},
							{
								"$ref": "#/components/schemas/InvertTensorMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/IterateInvocation"
							},
							{
								"$ref": "#/components/schemas/LaMaInfillInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/LeresImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartAnimeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/LoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRASelectorInvocation"
							},
							{
								"$ref": "#/components/schemas/MainModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskCombineInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskEdgeInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromAlphaInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromIDInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskTensorToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MediapipeFaceProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeTilesToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataItemInvocation"
							},
							{
								"$ref": "#/components/schemas/MidasDepthImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MlsdImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ModelIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/MultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/NoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/NormalbaeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PairTileImageInvocation"
							},
							{
								"$ref": "#/components/schemas/PidiImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PromptsFromFileInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomFloatInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomIntInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeOfSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/RectangleMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/ResizeLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/RoundInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SaveImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ScaleLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/SchedulerInvocation"
							},
							{
								"$ref": "#/components/schemas/SeamlessModeInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ShowImageInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageAutoscaleInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/StepParamEasingInvocation"
							},
							{
								"$ref": "#/components/schemas/StringCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/StringInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinThreeInvocation"
							},
							{
								"$ref": "#/components/schemas/StringReplaceInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitNegInvocation"
							},
							{
								"$ref": "#/components/schemas/SubtractInvocation"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/TileResamplerProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/TileToPropertiesInvocation"
							},
							{
								"$ref": "#/components/schemas/TiledMultiDiffusionDenoiseLatents"
							},
							{
								"$ref": "#/components/schemas/UnsharpMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/VAELoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/ZoeDepthImageProcessorInvocation"
							}
						],
						"title": "Invocation"
					},
					"invocation_source_id": {
						"description": "The ID of the prepared invocation's source node",
						"title": "Invocation Source Id",
						"type": "string"
					},
					"error_type": {
						"description": "The error type",
						"title": "Error Type",
						"type": "string"
					},
					"error_message": {
						"description": "The error message",
						"title": "Error Message",
						"type": "string"
					},
					"error_traceback": {
						"description": "The error traceback",
						"title": "Error Traceback",
						"type": "string"
					},
					"user_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The ID of the user who created the invocation",
						"title": "User Id"
					},
					"project_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The ID of the user who created the invocation",
						"title": "Project Id"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"item_id",
					"batch_id",
					"session_id",
					"invocation",
					"invocation_source_id",
					"error_type",
					"error_message",
					"error_traceback",
					"user_id",
					"project_id"
				],
				"title": "InvocationErrorEvent",
				"type": "object"
			},
			"InvocationOutputMap": {
				"type": "object",
				"properties": {
					"add": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"alpha_mask_to_tensor": {
						"$ref": "#/components/schemas/MaskOutput"
					},
					"blank_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"boolean": {
						"$ref": "#/components/schemas/BooleanOutput"
					},
					"boolean_collection": {
						"$ref": "#/components/schemas/BooleanCollectionOutput"
					},
					"bounding_box": {
						"$ref": "#/components/schemas/BoundingBoxOutput"
					},
					"calculate_image_tiles": {
						"$ref": "#/components/schemas/CalculateImageTilesOutput"
					},
					"calculate_image_tiles_even_split": {
						"$ref": "#/components/schemas/CalculateImageTilesOutput"
					},
					"calculate_image_tiles_min_overlap": {
						"$ref": "#/components/schemas/CalculateImageTilesOutput"
					},
					"canny_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"canvas_paste_back": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"clip_skip": {
						"$ref": "#/components/schemas/CLIPSkipInvocationOutput"
					},
					"collect": {
						"$ref": "#/components/schemas/CollectInvocationOutput"
					},
					"color": {
						"$ref": "#/components/schemas/ColorOutput"
					},
					"color_correct": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"color_map_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"compel": {
						"$ref": "#/components/schemas/ConditioningOutput"
					},
					"conditioning": {
						"$ref": "#/components/schemas/ConditioningOutput"
					},
					"conditioning_collection": {
						"$ref": "#/components/schemas/ConditioningCollectionOutput"
					},
					"content_shuffle_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"controlnet": {
						"$ref": "#/components/schemas/ControlOutput"
					},
					"core_metadata": {
						"$ref": "#/components/schemas/MetadataOutput"
					},
					"create_denoise_mask": {
						"$ref": "#/components/schemas/DenoiseMaskOutput"
					},
					"create_gradient_mask": {
						"$ref": "#/components/schemas/GradientMaskOutput"
					},
					"crop_latents": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"cv_inpaint": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"denoise_latents": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"depth_anything_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"div": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"dw_openpose_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"dynamic_prompt": {
						"$ref": "#/components/schemas/StringCollectionOutput"
					},
					"esrgan": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"face_identifier": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"face_mask_detection": {
						"$ref": "#/components/schemas/FaceMaskOutput"
					},
					"face_off": {
						"$ref": "#/components/schemas/FaceOffOutput"
					},
					"float": {
						"$ref": "#/components/schemas/FloatOutput"
					},
					"float_collection": {
						"$ref": "#/components/schemas/FloatCollectionOutput"
					},
					"float_math": {
						"$ref": "#/components/schemas/FloatOutput"
					},
					"float_range": {
						"$ref": "#/components/schemas/FloatCollectionOutput"
					},
					"float_to_int": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"flux_denoise": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"flux_model_loader": {
						"$ref": "#/components/schemas/FluxModelLoaderOutput"
					},
					"flux_text_encoder": {
						"$ref": "#/components/schemas/FluxConditioningOutput"
					},
					"flux_vae_decode": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"flux_vae_encode": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"freeu": {
						"$ref": "#/components/schemas/UNetOutput"
					},
					"grounding_dino": {
						"$ref": "#/components/schemas/BoundingBoxCollectionOutput"
					},
					"hed_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"heuristic_resize": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"i2l": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"ideal_size": {
						"$ref": "#/components/schemas/IdealSizeOutput"
					},
					"image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"image_collection": {
						"$ref": "#/components/schemas/ImageCollectionOutput"
					},
					"image_mask_to_tensor": {
						"$ref": "#/components/schemas/MaskOutput"
					},
					"img_blur": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_chan": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_channel_multiply": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_channel_offset": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_conv": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_crop": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_hue_adjust": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_ilerp": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_lerp": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_mul": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_nsfw": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_pad_crop": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_paste": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_resize": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_scale": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"img_watermark": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"infill_cv2": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"infill_lama": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"infill_patchmatch": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"infill_rgba": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"infill_tile": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"integer": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"integer_collection": {
						"$ref": "#/components/schemas/IntegerCollectionOutput"
					},
					"integer_math": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"invert_tensor_mask": {
						"$ref": "#/components/schemas/MaskOutput"
					},
					"ip_adapter": {
						"$ref": "#/components/schemas/IPAdapterOutput"
					},
					"iterate": {
						"$ref": "#/components/schemas/IterateInvocationOutput"
					},
					"l2i": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"latents": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"latents_collection": {
						"$ref": "#/components/schemas/LatentsCollectionOutput"
					},
					"lblend": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"leres_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"lineart_anime_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"lineart_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"lora_collection_loader": {
						"$ref": "#/components/schemas/LoRALoaderOutput"
					},
					"lora_loader": {
						"$ref": "#/components/schemas/LoRALoaderOutput"
					},
					"lora_selector": {
						"$ref": "#/components/schemas/LoRASelectorOutput"
					},
					"lresize": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"lscale": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"main_model_loader": {
						"$ref": "#/components/schemas/ModelLoaderOutput"
					},
					"mask_combine": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"mask_edge": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"mask_from_id": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"mediapipe_face_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"merge_metadata": {
						"$ref": "#/components/schemas/MetadataOutput"
					},
					"merge_tiles_to_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"metadata": {
						"$ref": "#/components/schemas/MetadataOutput"
					},
					"metadata_item": {
						"$ref": "#/components/schemas/MetadataItemOutput"
					},
					"midas_depth_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"mlsd_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"model_identifier": {
						"$ref": "#/components/schemas/ModelIdentifierOutput"
					},
					"mul": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"noise": {
						"$ref": "#/components/schemas/NoiseOutput"
					},
					"normalbae_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"pair_tile_image": {
						"$ref": "#/components/schemas/PairTileImageOutput"
					},
					"pidi_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"prompt_from_file": {
						"$ref": "#/components/schemas/StringCollectionOutput"
					},
					"rand_float": {
						"$ref": "#/components/schemas/FloatOutput"
					},
					"rand_int": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"random_range": {
						"$ref": "#/components/schemas/IntegerCollectionOutput"
					},
					"range": {
						"$ref": "#/components/schemas/IntegerCollectionOutput"
					},
					"range_of_size": {
						"$ref": "#/components/schemas/IntegerCollectionOutput"
					},
					"rectangle_mask": {
						"$ref": "#/components/schemas/MaskOutput"
					},
					"round_float": {
						"$ref": "#/components/schemas/FloatOutput"
					},
					"save_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"scheduler": {
						"$ref": "#/components/schemas/SchedulerOutput"
					},
					"sdxl_compel_prompt": {
						"$ref": "#/components/schemas/ConditioningOutput"
					},
					"sdxl_lora_collection_loader": {
						"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
					},
					"sdxl_lora_loader": {
						"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
					},
					"sdxl_model_loader": {
						"$ref": "#/components/schemas/SDXLModelLoaderOutput"
					},
					"sdxl_refiner_compel_prompt": {
						"$ref": "#/components/schemas/ConditioningOutput"
					},
					"sdxl_refiner_model_loader": {
						"$ref": "#/components/schemas/SDXLRefinerModelLoaderOutput"
					},
					"seamless": {
						"$ref": "#/components/schemas/SeamlessModeOutput"
					},
					"segment_anything": {
						"$ref": "#/components/schemas/MaskOutput"
					},
					"segment_anything_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"show_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"spandrel_image_to_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"spandrel_image_to_image_autoscale": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"step_param_easing": {
						"$ref": "#/components/schemas/FloatCollectionOutput"
					},
					"string": {
						"$ref": "#/components/schemas/StringOutput"
					},
					"string_collection": {
						"$ref": "#/components/schemas/StringCollectionOutput"
					},
					"string_join": {
						"$ref": "#/components/schemas/StringOutput"
					},
					"string_join_three": {
						"$ref": "#/components/schemas/StringOutput"
					},
					"string_replace": {
						"$ref": "#/components/schemas/StringOutput"
					},
					"string_split": {
						"$ref": "#/components/schemas/String2Output"
					},
					"string_split_neg": {
						"$ref": "#/components/schemas/StringPosNegOutput"
					},
					"sub": {
						"$ref": "#/components/schemas/IntegerOutput"
					},
					"t2i_adapter": {
						"$ref": "#/components/schemas/T2IAdapterOutput"
					},
					"tensor_mask_to_image": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"tile_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"tile_to_properties": {
						"$ref": "#/components/schemas/TileToPropertiesOutput"
					},
					"tiled_multi_diffusion_denoise_latents": {
						"$ref": "#/components/schemas/LatentsOutput"
					},
					"tomask": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"unsharp_mask": {
						"$ref": "#/components/schemas/ImageOutput"
					},
					"vae_loader": {
						"$ref": "#/components/schemas/VAEOutput"
					},
					"zoe_depth_image_processor": {
						"$ref": "#/components/schemas/ImageOutput"
					}
				},
				"required": [
					"integer_math",
					"infill_rgba",
					"sdxl_refiner_model_loader",
					"depth_anything_image_processor",
					"main_model_loader",
					"create_denoise_mask",
					"lblend",
					"tile_image_processor",
					"sub",
					"boolean",
					"string_split",
					"mediapipe_face_processor",
					"rand_float",
					"img_resize",
					"latents_collection",
					"scheduler",
					"segment_anything",
					"vae_loader",
					"dynamic_prompt",
					"esrgan",
					"pair_tile_image",
					"flux_vae_encode",
					"alpha_mask_to_tensor",
					"img_blur",
					"img_scale",
					"mul",
					"img_mul",
					"leres_image_processor",
					"flux_denoise",
					"round_float",
					"blank_image",
					"string_join",
					"face_identifier",
					"flux_vae_decode",
					"flux_model_loader",
					"noise",
					"image_mask_to_tensor",
					"img_hue_adjust",
					"float_math",
					"content_shuffle_image_processor",
					"lora_loader",
					"tomask",
					"face_mask_detection",
					"tiled_multi_diffusion_denoise_latents",
					"pidi_image_processor",
					"save_image",
					"lresize",
					"calculate_image_tiles_min_overlap",
					"infill_tile",
					"bounding_box",
					"lineart_anime_image_processor",
					"ip_adapter",
					"string_split_neg",
					"img_paste",
					"metadata_item",
					"collect",
					"midas_depth_image_processor",
					"spandrel_image_to_image_autoscale",
					"core_metadata",
					"merge_tiles_to_image",
					"cv_inpaint",
					"segment_anything_processor",
					"mask_combine",
					"random_range",
					"tensor_mask_to_image",
					"l2i",
					"calculate_image_tiles_even_split",
					"canny_image_processor",
					"dw_openpose_image_processor",
					"string",
					"canvas_paste_back",
					"img_chan",
					"denoise_latents",
					"color_correct",
					"img_nsfw",
					"range",
					"heuristic_resize",
					"lscale",
					"clip_skip",
					"boolean_collection",
					"tile_to_properties",
					"ideal_size",
					"float_collection",
					"calculate_image_tiles",
					"metadata",
					"img_conv",
					"sdxl_model_loader",
					"normalbae_image_processor",
					"mask_from_id",
					"lineart_image_processor",
					"seamless",
					"float",
					"infill_lama",
					"image_collection",
					"integer_collection",
					"img_channel_offset",
					"freeu",
					"img_ilerp",
					"lora_selector",
					"rectangle_mask",
					"mask_edge",
					"latents",
					"sdxl_compel_prompt",
					"string_collection",
					"lora_collection_loader",
					"conditioning",
					"unsharp_mask",
					"div",
					"zoe_depth_image_processor",
					"mlsd_image_processor",
					"infill_cv2",
					"merge_metadata",
					"float_to_int",
					"spandrel_image_to_image",
					"iterate",
					"infill_patchmatch",
					"controlnet",
					"grounding_dino",
					"string_replace",
					"color_map_image_processor",
					"float_range",
					"color",
					"img_channel_multiply",
					"t2i_adapter",
					"crop_latents",
					"hed_image_processor",
					"create_gradient_mask",
					"show_image",
					"add",
					"sdxl_refiner_compel_prompt",
					"conditioning_collection",
					"rand_int",
					"sdxl_lora_collection_loader",
					"compel",
					"integer",
					"invert_tensor_mask",
					"img_pad_crop",
					"step_param_easing",
					"image",
					"i2l",
					"sdxl_lora_loader",
					"face_off",
					"img_crop",
					"string_join_three",
					"model_identifier",
					"range_of_size",
					"img_watermark",
					"flux_text_encoder",
					"prompt_from_file",
					"img_lerp"
				]
			},
			"InvocationStartedEvent": {
				"description": "Event model for invocation_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"item_id": {
						"description": "The ID of the queue item",
						"title": "Item Id",
						"type": "integer"
					},
					"batch_id": {
						"description": "The ID of the queue batch",
						"title": "Batch Id",
						"type": "string"
					},
					"session_id": {
						"description": "The ID of the session (aka graph execution state)",
						"title": "Session Id",
						"type": "string"
					},
					"invocation": {
						"description": "The ID of the invocation",
						"oneOf": [
							{
								"$ref": "#/components/schemas/AddInvocation"
							},
							{
								"$ref": "#/components/schemas/AlphaMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/BlankImageInvocation"
							},
							{
								"$ref": "#/components/schemas/BlendLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/BooleanInvocation"
							},
							{
								"$ref": "#/components/schemas/BoundingBoxInvocation"
							},
							{
								"$ref": "#/components/schemas/CLIPSkipInvocation"
							},
							{
								"$ref": "#/components/schemas/CV2InfillInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesEvenSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesInvocation"
							},
							{
								"$ref": "#/components/schemas/CalculateImageTilesMinimumOverlapInvocation"
							},
							{
								"$ref": "#/components/schemas/CannyImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CanvasPasteBackInvocation"
							},
							{
								"$ref": "#/components/schemas/CenterPadCropInvocation"
							},
							{
								"$ref": "#/components/schemas/CollectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorCorrectInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorInvocation"
							},
							{
								"$ref": "#/components/schemas/ColorMapImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/CompelInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ConditioningInvocation"
							},
							{
								"$ref": "#/components/schemas/ContentShuffleImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ControlNetInvocation"
							},
							{
								"$ref": "#/components/schemas/CoreMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateDenoiseMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CreateGradientMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/CropLatentsCoreInvocation"
							},
							{
								"$ref": "#/components/schemas/CvInpaintInvocation"
							},
							{
								"$ref": "#/components/schemas/DWOpenposeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DenoiseLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/DepthAnythingImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/DivideInvocation"
							},
							{
								"$ref": "#/components/schemas/DynamicPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/ESRGANInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/FaceOffInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatLinearRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatMathInvocation"
							},
							{
								"$ref": "#/components/schemas/FloatToIntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxDenoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxTextEncoderInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeDecodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FluxVaeEncodeInvocation"
							},
							{
								"$ref": "#/components/schemas/FreeUInvocation"
							},
							{
								"$ref": "#/components/schemas/GroundingDinoInvocation"
							},
							{
								"$ref": "#/components/schemas/HedImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/HeuristicResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/IdealSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageChannelOffsetInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageConvertInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageCropInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageHueAdjustmentInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInverseLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageLerpInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMaskToTensorInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageMultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageNSFWBlurInvocation"
							},
							{
								"$ref": "#/components/schemas/ImagePasteInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageResizeInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageScaleInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageToLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/ImageWatermarkInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillColorInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillPatchMatchInvocation"
							},
							{
								"$ref": "#/components/schemas/InfillTileInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerInvocation"
							},
							{
								"$ref": "#/components/schemas/IntegerMathInvocation"
							},
							{
								"$ref": "#/components/schemas/InvertTensorMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/IterateInvocation"
							},
							{
								"$ref": "#/components/schemas/LaMaInfillInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/LatentsToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/LeresImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartAnimeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LineartImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/LoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/LoRASelectorInvocation"
							},
							{
								"$ref": "#/components/schemas/MainModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskCombineInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskEdgeInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromAlphaInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskFromIDInvocation"
							},
							{
								"$ref": "#/components/schemas/MaskTensorToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MediapipeFaceProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeMetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MergeTilesToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataInvocation"
							},
							{
								"$ref": "#/components/schemas/MetadataItemInvocation"
							},
							{
								"$ref": "#/components/schemas/MidasDepthImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/MlsdImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ModelIdentifierInvocation"
							},
							{
								"$ref": "#/components/schemas/MultiplyInvocation"
							},
							{
								"$ref": "#/components/schemas/NoiseInvocation"
							},
							{
								"$ref": "#/components/schemas/NormalbaeImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PairTileImageInvocation"
							},
							{
								"$ref": "#/components/schemas/PidiImageProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/PromptsFromFileInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomFloatInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomIntInvocation"
							},
							{
								"$ref": "#/components/schemas/RandomRangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeInvocation"
							},
							{
								"$ref": "#/components/schemas/RangeOfSizeInvocation"
							},
							{
								"$ref": "#/components/schemas/RectangleMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/ResizeLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/RoundInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRACollectionLoader"
							},
							{
								"$ref": "#/components/schemas/SDXLLoRALoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerCompelPromptInvocation"
							},
							{
								"$ref": "#/components/schemas/SDXLRefinerModelLoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/SaveImageInvocation"
							},
							{
								"$ref": "#/components/schemas/ScaleLatentsInvocation"
							},
							{
								"$ref": "#/components/schemas/SchedulerInvocation"
							},
							{
								"$ref": "#/components/schemas/SeamlessModeInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingInvocation"
							},
							{
								"$ref": "#/components/schemas/SegmentAnythingProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/ShowImageInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageAutoscaleInvocation"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageInvocation"
							},
							{
								"$ref": "#/components/schemas/StepParamEasingInvocation"
							},
							{
								"$ref": "#/components/schemas/StringCollectionInvocation"
							},
							{
								"$ref": "#/components/schemas/StringInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinInvocation"
							},
							{
								"$ref": "#/components/schemas/StringJoinThreeInvocation"
							},
							{
								"$ref": "#/components/schemas/StringReplaceInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitInvocation"
							},
							{
								"$ref": "#/components/schemas/StringSplitNegInvocation"
							},
							{
								"$ref": "#/components/schemas/SubtractInvocation"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterInvocation"
							},
							{
								"$ref": "#/components/schemas/TileResamplerProcessorInvocation"
							},
							{
								"$ref": "#/components/schemas/TileToPropertiesInvocation"
							},
							{
								"$ref": "#/components/schemas/TiledMultiDiffusionDenoiseLatents"
							},
							{
								"$ref": "#/components/schemas/UnsharpMaskInvocation"
							},
							{
								"$ref": "#/components/schemas/VAELoaderInvocation"
							},
							{
								"$ref": "#/components/schemas/ZoeDepthImageProcessorInvocation"
							}
						],
						"title": "Invocation"
					},
					"invocation_source_id": {
						"description": "The ID of the prepared invocation's source node",
						"title": "Invocation Source Id",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"item_id",
					"batch_id",
					"session_id",
					"invocation",
					"invocation_source_id"
				],
				"title": "InvocationStartedEvent",
				"type": "object"
			},
			"IterateInvocation": {
				"class": "invocation",
				"classification": "stable",
				"description": "Iterates over a list of items",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The list of items to iterate over",
						"field_kind": "input",
						"input": "any",
						"items": {},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false,
						"ui_type": "CollectionField"
					},
					"index": {
						"default": 0,
						"description": "The index, will be provided on executed iterators",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Index",
						"type": "integer",
						"ui_hidden": true
					},
					"type": {
						"const": "iterate",
						"default": "iterate",
						"enum": [
							"iterate"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"title": "IterateInvocation",
				"type": "object",
				"version": "1.1.0",
				"output": {
					"$ref": "#/components/schemas/IterateInvocationOutput"
				}
			},
			"IterateInvocationOutput": {
				"class": "output",
				"description": "Used to connect iteration outputs. Will be expanded to a specific output.",
				"properties": {
					"item": {
						"description": "The item being iterated over",
						"field_kind": "output",
						"title": "Collection Item",
						"ui_hidden": false,
						"ui_type": "CollectionItemField"
					},
					"index": {
						"description": "The index of the item",
						"field_kind": "output",
						"title": "Index",
						"type": "integer",
						"ui_hidden": false
					},
					"total": {
						"description": "The total number of items",
						"field_kind": "output",
						"title": "Total",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "iterate_output",
						"default": "iterate_output",
						"enum": [
							"iterate_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"item",
					"index",
					"total",
					"type",
					"type"
				],
				"title": "IterateInvocationOutput",
				"type": "object"
			},
			"JsonValue": {},
			"LaMaInfillInvocation": {
				"category": "inpaint",
				"class": "invocation",
				"classification": "stable",
				"description": "Infills transparent areas of an image using the LaMa model",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "infill_lama",
						"default": "infill_lama",
						"enum": [
							"infill_lama"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"inpaint"
				],
				"title": "LaMa Infill",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"LatentsCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of latents tensor primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": null,
						"description": "The collection of latents tensors",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/LatentsField"
						},
						"orig_required": true,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "latents_collection",
						"default": "latents_collection",
						"enum": [
							"latents_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"latents",
					"collection"
				],
				"title": "Latents Collection Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/LatentsCollectionOutput"
				}
			},
			"LatentsCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of latents tensors",
				"properties": {
					"collection": {
						"description": "Latents tensor",
						"field_kind": "output",
						"items": {
							"$ref": "#/components/schemas/LatentsField"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "latents_collection_output",
						"default": "latents_collection_output",
						"enum": [
							"latents_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "LatentsCollectionOutput",
				"type": "object"
			},
			"LatentsField": {
				"description": "A latents tensor primitive field",
				"properties": {
					"latents_name": {
						"description": "The name of the latents",
						"title": "Latents Name",
						"type": "string"
					},
					"seed": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Seed used to generate this latents",
						"title": "Seed"
					}
				},
				"required": [
					"latents_name"
				],
				"title": "LatentsField",
				"type": "object"
			},
			"LatentsInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A latents tensor primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "The latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "latents",
						"default": "latents",
						"enum": [
							"latents"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"latents"
				],
				"title": "Latents Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"LatentsOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single latents tensor",
				"properties": {
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"description": "Latents tensor",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "Width of output (px)",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "Height of output (px)",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "latents_output",
						"default": "latents_output",
						"enum": [
							"latents_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"latents",
					"width",
					"height",
					"type",
					"type"
				],
				"title": "LatentsOutput",
				"type": "object"
			},
			"LatentsToImageInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates an image from latents.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"tiled": {
						"default": false,
						"description": "Processing using overlapping tiles (reduce memory consumption)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Tiled",
						"type": "boolean",
						"ui_hidden": false
					},
					"tile_size": {
						"default": 0,
						"description": "The tile size for VAE tiling in pixels (image space). If set to 0, the default tile size for the model will be used. Larger tile sizes generally produce better results at the cost of higher memory usage.",
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 0,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"fp32": {
						"default": false,
						"description": "Whether or not to use full float32 precision",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Fp32",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "l2i",
						"default": "l2i",
						"enum": [
							"l2i"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"image",
					"vae",
					"l2i"
				],
				"title": "Latents to Image",
				"type": "object",
				"version": "1.3.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"LeresImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies leres processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"thr_a": {
						"default": 0,
						"description": "Leres parameter `thr_a`",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Thr A",
						"type": "number",
						"ui_hidden": false
					},
					"thr_b": {
						"default": 0,
						"description": "Leres parameter `thr_b`",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Thr B",
						"type": "number",
						"ui_hidden": false
					},
					"boost": {
						"default": false,
						"description": "Whether to use boost mode",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Boost",
						"type": "boolean",
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "leres_image_processor",
						"default": "leres_image_processor",
						"enum": [
							"leres_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"leres",
					"depth"
				],
				"title": "Leres (Depth) Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"LineartAnimeImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies line art anime processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "lineart_anime_image_processor",
						"default": "lineart_anime_image_processor",
						"enum": [
							"lineart_anime_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"lineart",
					"anime"
				],
				"title": "Lineart Anime Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"LineartImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies line art processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"coarse": {
						"default": false,
						"description": "Whether to use coarse mode",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Coarse",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "lineart_image_processor",
						"default": "lineart_image_processor",
						"enum": [
							"lineart_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"lineart"
				],
				"title": "Lineart Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"LoRACollectionLoader": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies a collection of LoRAs to the provided UNet and CLIP models.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"loras": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LoRAField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/LoRAField"
								},
								"type": "array"
							}
						],
						"default": null,
						"description": "LoRA models and weights. May be a single LoRA or collection.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "LoRAs",
						"ui_hidden": false
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP",
						"ui_hidden": false
					},
					"type": {
						"const": "lora_collection_loader",
						"default": "lora_collection_loader",
						"enum": [
							"lora_collection_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "LoRA Collection Loader",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/LoRALoaderOutput"
				}
			},
			"LoRADiffusersConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"lora"
						],
						"const": "lora",
						"title": "Type",
						"default": "lora"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "LoRADiffusersConfig",
				"description": "Model config for LoRA/Diffusers models."
			},
			"LoRAField": {
				"properties": {
					"lora": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load lora model"
					},
					"weight": {
						"description": "Weight to apply to lora model",
						"title": "Weight",
						"type": "number"
					}
				},
				"required": [
					"lora",
					"weight"
				],
				"title": "LoRAField",
				"type": "object"
			},
			"LoRALoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Apply selected lora to unet and text_encoder.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"lora": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "LoRA model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "LoRA",
						"ui_hidden": false,
						"ui_type": "LoRAModelField"
					},
					"weight": {
						"default": 0.75,
						"description": "The weight at which the LoRA is applied to each model",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.75,
						"orig_required": false,
						"title": "Weight",
						"type": "number",
						"ui_hidden": false
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP",
						"ui_hidden": false
					},
					"type": {
						"const": "lora_loader",
						"default": "lora_loader",
						"enum": [
							"lora_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "LoRA",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/LoRALoaderOutput"
				}
			},
			"LoRALoaderOutput": {
				"class": "output",
				"description": "Model loader output",
				"properties": {
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP",
						"ui_hidden": false
					},
					"type": {
						"const": "lora_loader_output",
						"default": "lora_loader_output",
						"enum": [
							"lora_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"clip",
					"type",
					"type"
				],
				"title": "LoRALoaderOutput",
				"type": "object"
			},
			"LoRALyCORISConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"lora"
						],
						"const": "lora",
						"title": "Type",
						"default": "lora"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"format": {
						"type": "string",
						"enum": [
							"lycoris"
						],
						"const": "lycoris",
						"title": "Format",
						"default": "lycoris"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "LoRALyCORISConfig",
				"description": "Model config for LoRA/Lycoris models."
			},
			"LoRAMetadataField": {
				"description": "LoRA Metadata Field",
				"properties": {
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "LoRA model to load"
					},
					"weight": {
						"description": "The weight at which the LoRA is applied to each model",
						"title": "Weight",
						"type": "number"
					}
				},
				"required": [
					"model",
					"weight"
				],
				"title": "LoRAMetadataField",
				"type": "object"
			},
			"LoRASelectorInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Selects a LoRA model and weight.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"lora": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "LoRA model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "LoRA",
						"ui_hidden": false,
						"ui_type": "LoRAModelField"
					},
					"weight": {
						"default": 0.75,
						"description": "The weight at which the LoRA is applied to each model",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.75,
						"orig_required": false,
						"title": "Weight",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "lora_selector",
						"default": "lora_selector",
						"enum": [
							"lora_selector"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "LoRA Selector",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/LoRASelectorOutput"
				}
			},
			"LoRASelectorOutput": {
				"class": "output",
				"description": "Model loader output",
				"properties": {
					"lora": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LoRAField"
							}
						],
						"description": "LoRA model and weight",
						"field_kind": "output",
						"title": "LoRA",
						"ui_hidden": false
					},
					"type": {
						"const": "lora_selector_output",
						"default": "lora_selector_output",
						"enum": [
							"lora_selector_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"lora",
					"type",
					"type"
				],
				"title": "LoRASelectorOutput",
				"type": "object"
			},
			"LocalModelSource": {
				"properties": {
					"path": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"format": "path"
							}
						],
						"title": "Path"
					},
					"inplace": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Inplace",
						"default": false
					},
					"type": {
						"type": "string",
						"enum": [
							"local"
						],
						"const": "local",
						"title": "Type",
						"default": "local"
					}
				},
				"type": "object",
				"required": [
					"path"
				],
				"title": "LocalModelSource",
				"description": "A local file or directory path."
			},
			"LogLevel": {
				"type": "integer",
				"enum": [
					0,
					10,
					20,
					30,
					40,
					50
				],
				"title": "LogLevel"
			},
			"MainBnbQuantized4bCheckpointConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"main"
						],
						"const": "main",
						"title": "Type",
						"default": "main"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MainModelDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"variant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelVariantType"
							}
						],
						"default": "normal"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint",
							"bnb_quantized_nf4b"
						],
						"title": "Format",
						"description": "Format of the provided checkpoint model",
						"default": "checkpoint"
					},
					"config_path": {
						"type": "string",
						"title": "Config Path",
						"description": "path to the checkpoint model config file"
					},
					"converted_at": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"title": "Converted At",
						"description": "When this model was last converted to diffusers"
					},
					"prediction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SchedulerPredictionType"
							}
						],
						"default": "epsilon"
					},
					"upcast_attention": {
						"type": "boolean",
						"title": "Upcast Attention",
						"default": false
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"config_path",
					"key",
					"type",
					"format"
				],
				"title": "MainBnbQuantized4bCheckpointConfig",
				"description": "Model config for main checkpoint models."
			},
			"MainCheckpointConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"main"
						],
						"const": "main",
						"title": "Type",
						"default": "main"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MainModelDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"variant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelVariantType"
							}
						],
						"default": "normal"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint",
							"bnb_quantized_nf4b"
						],
						"title": "Format",
						"description": "Format of the provided checkpoint model",
						"default": "checkpoint"
					},
					"config_path": {
						"type": "string",
						"title": "Config Path",
						"description": "path to the checkpoint model config file"
					},
					"converted_at": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"title": "Converted At",
						"description": "When this model was last converted to diffusers"
					},
					"prediction_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SchedulerPredictionType"
							}
						],
						"default": "epsilon"
					},
					"upcast_attention": {
						"type": "boolean",
						"title": "Upcast Attention",
						"default": false
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"config_path",
					"key",
					"type",
					"format"
				],
				"title": "MainCheckpointConfig",
				"description": "Model config for main checkpoint models."
			},
			"MainDiffusersConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"main"
						],
						"const": "main",
						"title": "Type",
						"default": "main"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MainModelDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"variant": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelVariantType"
							}
						],
						"default": "normal"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					},
					"repo_variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": ""
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "MainDiffusersConfig",
				"description": "Model config for main diffusers models."
			},
			"MainModelDefaultSettings": {
				"properties": {
					"vae": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Vae",
						"description": "Default VAE for this model (model key)"
					},
					"vae_precision": {
						"anyOf": [
							{
								"type": "string",
								"enum": [
									"fp16",
									"fp32"
								]
							},
							{
								"type": "null"
							}
						],
						"title": "Vae Precision",
						"description": "Default VAE precision for this model"
					},
					"scheduler": {
						"anyOf": [
							{
								"type": "string",
								"enum": [
									"ddim",
									"ddpm",
									"deis",
									"deis_k",
									"lms",
									"lms_k",
									"pndm",
									"heun",
									"heun_k",
									"euler",
									"euler_k",
									"euler_a",
									"kdpm_2",
									"kdpm_2_k",
									"kdpm_2_a",
									"kdpm_2_a_k",
									"dpmpp_2s",
									"dpmpp_2s_k",
									"dpmpp_2m",
									"dpmpp_2m_k",
									"dpmpp_2m_sde",
									"dpmpp_2m_sde_k",
									"dpmpp_3m",
									"dpmpp_3m_k",
									"dpmpp_sde",
									"dpmpp_sde_k",
									"unipc",
									"unipc_k",
									"lcm",
									"tcd"
								]
							},
							{
								"type": "null"
							}
						],
						"title": "Scheduler",
						"description": "Default scheduler for this model"
					},
					"steps": {
						"anyOf": [
							{
								"type": "integer",
								"exclusiveMinimum": 0
							},
							{
								"type": "null"
							}
						],
						"title": "Steps",
						"description": "Default number of steps for this model"
					},
					"cfg_scale": {
						"anyOf": [
							{
								"type": "number",
								"minimum": 1
							},
							{
								"type": "null"
							}
						],
						"title": "Cfg Scale",
						"description": "Default CFG Scale for this model"
					},
					"cfg_rescale_multiplier": {
						"anyOf": [
							{
								"type": "number",
								"exclusiveMaximum": 1,
								"minimum": 0
							},
							{
								"type": "null"
							}
						],
						"title": "Cfg Rescale Multiplier",
						"description": "Default CFG Rescale Multiplier for this model"
					},
					"width": {
						"anyOf": [
							{
								"type": "integer",
								"multipleOf": 8,
								"minimum": 64
							},
							{
								"type": "null"
							}
						],
						"title": "Width",
						"description": "Default width for this model"
					},
					"height": {
						"anyOf": [
							{
								"type": "integer",
								"multipleOf": 8,
								"minimum": 64
							},
							{
								"type": "null"
							}
						],
						"title": "Height",
						"description": "Default height for this model"
					}
				},
				"additionalProperties": false,
				"type": "object",
				"title": "MainModelDefaultSettings"
			},
			"MainModelLoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Loads a main model, outputting its submodels.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "Main model (UNet, VAE, CLIP) to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false,
						"ui_type": "MainModelField"
					},
					"type": {
						"const": "main_model_loader",
						"default": "main_model_loader",
						"enum": [
							"main_model_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "Main Model",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/ModelLoaderOutput"
				}
			},
			"MaskCombineInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Combine two masks together by multiplying them using `PIL.ImageChops.multiply()`.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"mask1": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The first mask to combine",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"mask2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The second image to combine",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "mask_combine",
						"default": "mask_combine",
						"enum": [
							"mask_combine"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"mask",
					"multiply"
				],
				"title": "Combine Masks",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MaskEdgeInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies an edge mask to an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to apply the mask to",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"edge_size": {
						"default": null,
						"description": "The size of the edge",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Edge Size",
						"type": "integer",
						"ui_hidden": false
					},
					"edge_blur": {
						"default": null,
						"description": "The amount of blur on the edge",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Edge Blur",
						"type": "integer",
						"ui_hidden": false
					},
					"low_threshold": {
						"default": null,
						"description": "First threshold for the hysteresis procedure in Canny edge detection",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Low Threshold",
						"type": "integer",
						"ui_hidden": false
					},
					"high_threshold": {
						"default": null,
						"description": "Second threshold for the hysteresis procedure in Canny edge detection",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "High Threshold",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "mask_edge",
						"default": "mask_edge",
						"enum": [
							"mask_edge"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"mask",
					"inpaint"
				],
				"title": "Mask Edge",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MaskFromAlphaInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Extracts the alpha channel of an image as a mask.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to create the mask from",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"invert": {
						"default": false,
						"description": "Whether or not to invert the mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "tomask",
						"default": "tomask",
						"enum": [
							"tomask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"mask"
				],
				"title": "Mask from Alpha",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MaskFromIDInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Generate a mask for a particular color in an ID Map",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to create the mask from",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"color": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ColorField"
							}
						],
						"default": null,
						"description": "ID color to mask",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"threshold": {
						"default": 100,
						"description": "Threshold for color detection",
						"field_kind": "input",
						"input": "any",
						"orig_default": 100,
						"orig_required": false,
						"title": "Threshold",
						"type": "integer",
						"ui_hidden": false
					},
					"invert": {
						"default": false,
						"description": "Whether or not to invert the mask",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Invert",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "mask_from_id",
						"default": "mask_from_id",
						"enum": [
							"mask_from_id"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"mask",
					"id"
				],
				"title": "Mask from ID",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MaskOutput": {
				"class": "output",
				"description": "A torch mask tensor.",
				"properties": {
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							}
						],
						"description": "The mask.",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "The width of the mask in pixels.",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The height of the mask in pixels.",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "mask_output",
						"default": "mask_output",
						"enum": [
							"mask_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"mask",
					"width",
					"height",
					"type",
					"type"
				],
				"title": "MaskOutput",
				"type": "object"
			},
			"MaskTensorToImageInvocation": {
				"category": "mask",
				"class": "invocation",
				"classification": "stable",
				"description": "Convert a mask tensor to an image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"mask": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							}
						],
						"default": null,
						"description": "The mask tensor to convert.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "tensor_mask_to_image",
						"default": "tensor_mask_to_image",
						"enum": [
							"tensor_mask_to_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"mask"
				],
				"title": "Tensor Mask to Image",
				"type": "object",
				"version": "1.1.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MediapipeFaceProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies mediapipe face processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"max_faces": {
						"default": 1,
						"description": "Maximum number of faces to detect",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1,
						"orig_required": false,
						"title": "Max Faces",
						"type": "integer",
						"ui_hidden": false
					},
					"min_confidence": {
						"default": 0.5,
						"description": "Minimum confidence for face detection",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0.5,
						"orig_required": false,
						"title": "Min Confidence",
						"type": "number",
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "mediapipe_face_processor",
						"default": "mediapipe_face_processor",
						"enum": [
							"mediapipe_face_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"mediapipe",
					"face"
				],
				"title": "Mediapipe Face Processor",
				"type": "object",
				"version": "1.2.4",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MergeMetadataInvocation": {
				"category": "metadata",
				"class": "invocation",
				"classification": "stable",
				"description": "Merged a collection of MetadataDict into a single MetadataDict.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": null,
						"description": "Collection of Metadata",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/MetadataField"
						},
						"orig_required": true,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "merge_metadata",
						"default": "merge_metadata",
						"enum": [
							"merge_metadata"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"metadata"
				],
				"title": "Metadata Merge",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/MetadataOutput"
				}
			},
			"MergeTilesToImageInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Merge multiple tile images into a single image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"tiles_with_images": {
						"default": null,
						"description": "A list of tile images with tile properties.",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/TileWithImage"
						},
						"orig_required": true,
						"title": "Tiles With Images",
						"type": "array",
						"ui_hidden": false
					},
					"blend_mode": {
						"default": "Seam",
						"description": "blending type Linear or Seam",
						"enum": [
							"Linear",
							"Seam"
						],
						"field_kind": "input",
						"input": "direct",
						"orig_default": "Seam",
						"orig_required": false,
						"title": "Blend Mode",
						"type": "string",
						"ui_hidden": false
					},
					"blend_amount": {
						"default": 32,
						"description": "The amount to blend adjacent tiles in pixels. Must be <= the amount of overlap between adjacent tiles.",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 32,
						"orig_required": false,
						"title": "Blend Amount",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "merge_tiles_to_image",
						"default": "merge_tiles_to_image",
						"enum": [
							"merge_tiles_to_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Merge Tiles to Image",
				"type": "object",
				"version": "1.1.1",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MetadataField": {
				"type": "object",
				"title": "MetadataField",
				"description": "Pydantic model for metadata with custom root of type dict[str, Any].\nMetadata is stored without a strict schema."
			},
			"MetadataInvocation": {
				"category": "metadata",
				"class": "invocation",
				"classification": "stable",
				"description": "Takes a MetadataItem or collection of MetadataItems and outputs a MetadataDict.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"items": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/MetadataItemField"
								},
								"type": "array"
							},
							{
								"$ref": "#/components/schemas/MetadataItemField"
							}
						],
						"default": null,
						"description": "A single metadata item or collection of metadata items",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Items",
						"ui_hidden": false
					},
					"type": {
						"const": "metadata",
						"default": "metadata",
						"enum": [
							"metadata"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"metadata"
				],
				"title": "Metadata",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/MetadataOutput"
				}
			},
			"MetadataItemField": {
				"properties": {
					"label": {
						"description": "Label for this metadata item",
						"title": "Label",
						"type": "string"
					},
					"value": {
						"description": "The value for this metadata item (may be any type)",
						"title": "Value"
					}
				},
				"required": [
					"label",
					"value"
				],
				"title": "MetadataItemField",
				"type": "object"
			},
			"MetadataItemInvocation": {
				"category": "metadata",
				"class": "invocation",
				"classification": "stable",
				"description": "Used to create an arbitrary metadata item. Provide \"label\" and make a connection to \"value\" to store that data as the value.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"label": {
						"default": null,
						"description": "Label for this metadata item",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Label",
						"type": "string",
						"ui_hidden": false
					},
					"value": {
						"default": null,
						"description": "The value for this metadata item (may be any type)",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Value",
						"ui_hidden": false,
						"ui_type": "AnyField"
					},
					"type": {
						"const": "metadata_item",
						"default": "metadata_item",
						"enum": [
							"metadata_item"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"metadata"
				],
				"title": "Metadata Item",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/MetadataItemOutput"
				}
			},
			"MetadataItemOutput": {
				"class": "output",
				"description": "Metadata Item Output",
				"properties": {
					"item": {
						"allOf": [
							{
								"$ref": "#/components/schemas/MetadataItemField"
							}
						],
						"description": "Metadata Item",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "metadata_item_output",
						"default": "metadata_item_output",
						"enum": [
							"metadata_item_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"item",
					"type",
					"type"
				],
				"title": "MetadataItemOutput",
				"type": "object"
			},
			"MetadataOutput": {
				"class": "output",
				"properties": {
					"metadata": {
						"allOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							}
						],
						"description": "Metadata Dict",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "metadata_output",
						"default": "metadata_output",
						"enum": [
							"metadata_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"metadata",
					"type",
					"type"
				],
				"title": "MetadataOutput",
				"type": "object"
			},
			"MidasDepthImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies Midas depth processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"a_mult": {
						"default": 2,
						"description": "Midas parameter `a_mult` (a = a_mult * PI)",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 2,
						"orig_required": false,
						"title": "A Mult",
						"type": "number",
						"ui_hidden": false
					},
					"bg_th": {
						"default": 0.1,
						"description": "Midas parameter `bg_th`",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0.1,
						"orig_required": false,
						"title": "Bg Th",
						"type": "number",
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "midas_depth_image_processor",
						"default": "midas_depth_image_processor",
						"enum": [
							"midas_depth_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"midas"
				],
				"title": "Midas Depth Processor",
				"type": "object",
				"version": "1.2.4",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"MlsdImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies MLSD processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"thr_v": {
						"default": 0.1,
						"description": "MLSD parameter `thr_v`",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0.1,
						"orig_required": false,
						"title": "Thr V",
						"type": "number",
						"ui_hidden": false
					},
					"thr_d": {
						"default": 0.1,
						"description": "MLSD parameter `thr_d`",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0.1,
						"orig_required": false,
						"title": "Thr D",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "mlsd_image_processor",
						"default": "mlsd_image_processor",
						"enum": [
							"mlsd_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"mlsd"
				],
				"title": "MLSD Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ModelFormat": {
				"type": "string",
				"enum": [
					"diffusers",
					"checkpoint",
					"lycoris",
					"onnx",
					"olive",
					"embedding_file",
					"embedding_folder",
					"invokeai",
					"t5_encoder",
					"bnb_quantized_int8b",
					"bnb_quantized_nf4b"
				],
				"title": "ModelFormat",
				"description": "Storage format of model."
			},
			"ModelIdentifierField": {
				"properties": {
					"key": {
						"description": "The model's unique key",
						"title": "Key",
						"type": "string"
					},
					"hash": {
						"description": "The model's BLAKE3 hash",
						"title": "Hash",
						"type": "string"
					},
					"name": {
						"description": "The model's name",
						"title": "Name",
						"type": "string"
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The model's base model type"
					},
					"type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelType"
							}
						],
						"description": "The model's type"
					},
					"submodel_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/SubModelType"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The submodel to load, if this is a main model"
					}
				},
				"required": [
					"key",
					"hash",
					"name",
					"base",
					"type"
				],
				"title": "ModelIdentifierField",
				"type": "object"
			},
			"ModelIdentifierInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "prototype",
				"description": "Selects any model, outputting it its identifier. Be careful with this one! The identifier will be accepted as\ninput for any model, even if the model types don't match. If you connect this to a mismatched input, you'll get an\nerror.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "The model to select",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Model",
						"ui_hidden": false
					},
					"type": {
						"const": "model_identifier",
						"default": "model_identifier",
						"enum": [
							"model_identifier"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "Model identifier",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ModelIdentifierOutput"
				}
			},
			"ModelIdentifierOutput": {
				"class": "output",
				"description": "Model identifier output",
				"properties": {
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Model identifier",
						"field_kind": "output",
						"title": "Model",
						"ui_hidden": false
					},
					"type": {
						"const": "model_identifier_output",
						"default": "model_identifier_output",
						"enum": [
							"model_identifier_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"model",
					"type",
					"type"
				],
				"title": "ModelIdentifierOutput",
				"type": "object"
			},
			"ModelInstallCancelledEvent": {
				"description": "Event model for model_install_cancelled",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source"
				],
				"title": "ModelInstallCancelledEvent",
				"type": "object"
			},
			"ModelInstallCompleteEvent": {
				"description": "Event model for model_install_complete",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					},
					"key": {
						"description": "Model config record key",
						"title": "Key",
						"type": "string"
					},
					"total_bytes": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"description": "Size of the model (may be None for installation of a local path)",
						"title": "Total Bytes"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source",
					"key",
					"total_bytes"
				],
				"title": "ModelInstallCompleteEvent",
				"type": "object"
			},
			"ModelInstallDownloadProgressEvent": {
				"description": "Event model for model_install_download_progress",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					},
					"local_path": {
						"description": "Where model is downloading to",
						"title": "Local Path",
						"type": "string"
					},
					"bytes": {
						"description": "Number of bytes downloaded so far",
						"title": "Bytes",
						"type": "integer"
					},
					"total_bytes": {
						"description": "Total size of download, including all files",
						"title": "Total Bytes",
						"type": "integer"
					},
					"parts": {
						"description": "Progress of downloading URLs that comprise the model, if any",
						"items": {
							"additionalProperties": {
								"anyOf": [
									{
										"type": "integer"
									},
									{
										"type": "string"
									}
								]
							},
							"type": "object"
						},
						"title": "Parts",
						"type": "array"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source",
					"local_path",
					"bytes",
					"total_bytes",
					"parts"
				],
				"title": "ModelInstallDownloadProgressEvent",
				"type": "object"
			},
			"ModelInstallDownloadStartedEvent": {
				"description": "Event model for model_install_download_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					},
					"local_path": {
						"description": "Where model is downloading to",
						"title": "Local Path",
						"type": "string"
					},
					"bytes": {
						"description": "Number of bytes downloaded so far",
						"title": "Bytes",
						"type": "integer"
					},
					"total_bytes": {
						"description": "Total size of download, including all files",
						"title": "Total Bytes",
						"type": "integer"
					},
					"parts": {
						"description": "Progress of downloading URLs that comprise the model, if any",
						"items": {
							"additionalProperties": {
								"anyOf": [
									{
										"type": "integer"
									},
									{
										"type": "string"
									}
								]
							},
							"type": "object"
						},
						"title": "Parts",
						"type": "array"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source",
					"local_path",
					"bytes",
					"total_bytes",
					"parts"
				],
				"title": "ModelInstallDownloadStartedEvent",
				"type": "object"
			},
			"ModelInstallDownloadsCompleteEvent": {
				"description": "Emitted once when an install job becomes active.",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source"
				],
				"title": "ModelInstallDownloadsCompleteEvent",
				"type": "object"
			},
			"ModelInstallErrorEvent": {
				"description": "Event model for model_install_error",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					},
					"error_type": {
						"description": "The name of the exception",
						"title": "Error Type",
						"type": "string"
					},
					"error": {
						"description": "A text description of the exception",
						"title": "Error",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source",
					"error_type",
					"error"
				],
				"title": "ModelInstallErrorEvent",
				"type": "object"
			},
			"ModelInstallJob": {
				"properties": {
					"id": {
						"type": "integer",
						"title": "Id",
						"description": "Unique ID for this job"
					},
					"status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/InstallStatus"
							}
						],
						"description": "Current status of install process",
						"default": "waiting"
					},
					"error_reason": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Reason",
						"description": "Information about why the job failed"
					},
					"config_in": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelRecordChanges"
							}
						],
						"description": "Configuration information (e.g. 'description') to apply to model."
					},
					"config_out": {
						"anyOf": [
							{
								"oneOf": [
									{
										"$ref": "#/components/schemas/MainDiffusersConfig"
									},
									{
										"$ref": "#/components/schemas/MainCheckpointConfig"
									},
									{
										"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
									},
									{
										"$ref": "#/components/schemas/VAEDiffusersConfig"
									},
									{
										"$ref": "#/components/schemas/VAECheckpointConfig"
									},
									{
										"$ref": "#/components/schemas/ControlNetDiffusersConfig"
									},
									{
										"$ref": "#/components/schemas/ControlNetCheckpointConfig"
									},
									{
										"$ref": "#/components/schemas/LoRALyCORISConfig"
									},
									{
										"$ref": "#/components/schemas/LoRADiffusersConfig"
									},
									{
										"$ref": "#/components/schemas/T5EncoderConfig"
									},
									{
										"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
									},
									{
										"$ref": "#/components/schemas/TextualInversionFileConfig"
									},
									{
										"$ref": "#/components/schemas/TextualInversionFolderConfig"
									},
									{
										"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
									},
									{
										"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
									},
									{
										"$ref": "#/components/schemas/T2IAdapterConfig"
									},
									{
										"$ref": "#/components/schemas/SpandrelImageToImageConfig"
									},
									{
										"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
									},
									{
										"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
									}
								]
							},
							{
								"type": "null"
							}
						],
						"title": "Config Out",
						"description": "After successful installation, this will hold the configuration object."
					},
					"inplace": {
						"type": "boolean",
						"title": "Inplace",
						"description": "Leave model in its current location; otherwise install under models directory",
						"default": false
					},
					"source": {
						"oneOf": [
							{
								"$ref": "#/components/schemas/LocalModelSource"
							},
							{
								"$ref": "#/components/schemas/HFModelSource"
							},
							{
								"$ref": "#/components/schemas/URLModelSource"
							}
						],
						"title": "Source",
						"description": "Source (URL, repo_id, or local path) of model",
						"discriminator": {
							"propertyName": "type",
							"mapping": {
								"hf": "#/components/schemas/HFModelSource",
								"local": "#/components/schemas/LocalModelSource",
								"url": "#/components/schemas/URLModelSource"
							}
						}
					},
					"local_path": {
						"type": "string",
						"format": "path",
						"title": "Local Path",
						"description": "Path to locally-downloaded model; may be the same as the source"
					},
					"bytes": {
						"type": "integer",
						"title": "Bytes",
						"description": "For a remote model, the number of bytes downloaded so far (may not be available)",
						"default": 0
					},
					"total_bytes": {
						"type": "integer",
						"title": "Total Bytes",
						"description": "Total size of the model to be installed",
						"default": 0
					},
					"source_metadata": {
						"anyOf": [
							{
								"oneOf": [
									{
										"$ref": "#/components/schemas/BaseMetadata"
									},
									{
										"$ref": "#/components/schemas/HuggingFaceMetadata"
									}
								],
								"discriminator": {
									"propertyName": "type",
									"mapping": {
										"basemetadata": "#/components/schemas/BaseMetadata",
										"huggingface": "#/components/schemas/HuggingFaceMetadata"
									}
								}
							},
							{
								"type": "null"
							}
						],
						"title": "Source Metadata",
						"description": "Metadata provided by the model source"
					},
					"download_parts": {
						"items": {
							"$ref": "#/components/schemas/DownloadJob"
						},
						"type": "array",
						"uniqueItems": true,
						"title": "Download Parts",
						"description": "Download jobs contributing to this install"
					},
					"error": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error",
						"description": "On an error condition, this field will contain the text of the exception"
					},
					"error_traceback": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Traceback",
						"description": "On an error condition, this field will contain the exception traceback"
					}
				},
				"type": "object",
				"required": [
					"id",
					"source",
					"local_path"
				],
				"title": "ModelInstallJob",
				"description": "Object that tracks the current status of an install request."
			},
			"ModelInstallStartedEvent": {
				"description": "Event model for model_install_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"id": {
						"description": "The ID of the install job",
						"title": "Id",
						"type": "integer"
					},
					"source": {
						"description": "Source of the model; local path, repo_id or url",
						"title": "Source",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"id",
					"source"
				],
				"title": "ModelInstallStartedEvent",
				"type": "object"
			},
			"ModelLoadCompleteEvent": {
				"description": "Event model for model_load_complete",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"config": {
						"description": "The model's config",
						"oneOf": [
							{
								"$ref": "#/components/schemas/MainDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/MainCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/VAEDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/VAECheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/ControlNetDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/ControlNetCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/LoRALyCORISConfig"
							},
							{
								"$ref": "#/components/schemas/LoRADiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/T5EncoderConfig"
							},
							{
								"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
							},
							{
								"$ref": "#/components/schemas/TextualInversionFileConfig"
							},
							{
								"$ref": "#/components/schemas/TextualInversionFolderConfig"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
							},
							{
								"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterConfig"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageConfig"
							},
							{
								"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
							}
						],
						"title": "Config"
					},
					"submodel_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/SubModelType"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The submodel type, if any"
					}
				},
				"required": [
					"timestamp",
					"config",
					"submodel_type"
				],
				"title": "ModelLoadCompleteEvent",
				"type": "object"
			},
			"ModelLoadStartedEvent": {
				"description": "Event model for model_load_started",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"config": {
						"description": "The model's config",
						"oneOf": [
							{
								"$ref": "#/components/schemas/MainDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/MainCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/VAEDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/VAECheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/ControlNetDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/ControlNetCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/LoRALyCORISConfig"
							},
							{
								"$ref": "#/components/schemas/LoRADiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/T5EncoderConfig"
							},
							{
								"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
							},
							{
								"$ref": "#/components/schemas/TextualInversionFileConfig"
							},
							{
								"$ref": "#/components/schemas/TextualInversionFolderConfig"
							},
							{
								"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
							},
							{
								"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
							},
							{
								"$ref": "#/components/schemas/T2IAdapterConfig"
							},
							{
								"$ref": "#/components/schemas/SpandrelImageToImageConfig"
							},
							{
								"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
							},
							{
								"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
							}
						],
						"title": "Config"
					},
					"submodel_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/SubModelType"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The submodel type, if any"
					}
				},
				"required": [
					"timestamp",
					"config",
					"submodel_type"
				],
				"title": "ModelLoadStartedEvent",
				"type": "object"
			},
			"ModelLoaderOutput": {
				"class": "output",
				"description": "Model loader output",
				"properties": {
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"type": {
						"const": "model_loader_output",
						"default": "model_loader_output",
						"enum": [
							"model_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP",
						"ui_hidden": false
					},
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					}
				},
				"required": [
					"vae",
					"type",
					"clip",
					"unet",
					"type"
				],
				"title": "ModelLoaderOutput",
				"type": "object"
			},
			"ModelRecordChanges": {
				"properties": {
					"source": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source",
						"description": "original source of the model"
					},
					"source_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							},
							{
								"type": "null"
							}
						],
						"description": "type of model source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "metadata from remote source"
					},
					"name": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Name",
						"description": "Name of the model."
					},
					"path": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Path",
						"description": "Path to the model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"base": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							},
							{
								"type": "null"
							}
						],
						"description": "The base model."
					},
					"type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelType"
							},
							{
								"type": "null"
							}
						],
						"description": "Type of model"
					},
					"key": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Key",
						"description": "Database ID for this model"
					},
					"hash": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Hash",
						"description": "hash of model file"
					},
					"format": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Format",
						"description": "format of model file"
					},
					"trigger_phrases": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array",
								"uniqueItems": true
							},
							{
								"type": "null"
							}
						],
						"title": "Trigger Phrases",
						"description": "Set of trigger phrases for this model"
					},
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MainModelDefaultSettings"
							},
							{
								"$ref": "#/components/schemas/ControlAdapterDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"title": "Default Settings",
						"description": "Default settings for this model"
					},
					"variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelVariantType"
							},
							{
								"type": "null"
							}
						],
						"description": "The variant of the model."
					},
					"prediction_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/SchedulerPredictionType"
							},
							{
								"type": "null"
							}
						],
						"description": "The prediction type of the model."
					},
					"upcast_attention": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "null"
							}
						],
						"title": "Upcast Attention",
						"description": "Whether to upcast attention."
					},
					"config_path": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Config Path",
						"description": "Path to config file for model"
					}
				},
				"type": "object",
				"title": "ModelRecordChanges",
				"description": "A set of changes to apply to a model."
			},
			"ModelRepoVariant": {
				"type": "string",
				"enum": [
					"",
					"fp16",
					"fp32",
					"onnx",
					"openvino",
					"flax"
				],
				"title": "ModelRepoVariant",
				"description": "Various hugging face variants on the diffusers format."
			},
			"ModelSourceType": {
				"type": "string",
				"enum": [
					"path",
					"url",
					"hf_repo_id"
				],
				"title": "ModelSourceType",
				"description": "Model source type."
			},
			"ModelType": {
				"type": "string",
				"enum": [
					"onnx",
					"main",
					"vae",
					"lora",
					"controlnet",
					"embedding",
					"ip_adapter",
					"clip_vision",
					"clip_embed",
					"t2i_adapter",
					"t5_encoder",
					"spandrel_image_to_image"
				],
				"title": "ModelType",
				"description": "Model type."
			},
			"ModelVariantType": {
				"type": "string",
				"enum": [
					"normal",
					"inpaint",
					"depth"
				],
				"title": "ModelVariantType",
				"description": "Variant type."
			},
			"ModelsList": {
				"properties": {
					"models": {
						"items": {
							"oneOf": [
								{
									"$ref": "#/components/schemas/MainDiffusersConfig"
								},
								{
									"$ref": "#/components/schemas/MainCheckpointConfig"
								},
								{
									"$ref": "#/components/schemas/MainBnbQuantized4bCheckpointConfig"
								},
								{
									"$ref": "#/components/schemas/VAEDiffusersConfig"
								},
								{
									"$ref": "#/components/schemas/VAECheckpointConfig"
								},
								{
									"$ref": "#/components/schemas/ControlNetDiffusersConfig"
								},
								{
									"$ref": "#/components/schemas/ControlNetCheckpointConfig"
								},
								{
									"$ref": "#/components/schemas/LoRALyCORISConfig"
								},
								{
									"$ref": "#/components/schemas/LoRADiffusersConfig"
								},
								{
									"$ref": "#/components/schemas/T5EncoderConfig"
								},
								{
									"$ref": "#/components/schemas/T5EncoderBnbQuantizedLlmInt8bConfig"
								},
								{
									"$ref": "#/components/schemas/TextualInversionFileConfig"
								},
								{
									"$ref": "#/components/schemas/TextualInversionFolderConfig"
								},
								{
									"$ref": "#/components/schemas/IPAdapterInvokeAIConfig"
								},
								{
									"$ref": "#/components/schemas/IPAdapterCheckpointConfig"
								},
								{
									"$ref": "#/components/schemas/T2IAdapterConfig"
								},
								{
									"$ref": "#/components/schemas/SpandrelImageToImageConfig"
								},
								{
									"$ref": "#/components/schemas/CLIPVisionDiffusersConfig"
								},
								{
									"$ref": "#/components/schemas/CLIPEmbedDiffusersConfig"
								}
							]
						},
						"type": "array",
						"title": "Models"
					}
				},
				"type": "object",
				"required": [
					"models"
				],
				"title": "ModelsList",
				"description": "Return list of configs."
			},
			"MultiplyInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Multiplies two numbers",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"a": {
						"default": 0,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "A",
						"type": "integer",
						"ui_hidden": false
					},
					"b": {
						"default": 0,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "B",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "mul",
						"default": "mul",
						"enum": [
							"mul"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"multiply"
				],
				"title": "Multiply Integers",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"NodeFieldValue": {
				"properties": {
					"node_path": {
						"type": "string",
						"title": "Node Path",
						"description": "The node into which this batch data item will be substituted."
					},
					"field_name": {
						"type": "string",
						"title": "Field Name",
						"description": "The field into which this batch data item will be substituted."
					},
					"value": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "number"
							},
							{
								"type": "integer"
							}
						],
						"title": "Value",
						"description": "The value to substitute into the node/field."
					}
				},
				"type": "object",
				"required": [
					"node_path",
					"field_name",
					"value"
				],
				"title": "NodeFieldValue"
			},
			"NoiseInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Generates latent noise.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"seed": {
						"default": 0,
						"description": "Seed for random number generation",
						"field_kind": "input",
						"input": "any",
						"maximum": 4294967295,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Seed",
						"type": "integer",
						"ui_hidden": false
					},
					"width": {
						"default": 512,
						"description": "Width of output (px)",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 512,
						"orig_required": false,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": 512,
						"description": "Height of output (px)",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 512,
						"orig_required": false,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"use_cpu": {
						"default": true,
						"description": "Use CPU for noise generation (for reproducible results across platforms)",
						"field_kind": "input",
						"input": "any",
						"orig_default": true,
						"orig_required": false,
						"title": "Use Cpu",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "noise",
						"default": "noise",
						"enum": [
							"noise"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"noise"
				],
				"title": "Noise",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/NoiseOutput"
				}
			},
			"NoiseOutput": {
				"class": "output",
				"description": "Invocation noise output",
				"properties": {
					"noise": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"description": "Noise tensor",
						"field_kind": "output",
						"ui_hidden": false
					},
					"width": {
						"description": "Width of output (px)",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "Height of output (px)",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "noise_output",
						"default": "noise_output",
						"enum": [
							"noise_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"noise",
					"width",
					"height",
					"type",
					"type"
				],
				"title": "NoiseOutput",
				"type": "object"
			},
			"NormalbaeImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies NormalBae processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "normalbae_image_processor",
						"default": "normalbae_image_processor",
						"enum": [
							"normalbae_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet"
				],
				"title": "Normal BAE Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"OffsetPaginatedResults_BoardDTO_": {
				"properties": {
					"limit": {
						"type": "integer",
						"title": "Limit",
						"description": "Limit of items to get"
					},
					"offset": {
						"type": "integer",
						"title": "Offset",
						"description": "Offset from which to retrieve items"
					},
					"total": {
						"type": "integer",
						"title": "Total",
						"description": "Total number of items in result"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/BoardDTO"
						},
						"type": "array",
						"title": "Items",
						"description": "Items"
					}
				},
				"type": "object",
				"required": [
					"limit",
					"offset",
					"total",
					"items"
				],
				"title": "OffsetPaginatedResults[BoardDTO]"
			},
			"OffsetPaginatedResults_ImageDTO_": {
				"properties": {
					"limit": {
						"type": "integer",
						"title": "Limit",
						"description": "Limit of items to get"
					},
					"offset": {
						"type": "integer",
						"title": "Offset",
						"description": "Offset from which to retrieve items"
					},
					"total": {
						"type": "integer",
						"title": "Total",
						"description": "Total number of items in result"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/ImageDTO"
						},
						"type": "array",
						"title": "Items",
						"description": "Items"
					}
				},
				"type": "object",
				"required": [
					"limit",
					"offset",
					"total",
					"items"
				],
				"title": "OffsetPaginatedResults[ImageDTO]"
			},
			"OutputFieldJSONSchemaExtra": {
				"description": "Extra attributes to be added to input fields and their OpenAPI schema. Used by the workflow editor\nduring schema parsing and UI rendering.",
				"properties": {
					"field_kind": {
						"$ref": "#/components/schemas/FieldKind"
					},
					"ui_hidden": {
						"title": "Ui Hidden",
						"type": "boolean"
					},
					"ui_type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UIType"
							},
							{
								"type": "null"
							}
						]
					},
					"ui_order": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"title": "Ui Order"
					}
				},
				"required": [
					"field_kind",
					"ui_hidden",
					"ui_type",
					"ui_order"
				],
				"title": "OutputFieldJSONSchemaExtra",
				"type": "object"
			},
			"PaginatedResults_WorkflowRecordListItemDTO_": {
				"properties": {
					"page": {
						"type": "integer",
						"title": "Page",
						"description": "Current Page"
					},
					"pages": {
						"type": "integer",
						"title": "Pages",
						"description": "Total number of pages"
					},
					"per_page": {
						"type": "integer",
						"title": "Per Page",
						"description": "Number of items per page"
					},
					"total": {
						"type": "integer",
						"title": "Total",
						"description": "Total number of items in result"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/WorkflowRecordListItemDTO"
						},
						"type": "array",
						"title": "Items",
						"description": "Items"
					}
				},
				"type": "object",
				"required": [
					"page",
					"pages",
					"per_page",
					"total",
					"items"
				],
				"title": "PaginatedResults[WorkflowRecordListItemDTO]"
			},
			"PairTileImageInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Pair an image with its tile properties.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The tile image.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"tile": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Tile"
							}
						],
						"default": null,
						"description": "The tile properties.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "pair_tile_image",
						"default": "pair_tile_image",
						"enum": [
							"pair_tile_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Pair Tile with Image",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/PairTileImageOutput"
				}
			},
			"PairTileImageOutput": {
				"class": "output",
				"properties": {
					"tile_with_image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TileWithImage"
							}
						],
						"description": "A tile description with its corresponding image.",
						"field_kind": "output",
						"ui_hidden": false
					},
					"type": {
						"const": "pair_tile_image_output",
						"default": "pair_tile_image_output",
						"enum": [
							"pair_tile_image_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"tile_with_image",
					"type",
					"type"
				],
				"title": "PairTileImageOutput",
				"type": "object"
			},
			"PidiImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies PIDI processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"safe": {
						"default": false,
						"description": "Whether or not to use safe mode",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Safe",
						"type": "boolean",
						"ui_hidden": false
					},
					"scribble": {
						"default": false,
						"description": "Whether or not to use scribble mode",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Scribble",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "pidi_image_processor",
						"default": "pidi_image_processor",
						"enum": [
							"pidi_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"pidi"
				],
				"title": "PIDI Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"PresetData": {
				"properties": {
					"positive_prompt": {
						"type": "string",
						"title": "Positive Prompt",
						"description": "Positive prompt"
					},
					"negative_prompt": {
						"type": "string",
						"title": "Negative Prompt",
						"description": "Negative prompt"
					}
				},
				"additionalProperties": false,
				"type": "object",
				"required": [
					"positive_prompt",
					"negative_prompt"
				],
				"title": "PresetData"
			},
			"PresetType": {
				"type": "string",
				"enum": [
					"user",
					"default",
					"project"
				],
				"title": "PresetType"
			},
			"ProgressImage": {
				"description": "The progress image sent intermittently during processing",
				"properties": {
					"width": {
						"description": "The effective width of the image in pixels",
						"title": "Width",
						"type": "integer"
					},
					"height": {
						"description": "The effective height of the image in pixels",
						"title": "Height",
						"type": "integer"
					},
					"dataURL": {
						"description": "The image data as a b64 data URL",
						"title": "Dataurl",
						"type": "string"
					}
				},
				"required": [
					"width",
					"height",
					"dataURL"
				],
				"title": "ProgressImage",
				"type": "object"
			},
			"PromptsFromFileInvocation": {
				"category": "prompt",
				"class": "invocation",
				"classification": "stable",
				"description": "Loads prompts from a text file",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"file_path": {
						"default": null,
						"description": "Path to prompt text file",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "File Path",
						"type": "string",
						"ui_hidden": false
					},
					"pre_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "String to prepend to each prompt",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Pre Prompt",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"post_prompt": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "String to append to each prompt",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Post Prompt",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"start_line": {
						"default": 1,
						"description": "Line in the file to start start from",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 1,
						"orig_required": false,
						"title": "Start Line",
						"type": "integer",
						"ui_hidden": false
					},
					"max_prompts": {
						"default": 1,
						"description": "Max lines to read from file (0=all)",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "Max Prompts",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "prompt_from_file",
						"default": "prompt_from_file",
						"enum": [
							"prompt_from_file"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"file"
				],
				"title": "Prompts from File",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/StringCollectionOutput"
				}
			},
			"PruneResult": {
				"properties": {
					"deleted": {
						"type": "integer",
						"title": "Deleted",
						"description": "Number of queue items deleted"
					}
				},
				"type": "object",
				"required": [
					"deleted"
				],
				"title": "PruneResult",
				"description": "Result of pruning the session queue"
			},
			"QueueClearedEvent": {
				"description": "Event model for queue_cleared",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"queue_id"
				],
				"title": "QueueClearedEvent",
				"type": "object"
			},
			"QueueItemStatusChangedEvent": {
				"description": "Event model for queue_item_status_changed",
				"properties": {
					"timestamp": {
						"description": "The timestamp of the event",
						"title": "Timestamp",
						"type": "integer"
					},
					"queue_id": {
						"description": "The ID of the queue",
						"title": "Queue Id",
						"type": "string"
					},
					"item_id": {
						"description": "The ID of the queue item",
						"title": "Item Id",
						"type": "integer"
					},
					"batch_id": {
						"description": "The ID of the queue batch",
						"title": "Batch Id",
						"type": "string"
					},
					"status": {
						"description": "The new status of the queue item",
						"enum": [
							"pending",
							"in_progress",
							"completed",
							"failed",
							"canceled"
						],
						"title": "Status",
						"type": "string"
					},
					"error_type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The error type, if any",
						"title": "Error Type"
					},
					"error_message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The error message, if any",
						"title": "Error Message"
					},
					"error_traceback": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The error traceback, if any",
						"title": "Error Traceback"
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The timestamp when the queue item was created",
						"title": "Created At"
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The timestamp when the queue item was last updated",
						"title": "Updated At"
					},
					"started_at": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The timestamp when the queue item was started",
						"title": "Started At"
					},
					"completed_at": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The timestamp when the queue item was completed",
						"title": "Completed At"
					},
					"batch_status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BatchStatus"
							}
						],
						"description": "The status of the batch"
					},
					"queue_status": {
						"allOf": [
							{
								"$ref": "#/components/schemas/SessionQueueStatus"
							}
						],
						"description": "The status of the queue"
					},
					"session_id": {
						"description": "The ID of the session (aka graph execution state)",
						"title": "Session Id",
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"queue_id",
					"item_id",
					"batch_id",
					"status",
					"error_type",
					"error_message",
					"error_traceback",
					"created_at",
					"updated_at",
					"started_at",
					"completed_at",
					"batch_status",
					"queue_status",
					"session_id"
				],
				"title": "QueueItemStatusChangedEvent",
				"type": "object"
			},
			"RandomFloatInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Outputs a single random float",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": false,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"low": {
						"default": 0,
						"description": "The inclusive low value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Low",
						"type": "number",
						"ui_hidden": false
					},
					"high": {
						"default": 1,
						"description": "The exclusive high value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "High",
						"type": "number",
						"ui_hidden": false
					},
					"decimals": {
						"default": 2,
						"description": "The number of decimal places to round to",
						"field_kind": "input",
						"input": "any",
						"orig_default": 2,
						"orig_required": false,
						"title": "Decimals",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "rand_float",
						"default": "rand_float",
						"enum": [
							"rand_float"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"float",
					"random"
				],
				"title": "Random Float",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/FloatOutput"
				}
			},
			"RandomIntInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Outputs a single random integer.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": false,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"low": {
						"default": 0,
						"description": "The inclusive low value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Low",
						"type": "integer",
						"ui_hidden": false
					},
					"high": {
						"default": 2147483647,
						"description": "The exclusive high value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 2147483647,
						"orig_required": false,
						"title": "High",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "rand_int",
						"default": "rand_int",
						"enum": [
							"rand_int"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"random"
				],
				"title": "Random Integer",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"RandomRangeInvocation": {
				"category": "collections",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates a collection of random numbers",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": false,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"low": {
						"default": 0,
						"description": "The inclusive low value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Low",
						"type": "integer",
						"ui_hidden": false
					},
					"high": {
						"default": 2147483647,
						"description": "The exclusive high value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 2147483647,
						"orig_required": false,
						"title": "High",
						"type": "integer",
						"ui_hidden": false
					},
					"size": {
						"default": 1,
						"description": "The number of values to generate",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Size",
						"type": "integer",
						"ui_hidden": false
					},
					"seed": {
						"default": 0,
						"description": "The seed for the RNG (omit for random)",
						"field_kind": "input",
						"input": "any",
						"maximum": 4294967295,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Seed",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "random_range",
						"default": "random_range",
						"enum": [
							"random_range"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"range",
					"integer",
					"random",
					"collection"
				],
				"title": "Random Range",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerCollectionOutput"
				}
			},
			"RangeInvocation": {
				"category": "collections",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates a range of numbers from start to stop with step",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"start": {
						"default": 0,
						"description": "The start of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Start",
						"type": "integer",
						"ui_hidden": false
					},
					"stop": {
						"default": 10,
						"description": "The stop of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 10,
						"orig_required": false,
						"title": "Stop",
						"type": "integer",
						"ui_hidden": false
					},
					"step": {
						"default": 1,
						"description": "The step of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Step",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "range",
						"default": "range",
						"enum": [
							"range"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"collection",
					"integer",
					"range"
				],
				"title": "Integer Range",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/IntegerCollectionOutput"
				}
			},
			"RangeOfSizeInvocation": {
				"category": "collections",
				"class": "invocation",
				"classification": "stable",
				"description": "Creates a range from start to start + (size * step) incremented by step",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"start": {
						"default": 0,
						"description": "The start of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Start",
						"type": "integer",
						"ui_hidden": false
					},
					"size": {
						"default": 1,
						"description": "The number of values",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Size",
						"type": "integer",
						"ui_hidden": false
					},
					"step": {
						"default": 1,
						"description": "The step of the range",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Step",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "range_of_size",
						"default": "range_of_size",
						"enum": [
							"range_of_size"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"collection",
					"integer",
					"size",
					"range"
				],
				"title": "Integer Range of Size",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/IntegerCollectionOutput"
				}
			},
			"RectangleMaskInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Create a rectangular mask.",
				"node_pack": "invokeai",
				"properties": {
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"width": {
						"default": null,
						"description": "The width of the entire mask.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": null,
						"description": "The height of the entire mask.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"x_left": {
						"default": null,
						"description": "The left x-coordinate of the rectangular masked region (inclusive).",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "X Left",
						"type": "integer",
						"ui_hidden": false
					},
					"y_top": {
						"default": null,
						"description": "The top y-coordinate of the rectangular masked region (inclusive).",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Y Top",
						"type": "integer",
						"ui_hidden": false
					},
					"rectangle_width": {
						"default": null,
						"description": "The width of the rectangular masked region.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Rectangle Width",
						"type": "integer",
						"ui_hidden": false
					},
					"rectangle_height": {
						"default": null,
						"description": "The height of the rectangular masked region.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Rectangle Height",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "rectangle_mask",
						"default": "rectangle_mask",
						"enum": [
							"rectangle_mask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"conditioning"
				],
				"title": "Create Rectangle Mask",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/MaskOutput"
				}
			},
			"RemoteModelFile": {
				"properties": {
					"url": {
						"type": "string",
						"minLength": 1,
						"format": "uri",
						"title": "Url",
						"description": "The url to download this model file"
					},
					"path": {
						"type": "string",
						"format": "path",
						"title": "Path",
						"description": "The path to the file, relative to the model root"
					},
					"size": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"title": "Size",
						"description": "The size of this file, in bytes",
						"default": 0
					},
					"sha256": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Sha256",
						"description": "SHA256 hash of this model (not always available)"
					}
				},
				"type": "object",
				"required": [
					"url",
					"path"
				],
				"title": "RemoteModelFile",
				"description": "Information about a downloadable file that forms part of a model."
			},
			"RemoveImagesFromBoardResult": {
				"properties": {
					"removed_image_names": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Removed Image Names",
						"description": "The image names that were removed from their board"
					}
				},
				"type": "object",
				"required": [
					"removed_image_names"
				],
				"title": "RemoveImagesFromBoardResult"
			},
			"ResizeLatentsInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Resizes latents to explicit width/height (in pixels). Provided dimensions are floor-divided by 8.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"width": {
						"default": null,
						"description": "Width of output (px)",
						"field_kind": "input",
						"input": "any",
						"minimum": 64,
						"multipleOf": 8,
						"orig_required": true,
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"default": null,
						"description": "Width of output (px)",
						"field_kind": "input",
						"input": "any",
						"minimum": 64,
						"multipleOf": 8,
						"orig_required": true,
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"mode": {
						"default": "bilinear",
						"description": "Interpolation mode",
						"enum": [
							"nearest",
							"linear",
							"bilinear",
							"bicubic",
							"trilinear",
							"area",
							"nearest-exact"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "bilinear",
						"orig_required": false,
						"title": "Mode",
						"type": "string",
						"ui_hidden": false
					},
					"antialias": {
						"default": false,
						"description": "Whether or not to apply antialiasing (bilinear or bicubic only)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Antialias",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "lresize",
						"default": "lresize",
						"enum": [
							"lresize"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"resize"
				],
				"title": "Resize Latents",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"ResourceOrigin": {
				"type": "string",
				"enum": [
					"internal",
					"external"
				],
				"title": "ResourceOrigin",
				"description": "The origin of a resource (eg image).\n\n- INTERNAL: The resource was created by the application.\n- EXTERNAL: The resource was not created by the application.\nThis may be a user-initiated upload, or an internal application upload (eg Canvas init image)."
			},
			"RoundInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Rounds a float to a specified number of decimal places.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": 0,
						"description": "The float value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Value",
						"type": "number",
						"ui_hidden": false
					},
					"decimals": {
						"default": 0,
						"description": "The number of decimal places",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Decimals",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "round_float",
						"default": "round_float",
						"enum": [
							"round_float"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"round"
				],
				"title": "Round Float",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/FloatOutput"
				}
			},
			"SDXLCompelPromptInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Parse prompt using compel package to conditioning.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"prompt": {
						"default": "",
						"description": "Prompt to be parsed by Compel to create a conditioning tensor",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Prompt",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"style": {
						"default": "",
						"description": "Prompt to be parsed by Compel to create a conditioning tensor",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Style",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"original_width": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Original Width",
						"type": "integer",
						"ui_hidden": false
					},
					"original_height": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Original Height",
						"type": "integer",
						"ui_hidden": false
					},
					"crop_top": {
						"default": 0,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Crop Top",
						"type": "integer",
						"ui_hidden": false
					},
					"crop_left": {
						"default": 0,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Crop Left",
						"type": "integer",
						"ui_hidden": false
					},
					"target_width": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Target Width",
						"type": "integer",
						"ui_hidden": false
					},
					"target_height": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Target Height",
						"type": "integer",
						"ui_hidden": false
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "CLIP 1",
						"ui_hidden": false
					},
					"clip2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"mask": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TensorField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "A mask defining the region that this conditioning prompt applies to.",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_compel_prompt",
						"default": "sdxl_compel_prompt",
						"enum": [
							"sdxl_compel_prompt"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"sdxl",
					"compel",
					"prompt"
				],
				"title": "SDXL Prompt",
				"type": "object",
				"version": "1.2.0",
				"output": {
					"$ref": "#/components/schemas/ConditioningOutput"
				}
			},
			"SDXLLoRACollectionLoader": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies a collection of SDXL LoRAs to the provided UNet and CLIP models.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"loras": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LoRAField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/LoRAField"
								},
								"type": "array"
							}
						],
						"default": null,
						"description": "LoRA models and weights. May be a single LoRA or collection.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "LoRAs",
						"ui_hidden": false
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP",
						"ui_hidden": false
					},
					"clip2": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_lora_collection_loader",
						"default": "sdxl_lora_collection_loader",
						"enum": [
							"sdxl_lora_collection_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model"
				],
				"title": "SDXL LoRA Collection Loader",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
				}
			},
			"SDXLLoRALoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Apply selected lora to unet and text_encoder.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"lora": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "LoRA model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "LoRA",
						"ui_hidden": false,
						"ui_type": "LoRAModelField"
					},
					"weight": {
						"default": 0.75,
						"description": "The weight at which the LoRA is applied to each model",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0.75,
						"orig_required": false,
						"title": "Weight",
						"type": "number",
						"ui_hidden": false
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP 1",
						"ui_hidden": false
					},
					"clip2": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_lora_loader",
						"default": "sdxl_lora_loader",
						"enum": [
							"sdxl_lora_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"lora",
					"model"
				],
				"title": "SDXL LoRA",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/SDXLLoRALoaderOutput"
				}
			},
			"SDXLLoRALoaderOutput": {
				"class": "output",
				"description": "SDXL LoRA Loader Output",
				"properties": {
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP 1",
						"ui_hidden": false
					},
					"clip2": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_lora_loader_output",
						"default": "sdxl_lora_loader_output",
						"enum": [
							"sdxl_lora_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"clip",
					"clip2",
					"type",
					"type"
				],
				"title": "SDXLLoRALoaderOutput",
				"type": "object"
			},
			"SDXLModelLoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Loads an sdxl base model, outputting its submodels.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "SDXL Main model (UNet, VAE, CLIP1, CLIP2) to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false,
						"ui_type": "SDXLMainModelField"
					},
					"type": {
						"const": "sdxl_model_loader",
						"default": "sdxl_model_loader",
						"enum": [
							"sdxl_model_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model",
					"sdxl"
				],
				"title": "SDXL Main Model",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/SDXLModelLoaderOutput"
				}
			},
			"SDXLModelLoaderOutput": {
				"class": "output",
				"description": "SDXL base model loader output",
				"properties": {
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"clip": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP 1",
						"ui_hidden": false
					},
					"clip2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_model_loader_output",
						"default": "sdxl_model_loader_output",
						"enum": [
							"sdxl_model_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"clip",
					"clip2",
					"vae",
					"type",
					"type"
				],
				"title": "SDXLModelLoaderOutput",
				"type": "object"
			},
			"SDXLRefinerCompelPromptInvocation": {
				"category": "conditioning",
				"class": "invocation",
				"classification": "stable",
				"description": "Parse prompt using compel package to conditioning.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"style": {
						"default": "",
						"description": "Prompt to be parsed by Compel to create a conditioning tensor",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Style",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"original_width": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Original Width",
						"type": "integer",
						"ui_hidden": false
					},
					"original_height": {
						"default": 1024,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1024,
						"orig_required": false,
						"title": "Original Height",
						"type": "integer",
						"ui_hidden": false
					},
					"crop_top": {
						"default": 0,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Crop Top",
						"type": "integer",
						"ui_hidden": false
					},
					"crop_left": {
						"default": 0,
						"description": "",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Crop Left",
						"type": "integer",
						"ui_hidden": false
					},
					"aesthetic_score": {
						"default": 6,
						"description": "The aesthetic score to apply to the conditioning tensor",
						"field_kind": "input",
						"input": "any",
						"orig_default": 6,
						"orig_required": false,
						"title": "Aesthetic Score",
						"type": "number",
						"ui_hidden": false
					},
					"clip2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"default": null,
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_refiner_compel_prompt",
						"default": "sdxl_refiner_compel_prompt",
						"enum": [
							"sdxl_refiner_compel_prompt"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"sdxl",
					"compel",
					"prompt"
				],
				"title": "SDXL Refiner Prompt",
				"type": "object",
				"version": "1.1.1",
				"output": {
					"$ref": "#/components/schemas/ConditioningOutput"
				}
			},
			"SDXLRefinerModelLoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Loads an sdxl refiner model, outputting its submodels.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "SDXL Refiner Main Modde (UNet, VAE, CLIP2) to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false,
						"ui_type": "SDXLRefinerModelField"
					},
					"type": {
						"const": "sdxl_refiner_model_loader",
						"default": "sdxl_refiner_model_loader",
						"enum": [
							"sdxl_refiner_model_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"model",
					"sdxl",
					"refiner"
				],
				"title": "SDXL Refiner Model",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/SDXLRefinerModelLoaderOutput"
				}
			},
			"SDXLRefinerModelLoaderOutput": {
				"class": "output",
				"description": "SDXL refiner model loader output",
				"properties": {
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"clip2": {
						"allOf": [
							{
								"$ref": "#/components/schemas/CLIPField"
							}
						],
						"description": "CLIP (tokenizer, text encoder, LoRAs) and skipped layer count",
						"field_kind": "output",
						"title": "CLIP 2",
						"ui_hidden": false
					},
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"type": {
						"const": "sdxl_refiner_model_loader_output",
						"default": "sdxl_refiner_model_loader_output",
						"enum": [
							"sdxl_refiner_model_loader_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"clip2",
					"vae",
					"type",
					"type"
				],
				"title": "SDXLRefinerModelLoaderOutput",
				"type": "object"
			},
			"SQLiteDirection": {
				"type": "string",
				"enum": [
					"ASC",
					"DESC"
				],
				"title": "SQLiteDirection"
			},
			"SaveImageInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "Saves an image. Unlike an image primitive, this invocation stores a copy of the image.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": false,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "save_image",
						"default": "save_image",
						"enum": [
							"save_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"image"
				],
				"title": "Save Image",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"ScaleLatentsInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Scales latents by a given factor.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"latents": {
						"allOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"scale_factor": {
						"default": null,
						"description": "The factor by which to scale",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Scale Factor",
						"type": "number",
						"ui_hidden": false
					},
					"mode": {
						"default": "bilinear",
						"description": "Interpolation mode",
						"enum": [
							"nearest",
							"linear",
							"bilinear",
							"bicubic",
							"trilinear",
							"area",
							"nearest-exact"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "bilinear",
						"orig_required": false,
						"title": "Mode",
						"type": "string",
						"ui_hidden": false
					},
					"antialias": {
						"default": false,
						"description": "Whether or not to apply antialiasing (bilinear or bicubic only)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Antialias",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "lscale",
						"default": "lscale",
						"enum": [
							"lscale"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"latents",
					"resize"
				],
				"title": "Scale Latents",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"SchedulerInvocation": {
				"category": "latents",
				"class": "invocation",
				"classification": "stable",
				"description": "Selects a scheduler.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"scheduler": {
						"default": "euler",
						"description": "Scheduler to use during inference",
						"enum": [
							"ddim",
							"ddpm",
							"deis",
							"deis_k",
							"lms",
							"lms_k",
							"pndm",
							"heun",
							"heun_k",
							"euler",
							"euler_k",
							"euler_a",
							"kdpm_2",
							"kdpm_2_k",
							"kdpm_2_a",
							"kdpm_2_a_k",
							"dpmpp_2s",
							"dpmpp_2s_k",
							"dpmpp_2m",
							"dpmpp_2m_k",
							"dpmpp_2m_sde",
							"dpmpp_2m_sde_k",
							"dpmpp_3m",
							"dpmpp_3m_k",
							"dpmpp_sde",
							"dpmpp_sde_k",
							"unipc",
							"unipc_k",
							"lcm",
							"tcd"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "euler",
						"orig_required": false,
						"title": "Scheduler",
						"type": "string",
						"ui_hidden": false,
						"ui_type": "SchedulerField"
					},
					"type": {
						"const": "scheduler",
						"default": "scheduler",
						"enum": [
							"scheduler"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"scheduler"
				],
				"title": "Scheduler",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/SchedulerOutput"
				}
			},
			"SchedulerOutput": {
				"class": "output",
				"properties": {
					"scheduler": {
						"description": "Scheduler to use during inference",
						"enum": [
							"ddim",
							"ddpm",
							"deis",
							"deis_k",
							"lms",
							"lms_k",
							"pndm",
							"heun",
							"heun_k",
							"euler",
							"euler_k",
							"euler_a",
							"kdpm_2",
							"kdpm_2_k",
							"kdpm_2_a",
							"kdpm_2_a_k",
							"dpmpp_2s",
							"dpmpp_2s_k",
							"dpmpp_2m",
							"dpmpp_2m_k",
							"dpmpp_2m_sde",
							"dpmpp_2m_sde_k",
							"dpmpp_3m",
							"dpmpp_3m_k",
							"dpmpp_sde",
							"dpmpp_sde_k",
							"unipc",
							"unipc_k",
							"lcm",
							"tcd"
						],
						"field_kind": "output",
						"title": "Scheduler",
						"type": "string",
						"ui_hidden": false,
						"ui_type": "SchedulerField"
					},
					"type": {
						"const": "scheduler_output",
						"default": "scheduler_output",
						"enum": [
							"scheduler_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"scheduler",
					"type",
					"type"
				],
				"title": "SchedulerOutput",
				"type": "object"
			},
			"SchedulerPredictionType": {
				"type": "string",
				"enum": [
					"epsilon",
					"v_prediction",
					"sample"
				],
				"title": "SchedulerPredictionType",
				"description": "Scheduler prediction type."
			},
			"SeamlessModeInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies the seamless transformation to the Model UNet and VAE.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "UNet",
						"ui_hidden": false
					},
					"vae": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "VAE model to load",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "VAE",
						"ui_hidden": false
					},
					"seamless_y": {
						"default": true,
						"description": "Specify whether Y axis is seamless",
						"field_kind": "input",
						"input": "any",
						"orig_default": true,
						"orig_required": false,
						"title": "Seamless Y",
						"type": "boolean",
						"ui_hidden": false
					},
					"seamless_x": {
						"default": true,
						"description": "Specify whether X axis is seamless",
						"field_kind": "input",
						"input": "any",
						"orig_default": true,
						"orig_required": false,
						"title": "Seamless X",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "seamless",
						"default": "seamless",
						"enum": [
							"seamless"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"seamless",
					"model"
				],
				"title": "Seamless",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/SeamlessModeOutput"
				}
			},
			"SeamlessModeOutput": {
				"class": "output",
				"description": "Modified Seamless Model output",
				"properties": {
					"unet": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"vae": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"type": {
						"const": "seamless_output",
						"default": "seamless_output",
						"enum": [
							"seamless_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"vae",
					"type",
					"type"
				],
				"title": "SeamlessModeOutput",
				"type": "object"
			},
			"SegmentAnythingInvocation": {
				"category": "segmentation",
				"class": "invocation",
				"classification": "stable",
				"description": "Runs a Segment Anything Model.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"model": {
						"default": null,
						"description": "The Segment Anything model to use.",
						"enum": [
							"segment-anything-base",
							"segment-anything-large",
							"segment-anything-huge"
						],
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Model",
						"type": "string",
						"ui_hidden": false
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to segment.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"bounding_boxes": {
						"default": null,
						"description": "The bounding boxes to prompt the SAM model with.",
						"field_kind": "input",
						"input": "any",
						"items": {
							"$ref": "#/components/schemas/BoundingBoxField"
						},
						"orig_required": true,
						"title": "Bounding Boxes",
						"type": "array",
						"ui_hidden": false
					},
					"apply_polygon_refinement": {
						"default": true,
						"description": "Whether to apply polygon refinement to the masks. This will smooth the edges of the masks slightly and ensure that each mask consists of a single closed polygon (before merging).",
						"field_kind": "input",
						"input": "any",
						"orig_default": true,
						"orig_required": false,
						"title": "Apply Polygon Refinement",
						"type": "boolean",
						"ui_hidden": false
					},
					"mask_filter": {
						"default": "all",
						"description": "The filtering to apply to the detected masks before merging them into a final output.",
						"enum": [
							"all",
							"largest",
							"highest_box_score"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "all",
						"orig_required": false,
						"title": "Mask Filter",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "segment_anything",
						"default": "segment_anything",
						"enum": [
							"segment_anything"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"prompt",
					"segmentation"
				],
				"title": "Segment Anything",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/MaskOutput"
				}
			},
			"SegmentAnythingProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies segment anything processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"detect_resolution": {
						"default": 512,
						"description": "Pixel resolution for detection",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Detect Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"image_resolution": {
						"default": 512,
						"description": "Pixel resolution for output image",
						"field_kind": "input",
						"input": "any",
						"minimum": 1,
						"orig_default": 512,
						"orig_required": false,
						"title": "Image Resolution",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "segment_anything_processor",
						"default": "segment_anything_processor",
						"enum": [
							"segment_anything_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"segmentanything"
				],
				"title": "Segment Anything Processor",
				"type": "object",
				"version": "1.2.4",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"SessionProcessorStatus": {
				"properties": {
					"is_started": {
						"type": "boolean",
						"title": "Is Started",
						"description": "Whether the session processor is started"
					},
					"is_processing": {
						"type": "boolean",
						"title": "Is Processing",
						"description": "Whether a session is being processed"
					}
				},
				"type": "object",
				"required": [
					"is_started",
					"is_processing"
				],
				"title": "SessionProcessorStatus"
			},
			"SessionQueueAndProcessorStatus": {
				"properties": {
					"queue": {
						"$ref": "#/components/schemas/SessionQueueStatus"
					},
					"processor": {
						"$ref": "#/components/schemas/SessionProcessorStatus"
					}
				},
				"type": "object",
				"required": [
					"queue",
					"processor"
				],
				"title": "SessionQueueAndProcessorStatus",
				"description": "The overall status of session queue and processor"
			},
			"SessionQueueItem": {
				"properties": {
					"item_id": {
						"type": "integer",
						"title": "Item Id",
						"description": "The identifier of the session queue item"
					},
					"status": {
						"type": "string",
						"enum": [
							"pending",
							"in_progress",
							"completed",
							"failed",
							"canceled"
						],
						"title": "Status",
						"description": "The status of this queue item",
						"default": "pending"
					},
					"priority": {
						"type": "integer",
						"title": "Priority",
						"description": "The priority of this queue item",
						"default": 0
					},
					"batch_id": {
						"type": "string",
						"title": "Batch Id",
						"description": "The ID of the batch associated with this queue item"
					},
					"session_id": {
						"type": "string",
						"title": "Session Id",
						"description": "The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed."
					},
					"error_type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Type",
						"description": "The error type if this queue item errored"
					},
					"error_message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Message",
						"description": "The error message if this queue item errored"
					},
					"error_traceback": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Traceback",
						"description": "The error traceback if this queue item errored"
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "When this queue item was created"
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "When this queue item was updated"
					},
					"started_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Started At",
						"description": "When this queue item was started"
					},
					"completed_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Completed At",
						"description": "When this queue item was completed"
					},
					"queue_id": {
						"type": "string",
						"title": "Queue Id",
						"description": "The id of the queue with which this item is associated"
					},
					"field_values": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/NodeFieldValue"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Field Values",
						"description": "The field values that were used for this queue item"
					},
					"session": {
						"allOf": [
							{
								"$ref": "#/components/schemas/GraphExecutionState"
							}
						],
						"description": "The fully-populated session to be executed"
					},
					"workflow": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/WorkflowWithoutID"
							},
							{
								"type": "null"
							}
						],
						"description": "The workflow associated with this queue item"
					}
				},
				"type": "object",
				"required": [
					"item_id",
					"status",
					"batch_id",
					"queue_id",
					"session_id",
					"session",
					"priority",
					"session_id",
					"created_at",
					"updated_at"
				],
				"title": "SessionQueueItem"
			},
			"SessionQueueItemDTO": {
				"properties": {
					"item_id": {
						"type": "integer",
						"title": "Item Id",
						"description": "The identifier of the session queue item"
					},
					"status": {
						"type": "string",
						"enum": [
							"pending",
							"in_progress",
							"completed",
							"failed",
							"canceled"
						],
						"title": "Status",
						"description": "The status of this queue item",
						"default": "pending"
					},
					"priority": {
						"type": "integer",
						"title": "Priority",
						"description": "The priority of this queue item",
						"default": 0
					},
					"batch_id": {
						"type": "string",
						"title": "Batch Id",
						"description": "The ID of the batch associated with this queue item"
					},
					"session_id": {
						"type": "string",
						"title": "Session Id",
						"description": "The ID of the session associated with this queue item. The session doesn't exist in graph_executions until the queue item is executed."
					},
					"error_type": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Type",
						"description": "The error type if this queue item errored"
					},
					"error_message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Message",
						"description": "The error message if this queue item errored"
					},
					"error_traceback": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Error Traceback",
						"description": "The error traceback if this queue item errored"
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "When this queue item was created"
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "When this queue item was updated"
					},
					"started_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Started At",
						"description": "When this queue item was started"
					},
					"completed_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Completed At",
						"description": "When this queue item was completed"
					},
					"queue_id": {
						"type": "string",
						"title": "Queue Id",
						"description": "The id of the queue with which this item is associated"
					},
					"field_values": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/NodeFieldValue"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Field Values",
						"description": "The field values that were used for this queue item"
					}
				},
				"type": "object",
				"required": [
					"item_id",
					"status",
					"batch_id",
					"queue_id",
					"session_id",
					"priority",
					"session_id",
					"created_at",
					"updated_at"
				],
				"title": "SessionQueueItemDTO"
			},
			"SessionQueueStatus": {
				"properties": {
					"queue_id": {
						"type": "string",
						"title": "Queue Id",
						"description": "The ID of the queue"
					},
					"item_id": {
						"anyOf": [
							{
								"type": "integer"
							},
							{
								"type": "null"
							}
						],
						"title": "Item Id",
						"description": "The current queue item id"
					},
					"batch_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Batch Id",
						"description": "The current queue item's batch id"
					},
					"session_id": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Session Id",
						"description": "The current queue item's session id"
					},
					"pending": {
						"type": "integer",
						"title": "Pending",
						"description": "Number of queue items with status 'pending'"
					},
					"in_progress": {
						"type": "integer",
						"title": "In Progress",
						"description": "Number of queue items with status 'in_progress'"
					},
					"completed": {
						"type": "integer",
						"title": "Completed",
						"description": "Number of queue items with status 'complete'"
					},
					"failed": {
						"type": "integer",
						"title": "Failed",
						"description": "Number of queue items with status 'error'"
					},
					"canceled": {
						"type": "integer",
						"title": "Canceled",
						"description": "Number of queue items with status 'canceled'"
					},
					"total": {
						"type": "integer",
						"title": "Total",
						"description": "Total number of queue items"
					}
				},
				"type": "object",
				"required": [
					"queue_id",
					"item_id",
					"batch_id",
					"session_id",
					"pending",
					"in_progress",
					"completed",
					"failed",
					"canceled",
					"total"
				],
				"title": "SessionQueueStatus"
			},
			"ShowImageInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "stable",
				"description": "Displays a provided image using the OS image viewer, and passes it forward in the pipeline.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to show",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "show_image",
						"default": "show_image",
						"enum": [
							"show_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image"
				],
				"title": "Show Image",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"SpandrelImageToImageAutoscaleInvocation": {
				"category": "upscale",
				"class": "invocation",
				"classification": "stable",
				"description": "Run any spandrel image-to-image model (https://github.com/chaiNNer-org/spandrel) until the target scale is reached.",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The input image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"image_to_image_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "Image-to-Image model",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Image-to-Image Model",
						"ui_hidden": false,
						"ui_type": "SpandrelImageToImageModelField"
					},
					"tile_size": {
						"default": 512,
						"description": "The tile size for tiled image-to-image. Set to 0 to disable tiling.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "spandrel_image_to_image_autoscale",
						"default": "spandrel_image_to_image_autoscale",
						"enum": [
							"spandrel_image_to_image_autoscale"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					},
					"scale": {
						"default": 4,
						"description": "The final scale of the output image. If the model does not upscale the image, this will be ignored.",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"maximum": 16,
						"orig_default": 4,
						"orig_required": false,
						"title": "Scale",
						"type": "number",
						"ui_hidden": false
					},
					"fit_to_multiple_of_8": {
						"default": false,
						"description": "If true, the output image will be resized to the nearest multiple of 8 in both dimensions.",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Fit To Multiple Of 8",
						"type": "boolean",
						"ui_hidden": false
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"upscale"
				],
				"title": "Image-to-Image (Autoscale)",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"SpandrelImageToImageConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"spandrel_image_to_image"
						],
						"const": "spandrel_image_to_image",
						"title": "Type",
						"default": "spandrel_image_to_image"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint"
						],
						"const": "checkpoint",
						"title": "Format",
						"default": "checkpoint"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "SpandrelImageToImageConfig",
				"description": "Model config for Spandrel Image to Image models."
			},
			"SpandrelImageToImageInvocation": {
				"category": "upscale",
				"class": "invocation",
				"classification": "stable",
				"description": "Run any spandrel image-to-image model (https://github.com/chaiNNer-org/spandrel).",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The input image",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"image_to_image_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "Image-to-Image model",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "Image-to-Image Model",
						"ui_hidden": false,
						"ui_type": "SpandrelImageToImageModelField"
					},
					"tile_size": {
						"default": 512,
						"description": "The tile size for tiled image-to-image. Set to 0 to disable tiling.",
						"field_kind": "input",
						"input": "any",
						"orig_default": 512,
						"orig_required": false,
						"title": "Tile Size",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "spandrel_image_to_image",
						"default": "spandrel_image_to_image",
						"enum": [
							"spandrel_image_to_image"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"upscale"
				],
				"title": "Image-to-Image",
				"type": "object",
				"version": "1.3.0",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"StarterModel": {
				"properties": {
					"description": {
						"type": "string",
						"title": "Description"
					},
					"source": {
						"type": "string",
						"title": "Source"
					},
					"name": {
						"type": "string",
						"title": "Name"
					},
					"base": {
						"$ref": "#/components/schemas/BaseModelType"
					},
					"type": {
						"$ref": "#/components/schemas/ModelType"
					},
					"format": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelFormat"
							},
							{
								"type": "null"
							}
						]
					},
					"is_installed": {
						"type": "boolean",
						"title": "Is Installed",
						"default": false
					},
					"dependencies": {
						"anyOf": [
							{
								"items": {
									"$ref": "#/components/schemas/StarterModelWithoutDependencies"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"title": "Dependencies"
					}
				},
				"type": "object",
				"required": [
					"description",
					"source",
					"name",
					"base",
					"type"
				],
				"title": "StarterModel"
			},
			"StarterModelWithoutDependencies": {
				"properties": {
					"description": {
						"type": "string",
						"title": "Description"
					},
					"source": {
						"type": "string",
						"title": "Source"
					},
					"name": {
						"type": "string",
						"title": "Name"
					},
					"base": {
						"$ref": "#/components/schemas/BaseModelType"
					},
					"type": {
						"$ref": "#/components/schemas/ModelType"
					},
					"format": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelFormat"
							},
							{
								"type": "null"
							}
						]
					},
					"is_installed": {
						"type": "boolean",
						"title": "Is Installed",
						"default": false
					}
				},
				"type": "object",
				"required": [
					"description",
					"source",
					"name",
					"base",
					"type"
				],
				"title": "StarterModelWithoutDependencies"
			},
			"StepParamEasingInvocation": {
				"category": "step",
				"class": "invocation",
				"classification": "stable",
				"description": "Experimental per-step parameter easing for denoising steps",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"easing": {
						"default": "Linear",
						"description": "The easing function to use",
						"enum": [
							"Linear",
							"QuadIn",
							"QuadOut",
							"QuadInOut",
							"CubicIn",
							"CubicOut",
							"CubicInOut",
							"QuarticIn",
							"QuarticOut",
							"QuarticInOut",
							"QuinticIn",
							"QuinticOut",
							"QuinticInOut",
							"SineIn",
							"SineOut",
							"SineInOut",
							"CircularIn",
							"CircularOut",
							"CircularInOut",
							"ExponentialIn",
							"ExponentialOut",
							"ExponentialInOut",
							"ElasticIn",
							"ElasticOut",
							"ElasticInOut",
							"BackIn",
							"BackOut",
							"BackInOut",
							"BounceIn",
							"BounceOut",
							"BounceInOut"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "Linear",
						"orig_required": false,
						"title": "Easing",
						"type": "string",
						"ui_hidden": false
					},
					"num_steps": {
						"default": 20,
						"description": "number of denoising steps",
						"field_kind": "input",
						"input": "any",
						"orig_default": 20,
						"orig_required": false,
						"title": "Num Steps",
						"type": "integer",
						"ui_hidden": false
					},
					"start_value": {
						"default": 0,
						"description": "easing starting value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Start Value",
						"type": "number",
						"ui_hidden": false
					},
					"end_value": {
						"default": 1,
						"description": "easing ending value",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "End Value",
						"type": "number",
						"ui_hidden": false
					},
					"start_step_percent": {
						"default": 0,
						"description": "fraction of steps at which to start easing",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "Start Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"end_step_percent": {
						"default": 1,
						"description": "fraction of steps after which to end easing",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "End Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"pre_start_value": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "value before easing start",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Pre Start Value",
						"ui_hidden": false
					},
					"post_end_value": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "value after easing end",
						"field_kind": "input",
						"input": "any",
						"orig_required": false,
						"title": "Post End Value",
						"ui_hidden": false
					},
					"mirror": {
						"default": false,
						"description": "include mirror of easing function",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Mirror",
						"type": "boolean",
						"ui_hidden": false
					},
					"show_easing_plot": {
						"default": false,
						"description": "show easing plot",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Show Easing Plot",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "step_param_easing",
						"default": "step_param_easing",
						"enum": [
							"step_param_easing"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"step",
					"easing"
				],
				"title": "Step Param Easing",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/FloatCollectionOutput"
				}
			},
			"String2Output": {
				"class": "output",
				"description": "Base class for invocations that output two strings",
				"properties": {
					"string_1": {
						"description": "string 1",
						"field_kind": "output",
						"title": "String 1",
						"type": "string",
						"ui_hidden": false
					},
					"string_2": {
						"description": "string 2",
						"field_kind": "output",
						"title": "String 2",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "string_2_output",
						"default": "string_2_output",
						"enum": [
							"string_2_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"string_1",
					"string_2",
					"type",
					"type"
				],
				"title": "String2Output",
				"type": "object"
			},
			"StringCollectionInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A collection of string primitive values",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"collection": {
						"default": [],
						"description": "The collection of string values",
						"field_kind": "input",
						"input": "any",
						"items": {
							"type": "string"
						},
						"orig_default": [],
						"orig_required": false,
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "string_collection",
						"default": "string_collection",
						"enum": [
							"string_collection"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"string",
					"collection"
				],
				"title": "String Collection Primitive",
				"type": "object",
				"version": "1.0.2",
				"output": {
					"$ref": "#/components/schemas/StringCollectionOutput"
				}
			},
			"StringCollectionOutput": {
				"class": "output",
				"description": "Base class for nodes that output a collection of strings",
				"properties": {
					"collection": {
						"description": "The output strings",
						"field_kind": "output",
						"items": {
							"type": "string"
						},
						"title": "Collection",
						"type": "array",
						"ui_hidden": false
					},
					"type": {
						"const": "string_collection_output",
						"default": "string_collection_output",
						"enum": [
							"string_collection_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"collection",
					"type",
					"type"
				],
				"title": "StringCollectionOutput",
				"type": "object"
			},
			"StringInvocation": {
				"category": "primitives",
				"class": "invocation",
				"classification": "stable",
				"description": "A string primitive value",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"value": {
						"default": "",
						"description": "The string value",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Value",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"type": {
						"const": "string",
						"default": "string",
						"enum": [
							"string"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"primitives",
					"string"
				],
				"title": "String Primitive",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringOutput"
				}
			},
			"StringJoinInvocation": {
				"category": "string",
				"class": "invocation",
				"classification": "stable",
				"description": "Joins string left to string right",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"string_left": {
						"default": "",
						"description": "String Left",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String Left",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"string_right": {
						"default": "",
						"description": "String Right",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String Right",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"type": {
						"const": "string_join",
						"default": "string_join",
						"enum": [
							"string_join"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"string",
					"join"
				],
				"title": "String Join",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringOutput"
				}
			},
			"StringJoinThreeInvocation": {
				"category": "string",
				"class": "invocation",
				"classification": "stable",
				"description": "Joins string left to string middle to string right",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"string_left": {
						"default": "",
						"description": "String Left",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String Left",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"string_middle": {
						"default": "",
						"description": "String Middle",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String Middle",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"string_right": {
						"default": "",
						"description": "String Right",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String Right",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"type": {
						"const": "string_join_three",
						"default": "string_join_three",
						"enum": [
							"string_join_three"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"string",
					"join"
				],
				"title": "String Join Three",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringOutput"
				}
			},
			"StringOutput": {
				"class": "output",
				"description": "Base class for nodes that output a single string",
				"properties": {
					"value": {
						"description": "The output string",
						"field_kind": "output",
						"title": "Value",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "string_output",
						"default": "string_output",
						"enum": [
							"string_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"value",
					"type",
					"type"
				],
				"title": "StringOutput",
				"type": "object"
			},
			"StringPosNegOutput": {
				"class": "output",
				"description": "Base class for invocations that output a positive and negative string",
				"properties": {
					"positive_string": {
						"description": "Positive string",
						"field_kind": "output",
						"title": "Positive String",
						"type": "string",
						"ui_hidden": false
					},
					"negative_string": {
						"description": "Negative string",
						"field_kind": "output",
						"title": "Negative String",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "string_pos_neg_output",
						"default": "string_pos_neg_output",
						"enum": [
							"string_pos_neg_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"positive_string",
					"negative_string",
					"type",
					"type"
				],
				"title": "StringPosNegOutput",
				"type": "object"
			},
			"StringReplaceInvocation": {
				"category": "string",
				"class": "invocation",
				"classification": "stable",
				"description": "Replaces the search string with the replace string",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"string": {
						"default": "",
						"description": "String to work on",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"search_string": {
						"default": "",
						"description": "String to search for",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Search String",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"replace_string": {
						"default": "",
						"description": "String to replace the search",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Replace String",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"use_regex": {
						"default": false,
						"description": "Use search string as a regex expression (non regex is case insensitive)",
						"field_kind": "input",
						"input": "any",
						"orig_default": false,
						"orig_required": false,
						"title": "Use Regex",
						"type": "boolean",
						"ui_hidden": false
					},
					"type": {
						"const": "string_replace",
						"default": "string_replace",
						"enum": [
							"string_replace"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"string",
					"replace",
					"regex"
				],
				"title": "String Replace",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringOutput"
				}
			},
			"StringSplitInvocation": {
				"category": "string",
				"class": "invocation",
				"classification": "stable",
				"description": "Splits string into two strings, based on the first occurance of the delimiter. The delimiter will be removed from the string",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"string": {
						"default": "",
						"description": "String to split",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"delimiter": {
						"default": "",
						"description": "Delimiter to spilt with. blank will split on the first whitespace",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "Delimiter",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "string_split",
						"default": "string_split",
						"enum": [
							"string_split"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"string",
					"split"
				],
				"title": "String Split",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/String2Output"
				}
			},
			"StringSplitNegInvocation": {
				"category": "string",
				"class": "invocation",
				"classification": "stable",
				"description": "Splits string into two strings, inside [] goes into negative string everthing else goes into positive string. Each [ and ] character is replaced with a space",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"string": {
						"default": "",
						"description": "String to split",
						"field_kind": "input",
						"input": "any",
						"orig_default": "",
						"orig_required": false,
						"title": "String",
						"type": "string",
						"ui_component": "textarea",
						"ui_hidden": false
					},
					"type": {
						"const": "string_split_neg",
						"default": "string_split_neg",
						"enum": [
							"string_split_neg"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"string",
					"split",
					"negative"
				],
				"title": "String Split Negative",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/StringPosNegOutput"
				}
			},
			"StylePresetRecordWithImage": {
				"properties": {
					"name": {
						"type": "string",
						"title": "Name",
						"description": "The name of the style preset."
					},
					"preset_data": {
						"allOf": [
							{
								"$ref": "#/components/schemas/PresetData"
							}
						],
						"description": "The preset data"
					},
					"type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/PresetType"
							}
						],
						"description": "The type of style preset"
					},
					"id": {
						"type": "string",
						"title": "Id",
						"description": "The style preset ID."
					},
					"image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Image",
						"description": "The path for image"
					}
				},
				"type": "object",
				"required": [
					"name",
					"preset_data",
					"type",
					"id",
					"image"
				],
				"title": "StylePresetRecordWithImage"
			},
			"SubModelType": {
				"description": "Submodel type.",
				"enum": [
					"unet",
					"transformer",
					"text_encoder",
					"text_encoder_2",
					"tokenizer",
					"tokenizer_2",
					"vae",
					"vae_decoder",
					"vae_encoder",
					"scheduler",
					"safety_checker"
				],
				"title": "SubModelType",
				"type": "string"
			},
			"SubtractInvocation": {
				"category": "math",
				"class": "invocation",
				"classification": "stable",
				"description": "Subtracts two numbers",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"a": {
						"default": 0,
						"description": "The first number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "A",
						"type": "integer",
						"ui_hidden": false
					},
					"b": {
						"default": 0,
						"description": "The second number",
						"field_kind": "input",
						"input": "any",
						"orig_default": 0,
						"orig_required": false,
						"title": "B",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "sub",
						"default": "sub",
						"enum": [
							"sub"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"math",
					"subtract"
				],
				"title": "Subtract Integers",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/IntegerOutput"
				}
			},
			"T2IAdapterConfig": {
				"properties": {
					"default_settings": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ControlAdapterDefaultSettings"
							},
							{
								"type": "null"
							}
						],
						"description": "Default settings for this model"
					},
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					},
					"repo_variant": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ModelRepoVariant"
							},
							{
								"type": "null"
							}
						],
						"default": ""
					},
					"type": {
						"type": "string",
						"enum": [
							"t2i_adapter"
						],
						"const": "t2i_adapter",
						"title": "Type",
						"default": "t2i_adapter"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "T2IAdapterConfig",
				"description": "Model config for T2I."
			},
			"T2IAdapterField": {
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The T2I-Adapter image prompt."
					},
					"t2i_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The T2I-Adapter model to use."
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the T2I-Adapter",
						"title": "Weight"
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the T2I-Adapter is first applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the T2I-Adapter is last applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "End Step Percent",
						"type": "number"
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode to use",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"title": "Resize Mode",
						"type": "string"
					}
				},
				"required": [
					"image",
					"t2i_adapter_model"
				],
				"title": "T2IAdapterField",
				"type": "object"
			},
			"T2IAdapterInvocation": {
				"category": "t2i_adapter",
				"class": "invocation",
				"classification": "stable",
				"description": "Collects T2I-Adapter info to pass to other nodes.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The IP-Adapter image prompt.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"t2i_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "The T2I-Adapter model.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "T2I-Adapter Model",
						"ui_hidden": false,
						"ui_order": -1,
						"ui_type": "T2IAdapterModelField"
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the T2I-Adapter",
						"field_kind": "input",
						"input": "any",
						"orig_default": 1,
						"orig_required": false,
						"title": "Weight",
						"ui_hidden": false
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the T2I-Adapter is first applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Begin Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the T2I-Adapter is last applied (% of total steps)",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "End Step Percent",
						"type": "number",
						"ui_hidden": false
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode applied to the T2I-Adapter input image so that it matches the target output size.",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "just_resize",
						"orig_required": false,
						"title": "Resize Mode",
						"type": "string",
						"ui_hidden": false
					},
					"type": {
						"const": "t2i_adapter",
						"default": "t2i_adapter",
						"enum": [
							"t2i_adapter"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"t2i_adapter",
					"control"
				],
				"title": "T2I-Adapter",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/T2IAdapterOutput"
				}
			},
			"T2IAdapterMetadataField": {
				"properties": {
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"description": "The control image."
					},
					"processed_image": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The control image, after processing."
					},
					"t2i_adapter_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "The T2I-Adapter model to use."
					},
					"weight": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 1,
						"description": "The weight given to the T2I-Adapter",
						"title": "Weight"
					},
					"begin_step_percent": {
						"default": 0,
						"description": "When the T2I-Adapter is first applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "Begin Step Percent",
						"type": "number"
					},
					"end_step_percent": {
						"default": 1,
						"description": "When the T2I-Adapter is last applied (% of total steps)",
						"maximum": 1,
						"minimum": 0,
						"title": "End Step Percent",
						"type": "number"
					},
					"resize_mode": {
						"default": "just_resize",
						"description": "The resize mode to use",
						"enum": [
							"just_resize",
							"crop_resize",
							"fill_resize",
							"just_resize_simple"
						],
						"title": "Resize Mode",
						"type": "string"
					}
				},
				"required": [
					"image",
					"t2i_adapter_model"
				],
				"title": "T2IAdapterMetadataField",
				"type": "object"
			},
			"T2IAdapterOutput": {
				"class": "output",
				"properties": {
					"t2i_adapter": {
						"allOf": [
							{
								"$ref": "#/components/schemas/T2IAdapterField"
							}
						],
						"description": "T2I-Adapter(s) to apply",
						"field_kind": "output",
						"title": "T2I Adapter",
						"ui_hidden": false
					},
					"type": {
						"const": "t2i_adapter_output",
						"default": "t2i_adapter_output",
						"enum": [
							"t2i_adapter_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"t2i_adapter",
					"type",
					"type"
				],
				"title": "T2IAdapterOutput",
				"type": "object"
			},
			"T5EncoderBnbQuantizedLlmInt8bConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"t5_encoder"
						],
						"const": "t5_encoder",
						"title": "Type",
						"default": "t5_encoder"
					},
					"format": {
						"type": "string",
						"enum": [
							"bnb_quantized_int8b"
						],
						"const": "bnb_quantized_int8b",
						"title": "Format",
						"default": "bnb_quantized_int8b"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "T5EncoderBnbQuantizedLlmInt8bConfig"
			},
			"T5EncoderConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"t5_encoder"
						],
						"const": "t5_encoder",
						"title": "Type",
						"default": "t5_encoder"
					},
					"format": {
						"type": "string",
						"enum": [
							"t5_encoder"
						],
						"const": "t5_encoder",
						"title": "Format",
						"default": "t5_encoder"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "T5EncoderConfig"
			},
			"T5EncoderField": {
				"properties": {
					"tokenizer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load tokenizer submodel"
					},
					"text_encoder": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load text_encoder submodel"
					}
				},
				"required": [
					"tokenizer",
					"text_encoder"
				],
				"title": "T5EncoderField",
				"type": "object"
			},
			"TBLR": {
				"properties": {
					"top": {
						"title": "Top",
						"type": "integer"
					},
					"bottom": {
						"title": "Bottom",
						"type": "integer"
					},
					"left": {
						"title": "Left",
						"type": "integer"
					},
					"right": {
						"title": "Right",
						"type": "integer"
					}
				},
				"required": [
					"top",
					"bottom",
					"left",
					"right"
				],
				"title": "TBLR",
				"type": "object"
			},
			"TensorField": {
				"description": "A tensor primitive field.",
				"properties": {
					"tensor_name": {
						"description": "The name of a tensor.",
						"title": "Tensor Name",
						"type": "string"
					}
				},
				"required": [
					"tensor_name"
				],
				"title": "TensorField",
				"type": "object"
			},
			"TextualInversionFileConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"embedding"
						],
						"const": "embedding",
						"title": "Type",
						"default": "embedding"
					},
					"format": {
						"type": "string",
						"enum": [
							"embedding_file"
						],
						"const": "embedding_file",
						"title": "Format",
						"default": "embedding_file"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "TextualInversionFileConfig",
				"description": "Model config for textual inversion embeddings."
			},
			"TextualInversionFolderConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"embedding"
						],
						"const": "embedding",
						"title": "Type",
						"default": "embedding"
					},
					"format": {
						"type": "string",
						"enum": [
							"embedding_folder"
						],
						"const": "embedding_folder",
						"title": "Format",
						"default": "embedding_folder"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "TextualInversionFolderConfig",
				"description": "Model config for textual inversion embeddings."
			},
			"Tile": {
				"properties": {
					"coords": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TBLR"
							}
						],
						"description": "The coordinates of this tile relative to its parent image."
					},
					"overlap": {
						"allOf": [
							{
								"$ref": "#/components/schemas/TBLR"
							}
						],
						"description": "The amount of overlap with adjacent tiles on each side of this tile."
					}
				},
				"required": [
					"coords",
					"overlap"
				],
				"title": "Tile",
				"type": "object"
			},
			"TileResamplerProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Tile resampler processor",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"down_sampling_rate": {
						"default": 1,
						"description": "Down sampling rate",
						"field_kind": "input",
						"input": "any",
						"maximum": 8,
						"minimum": 1,
						"orig_default": 1,
						"orig_required": false,
						"title": "Down Sampling Rate",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "tile_image_processor",
						"default": "tile_image_processor",
						"enum": [
							"tile_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"tile"
				],
				"title": "Tile Resample Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"TileToPropertiesInvocation": {
				"category": "tiles",
				"class": "invocation",
				"classification": "beta",
				"description": "Split a Tile into its individual properties.",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"tile": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Tile"
							}
						],
						"default": null,
						"description": "The tile to split into properties.",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "tile_to_properties",
						"default": "tile_to_properties",
						"enum": [
							"tile_to_properties"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"tiles"
				],
				"title": "Tile to Properties",
				"type": "object",
				"version": "1.0.1",
				"output": {
					"$ref": "#/components/schemas/TileToPropertiesOutput"
				}
			},
			"TileToPropertiesOutput": {
				"class": "output",
				"properties": {
					"coords_left": {
						"description": "Left coordinate of the tile relative to its parent image.",
						"field_kind": "output",
						"title": "Coords Left",
						"type": "integer",
						"ui_hidden": false
					},
					"coords_right": {
						"description": "Right coordinate of the tile relative to its parent image.",
						"field_kind": "output",
						"title": "Coords Right",
						"type": "integer",
						"ui_hidden": false
					},
					"coords_top": {
						"description": "Top coordinate of the tile relative to its parent image.",
						"field_kind": "output",
						"title": "Coords Top",
						"type": "integer",
						"ui_hidden": false
					},
					"coords_bottom": {
						"description": "Bottom coordinate of the tile relative to its parent image.",
						"field_kind": "output",
						"title": "Coords Bottom",
						"type": "integer",
						"ui_hidden": false
					},
					"width": {
						"description": "The width of the tile. Equal to coords_right - coords_left.",
						"field_kind": "output",
						"title": "Width",
						"type": "integer",
						"ui_hidden": false
					},
					"height": {
						"description": "The height of the tile. Equal to coords_bottom - coords_top.",
						"field_kind": "output",
						"title": "Height",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap_top": {
						"description": "Overlap between this tile and its top neighbor.",
						"field_kind": "output",
						"title": "Overlap Top",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap_bottom": {
						"description": "Overlap between this tile and its bottom neighbor.",
						"field_kind": "output",
						"title": "Overlap Bottom",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap_left": {
						"description": "Overlap between this tile and its left neighbor.",
						"field_kind": "output",
						"title": "Overlap Left",
						"type": "integer",
						"ui_hidden": false
					},
					"overlap_right": {
						"description": "Overlap between this tile and its right neighbor.",
						"field_kind": "output",
						"title": "Overlap Right",
						"type": "integer",
						"ui_hidden": false
					},
					"type": {
						"const": "tile_to_properties_output",
						"default": "tile_to_properties_output",
						"enum": [
							"tile_to_properties_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"coords_left",
					"coords_right",
					"coords_top",
					"coords_bottom",
					"width",
					"height",
					"overlap_top",
					"overlap_bottom",
					"overlap_left",
					"overlap_right",
					"type",
					"type"
				],
				"title": "TileToPropertiesOutput",
				"type": "object"
			},
			"TileWithImage": {
				"properties": {
					"tile": {
						"$ref": "#/components/schemas/Tile"
					},
					"image": {
						"$ref": "#/components/schemas/ImageField"
					}
				},
				"required": [
					"tile",
					"image"
				],
				"title": "TileWithImage",
				"type": "object"
			},
			"TiledMultiDiffusionDenoiseLatents": {
				"category": "latents",
				"class": "invocation",
				"classification": "beta",
				"description": "Tiled Multi-Diffusion denoising.\n\nThis node handles automatically tiling the input image, and is primarily intended for global refinement of images\nin tiled upscaling workflows. Future Multi-Diffusion nodes should allow the user to specify custom regions with\ndifferent parameters for each region to harness the full power of Multi-Diffusion.\n\nThis node has a similar interface to the `DenoiseLatents` node, but it has a reduced feature set (no IP-Adapter,\nT2I-Adapter, masking, etc.).",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"positive_conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							}
						],
						"default": null,
						"description": "Positive conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"negative_conditioning": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ConditioningField"
							}
						],
						"default": null,
						"description": "Negative conditioning tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"ui_hidden": false
					},
					"noise": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Noise tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"latents": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LatentsField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Latents tensor",
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"tile_height": {
						"default": 1024,
						"description": "Height of the tiles in image space.",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Tile Height",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_width": {
						"default": 1024,
						"description": "Width of the tiles in image space.",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 1024,
						"orig_required": false,
						"title": "Tile Width",
						"type": "integer",
						"ui_hidden": false
					},
					"tile_overlap": {
						"default": 32,
						"description": "The overlap between adjacent tiles in pixel space. (Of course, tile merging is applied in latent space.) Tiles will be cropped during merging (if necessary) to ensure that they overlap by exactly this amount.",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"multipleOf": 8,
						"orig_default": 32,
						"orig_required": false,
						"title": "Tile Overlap",
						"type": "integer",
						"ui_hidden": false
					},
					"steps": {
						"default": 18,
						"description": "Number of steps to run",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 18,
						"orig_required": false,
						"title": "Steps",
						"type": "integer",
						"ui_hidden": false
					},
					"cfg_scale": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"items": {
									"type": "number"
								},
								"type": "array"
							}
						],
						"default": 6,
						"description": "Classifier-Free Guidance scale",
						"field_kind": "input",
						"input": "any",
						"orig_default": 6,
						"orig_required": false,
						"title": "CFG Scale",
						"ui_hidden": false
					},
					"denoising_start": {
						"default": 0,
						"description": "When to start denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "Denoising Start",
						"type": "number",
						"ui_hidden": false
					},
					"denoising_end": {
						"default": 1,
						"description": "When to stop denoising, expressed a percentage of total steps",
						"field_kind": "input",
						"input": "any",
						"maximum": 1,
						"minimum": 0,
						"orig_default": 1,
						"orig_required": false,
						"title": "Denoising End",
						"type": "number",
						"ui_hidden": false
					},
					"scheduler": {
						"default": "euler",
						"description": "Scheduler to use during inference",
						"enum": [
							"ddim",
							"ddpm",
							"deis",
							"deis_k",
							"lms",
							"lms_k",
							"pndm",
							"heun",
							"heun_k",
							"euler",
							"euler_k",
							"euler_a",
							"kdpm_2",
							"kdpm_2_k",
							"kdpm_2_a",
							"kdpm_2_a_k",
							"dpmpp_2s",
							"dpmpp_2s_k",
							"dpmpp_2m",
							"dpmpp_2m_k",
							"dpmpp_2m_sde",
							"dpmpp_2m_sde_k",
							"dpmpp_3m",
							"dpmpp_3m_k",
							"dpmpp_sde",
							"dpmpp_sde_k",
							"unipc",
							"unipc_k",
							"lcm",
							"tcd"
						],
						"field_kind": "input",
						"input": "any",
						"orig_default": "euler",
						"orig_required": false,
						"title": "Scheduler",
						"type": "string",
						"ui_hidden": false,
						"ui_type": "SchedulerField"
					},
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"default": null,
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "input",
						"input": "connection",
						"orig_required": true,
						"title": "UNet",
						"ui_hidden": false
					},
					"cfg_rescale_multiplier": {
						"default": 0,
						"description": "Rescale multiplier for CFG guidance, used for models trained with zero-terminal SNR",
						"exclusiveMaximum": 1,
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 0,
						"orig_required": false,
						"title": "CFG Rescale Multiplier",
						"type": "number",
						"ui_hidden": false
					},
					"control": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ControlField"
							},
							{
								"items": {
									"$ref": "#/components/schemas/ControlField"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"field_kind": "input",
						"input": "connection",
						"orig_required": false,
						"title": "Control",
						"ui_hidden": false
					},
					"type": {
						"const": "tiled_multi_diffusion_denoise_latents",
						"default": "tiled_multi_diffusion_denoise_latents",
						"enum": [
							"tiled_multi_diffusion_denoise_latents"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"upscale",
					"denoise"
				],
				"title": "Tiled Multi-Diffusion Denoise Latents",
				"type": "object",
				"version": "1.0.0",
				"output": {
					"$ref": "#/components/schemas/LatentsOutput"
				}
			},
			"TransformerField": {
				"properties": {
					"transformer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load Transformer submodel"
					}
				},
				"required": [
					"transformer"
				],
				"title": "TransformerField",
				"type": "object"
			},
			"UIComponent": {
				"description": "The type of UI component to use for a field, used to override the default components, which are\ninferred from the field type.",
				"enum": [
					"none",
					"textarea",
					"slider"
				],
				"title": "UIComponent",
				"type": "string"
			},
			"UIConfigBase": {
				"description": "Provides additional node configuration to the UI.\nThis is used internally by the @invocation decorator logic. Do not use this directly.",
				"properties": {
					"tags": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"type": "null"
							}
						],
						"description": "The node's tags",
						"title": "Tags"
					},
					"title": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The node's display name",
						"title": "Title"
					},
					"category": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The node's category",
						"title": "Category"
					},
					"version": {
						"description": "The node's version. Should be a valid semver string e.g. \"1.0.0\" or \"3.8.13\".",
						"title": "Version",
						"type": "string"
					},
					"node_pack": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Whether or not this is a custom node",
						"title": "Node Pack"
					},
					"classification": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Classification"
							}
						],
						"default": "stable",
						"description": "The node's classification"
					}
				},
				"required": [
					"tags",
					"title",
					"category",
					"version",
					"node_pack",
					"classification"
				],
				"title": "UIConfigBase",
				"type": "object"
			},
			"UIType": {
				"description": "Type hints for the UI for situations in which the field type is not enough to infer the correct UI type.\n\n- Model Fields\nThe most common node-author-facing use will be for model fields. Internally, there is no difference\nbetween SD-1, SD-2 and SDXL model fields - they all use the class `MainModelField`. To ensure the\nbase-model-specific UI is rendered, use e.g. `ui_type=UIType.SDXLMainModelField` to indicate that\nthe field is an SDXL main model field.\n\n- Any Field\nWe cannot infer the usage of `typing.Any` via schema parsing, so you *must* use `ui_type=UIType.Any` to\nindicate that the field accepts any type. Use with caution. This cannot be used on outputs.\n\n- Scheduler Field\nSpecial handling in the UI is needed for this field, which otherwise would be parsed as a plain enum field.\n\n- Internal Fields\nSimilar to the Any Field, the `collect` and `iterate` nodes make use of `typing.Any`. To facilitate\nhandling these types in the client, we use `UIType._Collection` and `UIType._CollectionItem`. These\nshould not be used by node authors.\n\n- DEPRECATED Fields\nThese types are deprecated and should not be used by node authors. A warning will be logged if one is\nused, and the type will be ignored. They are included here for backwards compatibility.",
				"enum": [
					"MainModelField",
					"FluxMainModelField",
					"SDXLMainModelField",
					"SDXLRefinerModelField",
					"ONNXModelField",
					"VAEModelField",
					"FluxVAEModelField",
					"LoRAModelField",
					"ControlNetModelField",
					"IPAdapterModelField",
					"T2IAdapterModelField",
					"T5EncoderModelField",
					"CLIPEmbedModelField",
					"SpandrelImageToImageModelField",
					"SchedulerField",
					"AnyField",
					"CollectionField",
					"CollectionItemField",
					"DEPRECATED_Boolean",
					"DEPRECATED_Color",
					"DEPRECATED_Conditioning",
					"DEPRECATED_Control",
					"DEPRECATED_Float",
					"DEPRECATED_Image",
					"DEPRECATED_Integer",
					"DEPRECATED_Latents",
					"DEPRECATED_String",
					"DEPRECATED_BooleanCollection",
					"DEPRECATED_ColorCollection",
					"DEPRECATED_ConditioningCollection",
					"DEPRECATED_ControlCollection",
					"DEPRECATED_FloatCollection",
					"DEPRECATED_ImageCollection",
					"DEPRECATED_IntegerCollection",
					"DEPRECATED_LatentsCollection",
					"DEPRECATED_StringCollection",
					"DEPRECATED_BooleanPolymorphic",
					"DEPRECATED_ColorPolymorphic",
					"DEPRECATED_ConditioningPolymorphic",
					"DEPRECATED_ControlPolymorphic",
					"DEPRECATED_FloatPolymorphic",
					"DEPRECATED_ImagePolymorphic",
					"DEPRECATED_IntegerPolymorphic",
					"DEPRECATED_LatentsPolymorphic",
					"DEPRECATED_StringPolymorphic",
					"DEPRECATED_UNet",
					"DEPRECATED_Vae",
					"DEPRECATED_CLIP",
					"DEPRECATED_Collection",
					"DEPRECATED_CollectionItem",
					"DEPRECATED_Enum",
					"DEPRECATED_WorkflowField",
					"DEPRECATED_IsIntermediate",
					"DEPRECATED_BoardField",
					"DEPRECATED_MetadataItem",
					"DEPRECATED_MetadataItemCollection",
					"DEPRECATED_MetadataItemPolymorphic",
					"DEPRECATED_MetadataDict"
				],
				"title": "UIType",
				"type": "string"
			},
			"UNetField": {
				"properties": {
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load unet submodel"
					},
					"scheduler": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load scheduler submodel"
					},
					"loras": {
						"description": "LoRAs to apply on model loading",
						"items": {
							"$ref": "#/components/schemas/LoRAField"
						},
						"title": "Loras",
						"type": "array"
					},
					"seamless_axes": {
						"description": "Axes(\"x\" and \"y\") to which apply seamless",
						"items": {
							"type": "string"
						},
						"title": "Seamless Axes",
						"type": "array"
					},
					"freeu_config": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/FreeUConfig"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "FreeU configuration"
					}
				},
				"required": [
					"unet",
					"scheduler",
					"loras"
				],
				"title": "UNetField",
				"type": "object"
			},
			"UNetOutput": {
				"class": "output",
				"description": "Base class for invocations that output a UNet field.",
				"properties": {
					"unet": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UNetField"
							}
						],
						"description": "UNet (scheduler, LoRAs)",
						"field_kind": "output",
						"title": "UNet",
						"ui_hidden": false
					},
					"type": {
						"const": "unet_output",
						"default": "unet_output",
						"enum": [
							"unet_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"unet",
					"type",
					"type"
				],
				"title": "UNetOutput",
				"type": "object"
			},
			"URLModelSource": {
				"properties": {
					"url": {
						"type": "string",
						"minLength": 1,
						"format": "uri",
						"title": "Url"
					},
					"access_token": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Access Token"
					},
					"type": {
						"type": "string",
						"enum": [
							"url"
						],
						"const": "url",
						"title": "Type",
						"default": "url"
					}
				},
				"type": "object",
				"required": [
					"url"
				],
				"title": "URLModelSource",
				"description": "A generic URL point to a checkpoint file."
			},
			"UnsharpMaskInvocation": {
				"category": "image",
				"class": "invocation",
				"classification": "beta",
				"description": "Applies an unsharp mask filter to an image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to use",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"radius": {
						"default": 2,
						"description": "Unsharp mask radius",
						"exclusiveMinimum": 0,
						"field_kind": "input",
						"input": "any",
						"orig_default": 2,
						"orig_required": false,
						"title": "Radius",
						"type": "number",
						"ui_hidden": false
					},
					"strength": {
						"default": 50,
						"description": "Unsharp mask strength",
						"field_kind": "input",
						"input": "any",
						"minimum": 0,
						"orig_default": 50,
						"orig_required": false,
						"title": "Strength",
						"type": "number",
						"ui_hidden": false
					},
					"type": {
						"const": "unsharp_mask",
						"default": "unsharp_mask",
						"enum": [
							"unsharp_mask"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"image",
					"unsharp_mask"
				],
				"title": "Unsharp Mask",
				"type": "object",
				"version": "1.2.2",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			},
			"Upscaler": {
				"properties": {
					"upscaling_method": {
						"type": "string",
						"title": "Upscaling Method",
						"description": "Name of upscaling method"
					},
					"upscaling_models": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"title": "Upscaling Models",
						"description": "List of upscaling models for this method"
					}
				},
				"type": "object",
				"required": [
					"upscaling_method",
					"upscaling_models"
				],
				"title": "Upscaler"
			},
			"VAECheckpointConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"format": {
						"type": "string",
						"enum": [
							"checkpoint",
							"bnb_quantized_nf4b"
						],
						"title": "Format",
						"description": "Format of the provided checkpoint model",
						"default": "checkpoint"
					},
					"config_path": {
						"type": "string",
						"title": "Config Path",
						"description": "path to the checkpoint model config file"
					},
					"converted_at": {
						"anyOf": [
							{
								"type": "number"
							},
							{
								"type": "null"
							}
						],
						"title": "Converted At",
						"description": "When this model was last converted to diffusers"
					},
					"type": {
						"type": "string",
						"enum": [
							"vae"
						],
						"const": "vae",
						"title": "Type",
						"default": "vae"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"config_path",
					"key",
					"type",
					"format"
				],
				"title": "VAECheckpointConfig",
				"description": "Model config for standalone VAE models."
			},
			"VAEDiffusersConfig": {
				"properties": {
					"key": {
						"type": "string",
						"title": "Key",
						"description": "A unique key for this model."
					},
					"hash": {
						"type": "string",
						"title": "Hash",
						"description": "The hash of the model file(s)."
					},
					"path": {
						"type": "string",
						"title": "Path",
						"description": "Path to the model on the filesystem. Relative paths are relative to the Invoke root directory."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "Name of the model."
					},
					"base": {
						"allOf": [
							{
								"$ref": "#/components/schemas/BaseModelType"
							}
						],
						"description": "The base model."
					},
					"description": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Description",
						"description": "Model description"
					},
					"source": {
						"type": "string",
						"title": "Source",
						"description": "The original source of the model (path, URL or repo_id)."
					},
					"source_type": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelSourceType"
							}
						],
						"description": "The type of source"
					},
					"source_api_response": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Source Api Response",
						"description": "The original API response from the source, as stringified JSON."
					},
					"cover_image": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Cover Image",
						"description": "Url for image to preview model"
					},
					"type": {
						"type": "string",
						"enum": [
							"vae"
						],
						"const": "vae",
						"title": "Type",
						"default": "vae"
					},
					"format": {
						"type": "string",
						"enum": [
							"diffusers"
						],
						"const": "diffusers",
						"title": "Format",
						"default": "diffusers"
					}
				},
				"type": "object",
				"required": [
					"hash",
					"path",
					"name",
					"base",
					"source",
					"source_type",
					"key",
					"type",
					"format"
				],
				"title": "VAEDiffusersConfig",
				"description": "Model config for standalone VAE models (diffusers version)."
			},
			"VAEField": {
				"properties": {
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"description": "Info to load vae submodel"
					},
					"seamless_axes": {
						"description": "Axes(\"x\" and \"y\") to which apply seamless",
						"items": {
							"type": "string"
						},
						"title": "Seamless Axes",
						"type": "array"
					}
				},
				"required": [
					"vae"
				],
				"title": "VAEField",
				"type": "object"
			},
			"VAELoaderInvocation": {
				"category": "model",
				"class": "invocation",
				"classification": "stable",
				"description": "Loads a VAE model, outputting a VaeLoaderOutput",
				"node_pack": "invokeai",
				"properties": {
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"vae_model": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ModelIdentifierField"
							}
						],
						"default": null,
						"description": "VAE model to load",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"title": "VAE",
						"ui_hidden": false,
						"ui_type": "VAEModelField"
					},
					"type": {
						"const": "vae_loader",
						"default": "vae_loader",
						"enum": [
							"vae_loader"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"vae",
					"model"
				],
				"title": "VAE",
				"type": "object",
				"version": "1.0.3",
				"output": {
					"$ref": "#/components/schemas/VAEOutput"
				}
			},
			"VAEOutput": {
				"class": "output",
				"description": "Base class for invocations that output a VAE field",
				"properties": {
					"vae": {
						"allOf": [
							{
								"$ref": "#/components/schemas/VAEField"
							}
						],
						"description": "VAE",
						"field_kind": "output",
						"title": "VAE",
						"ui_hidden": false
					},
					"type": {
						"const": "vae_output",
						"default": "vae_output",
						"enum": [
							"vae_output"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"vae",
					"type",
					"type"
				],
				"title": "VAEOutput",
				"type": "object"
			},
			"ValidationError": {
				"properties": {
					"loc": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "integer"
								}
							]
						},
						"type": "array",
						"title": "Location"
					},
					"msg": {
						"type": "string",
						"title": "Message"
					},
					"type": {
						"type": "string",
						"title": "Error Type"
					}
				},
				"type": "object",
				"required": [
					"loc",
					"msg",
					"type"
				],
				"title": "ValidationError"
			},
			"Workflow": {
				"properties": {
					"name": {
						"type": "string",
						"title": "Name",
						"description": "The name of the workflow."
					},
					"author": {
						"type": "string",
						"title": "Author",
						"description": "The author of the workflow."
					},
					"description": {
						"type": "string",
						"title": "Description",
						"description": "The description of the workflow."
					},
					"version": {
						"type": "string",
						"title": "Version",
						"description": "The version of the workflow."
					},
					"contact": {
						"type": "string",
						"title": "Contact",
						"description": "The contact of the workflow."
					},
					"tags": {
						"type": "string",
						"title": "Tags",
						"description": "The tags of the workflow."
					},
					"notes": {
						"type": "string",
						"title": "Notes",
						"description": "The notes of the workflow."
					},
					"exposedFields": {
						"items": {
							"$ref": "#/components/schemas/ExposedField"
						},
						"type": "array",
						"title": "Exposedfields",
						"description": "The exposed fields of the workflow."
					},
					"meta": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WorkflowMeta"
							}
						],
						"description": "The meta of the workflow."
					},
					"nodes": {
						"items": {
							"additionalProperties": {
								"$ref": "#/components/schemas/JsonValue"
							},
							"type": "object"
						},
						"type": "array",
						"title": "Nodes",
						"description": "The nodes of the workflow."
					},
					"edges": {
						"items": {
							"additionalProperties": {
								"$ref": "#/components/schemas/JsonValue"
							},
							"type": "object"
						},
						"type": "array",
						"title": "Edges",
						"description": "The edges of the workflow."
					},
					"id": {
						"type": "string",
						"title": "Id",
						"description": "The id of the workflow."
					}
				},
				"type": "object",
				"required": [
					"name",
					"author",
					"description",
					"version",
					"contact",
					"tags",
					"notes",
					"exposedFields",
					"meta",
					"nodes",
					"edges",
					"id"
				],
				"title": "Workflow"
			},
			"WorkflowAndGraphResponse": {
				"properties": {
					"workflow": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Workflow",
						"description": "The workflow used to generate the image, as stringified JSON"
					},
					"graph": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "null"
							}
						],
						"title": "Graph",
						"description": "The graph used to generate the image, as stringified JSON"
					}
				},
				"type": "object",
				"required": [
					"workflow",
					"graph"
				],
				"title": "WorkflowAndGraphResponse"
			},
			"WorkflowCategory": {
				"type": "string",
				"enum": [
					"user",
					"default",
					"project"
				],
				"title": "WorkflowCategory"
			},
			"WorkflowMeta": {
				"properties": {
					"version": {
						"type": "string",
						"title": "Version",
						"description": "The version of the workflow schema."
					},
					"category": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WorkflowCategory"
							}
						],
						"description": "The category of the workflow (user or default).",
						"default": "user"
					}
				},
				"type": "object",
				"required": [
					"version"
				],
				"title": "WorkflowMeta"
			},
			"WorkflowRecordDTO": {
				"properties": {
					"workflow_id": {
						"type": "string",
						"title": "Workflow Id",
						"description": "The id of the workflow."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "The name of the workflow."
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "The created timestamp of the workflow."
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "The updated timestamp of the workflow."
					},
					"opened_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Opened At",
						"description": "The opened timestamp of the workflow."
					},
					"workflow": {
						"allOf": [
							{
								"$ref": "#/components/schemas/Workflow"
							}
						],
						"description": "The workflow."
					}
				},
				"type": "object",
				"required": [
					"workflow_id",
					"name",
					"created_at",
					"updated_at",
					"opened_at",
					"workflow"
				],
				"title": "WorkflowRecordDTO"
			},
			"WorkflowRecordListItemDTO": {
				"properties": {
					"workflow_id": {
						"type": "string",
						"title": "Workflow Id",
						"description": "The id of the workflow."
					},
					"name": {
						"type": "string",
						"title": "Name",
						"description": "The name of the workflow."
					},
					"created_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Created At",
						"description": "The created timestamp of the workflow."
					},
					"updated_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Updated At",
						"description": "The updated timestamp of the workflow."
					},
					"opened_at": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"title": "Opened At",
						"description": "The opened timestamp of the workflow."
					},
					"description": {
						"type": "string",
						"title": "Description",
						"description": "The description of the workflow."
					},
					"category": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WorkflowCategory"
							}
						],
						"description": "The description of the workflow."
					}
				},
				"type": "object",
				"required": [
					"workflow_id",
					"name",
					"created_at",
					"updated_at",
					"opened_at",
					"description",
					"category"
				],
				"title": "WorkflowRecordListItemDTO"
			},
			"WorkflowRecordOrderBy": {
				"type": "string",
				"enum": [
					"created_at",
					"updated_at",
					"opened_at",
					"name"
				],
				"title": "WorkflowRecordOrderBy",
				"description": "The order by options for workflow records"
			},
			"WorkflowWithoutID": {
				"properties": {
					"name": {
						"type": "string",
						"title": "Name",
						"description": "The name of the workflow."
					},
					"author": {
						"type": "string",
						"title": "Author",
						"description": "The author of the workflow."
					},
					"description": {
						"type": "string",
						"title": "Description",
						"description": "The description of the workflow."
					},
					"version": {
						"type": "string",
						"title": "Version",
						"description": "The version of the workflow."
					},
					"contact": {
						"type": "string",
						"title": "Contact",
						"description": "The contact of the workflow."
					},
					"tags": {
						"type": "string",
						"title": "Tags",
						"description": "The tags of the workflow."
					},
					"notes": {
						"type": "string",
						"title": "Notes",
						"description": "The notes of the workflow."
					},
					"exposedFields": {
						"items": {
							"$ref": "#/components/schemas/ExposedField"
						},
						"type": "array",
						"title": "Exposedfields",
						"description": "The exposed fields of the workflow."
					},
					"meta": {
						"allOf": [
							{
								"$ref": "#/components/schemas/WorkflowMeta"
							}
						],
						"description": "The meta of the workflow."
					},
					"nodes": {
						"items": {
							"additionalProperties": {
								"$ref": "#/components/schemas/JsonValue"
							},
							"type": "object"
						},
						"type": "array",
						"title": "Nodes",
						"description": "The nodes of the workflow."
					},
					"edges": {
						"items": {
							"additionalProperties": {
								"$ref": "#/components/schemas/JsonValue"
							},
							"type": "object"
						},
						"type": "array",
						"title": "Edges",
						"description": "The edges of the workflow."
					}
				},
				"type": "object",
				"required": [
					"name",
					"author",
					"description",
					"version",
					"contact",
					"tags",
					"notes",
					"exposedFields",
					"meta",
					"nodes",
					"edges"
				],
				"title": "WorkflowWithoutID"
			},
			"ZoeDepthImageProcessorInvocation": {
				"category": "controlnet",
				"class": "invocation",
				"classification": "stable",
				"description": "Applies Zoe depth processing to image",
				"node_pack": "invokeai",
				"properties": {
					"board": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/BoardField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "The board to save the image to",
						"field_kind": "internal",
						"input": "direct",
						"orig_required": false,
						"ui_hidden": false
					},
					"metadata": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/MetadataField"
							},
							{
								"type": "null"
							}
						],
						"default": null,
						"description": "Optional metadata to be saved with the image",
						"field_kind": "internal",
						"input": "connection",
						"orig_required": false,
						"ui_hidden": false
					},
					"id": {
						"description": "The id of this instance of an invocation. Must be unique among all instances of invocations.",
						"field_kind": "node_attribute",
						"title": "Id",
						"type": "string"
					},
					"is_intermediate": {
						"default": false,
						"description": "Whether or not this is an intermediate invocation.",
						"field_kind": "node_attribute",
						"title": "Is Intermediate",
						"type": "boolean",
						"ui_type": "IsIntermediate"
					},
					"use_cache": {
						"default": true,
						"description": "Whether or not to use the cache",
						"field_kind": "node_attribute",
						"title": "Use Cache",
						"type": "boolean"
					},
					"image": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ImageField"
							}
						],
						"default": null,
						"description": "The image to process",
						"field_kind": "input",
						"input": "any",
						"orig_required": true,
						"ui_hidden": false
					},
					"type": {
						"const": "zoe_depth_image_processor",
						"default": "zoe_depth_image_processor",
						"enum": [
							"zoe_depth_image_processor"
						],
						"field_kind": "node_attribute",
						"title": "type",
						"type": "string"
					}
				},
				"required": [
					"type",
					"id"
				],
				"tags": [
					"controlnet",
					"zoe",
					"depth"
				],
				"title": "Zoe (Depth) Processor",
				"type": "object",
				"version": "1.2.3",
				"output": {
					"$ref": "#/components/schemas/ImageOutput"
				}
			}
		}
	}
}
